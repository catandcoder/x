<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清澄秋爽</title>
  
  <subtitle>苹果树下的思索者 书写是对思维的缓存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dashen.tech/"/>
  <updated>2021-09-26T07:20:56.077Z</updated>
  <id>http://www.dashen.tech/</id>
  
  <author>
    <name>fliter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SubQuery入门指南II</title>
    <link href="http://www.dashen.tech/2021/09/25/SubQuery%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97II/"/>
    <id>http://www.dashen.tech/2021/09/25/SubQuery入门指南II/</id>
    <published>2021-09-25T13:56:23.000Z</published>
    <updated>2021-09-26T07:20:56.077Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/Nyy3ogj0-ySOTczJBvpQxw" target="_blank" rel="noopener">SubQuery开发者指南丨Hello World (由SubQuery 托管)</a></p><p><br></p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p><br></p><blockquote><p>subql init –starter Cui_subql</p></blockquote><p><img src="/2021/09/25/SubQuery入门指南II/0.png" width="100%" height="50%"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Cui_subql</span><br><span class="line">npm install</span><br><span class="line">npm run-script codegen</span><br><span class="line">npm run-script build</span><br></pre></td></tr></table></figure><p><img src="/2021/09/25/SubQuery入门指南II/1.png" width="100%" height="50%"></p><p><br></p><h3 id="创建-GitHub-存储库"><a href="#创建-GitHub-存储库" class="headerlink" title="创建 GitHub 存储库"></a>创建 GitHub 存储库</h3><p><br></p><p><a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:cuishuang/subql_demo.git</p><p><br></p><h3 id="推送到-GitHub"><a href="#推送到-GitHub" class="headerlink" title="推送到 GitHub"></a>推送到 GitHub</h3><p><br></p><p><br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Cui_subql</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@github.com:cuishuang/subql_demo.git  //将远程存储库设置为 git@github.com:cuishuang/subql_demo.git</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m<span class="string">"first commit"</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin master</span><br></pre></td></tr></table></figure><p><img src="/2021/09/25/SubQuery入门指南II/2.png" width="100%" height="50%"></p><p><img src="/2021/09/25/SubQuery入门指南II/3.png" width="100%" height="50%"></p><p><br></p><h3 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h3><p><br></p><p>点击<a href="https://project.subquery.network" target="_blank" rel="noopener">project.subquery.network</a>并使用github登录</p><ul><li><p>GitHub 帐户：如果有多个 GitHub 帐户，请选择将在哪个帐户下创建此项目。 在 GitHub 组织帐户中创建的项目在该组织的成员之间共享。</p></li><li><p>项目名称：在此处为项目命名。</p></li><li><p>副标题：为项目提供副标题。</p></li><li><p>描述：解释 SubQuery 项目的用途。</p></li><li><p>GitHub 存储库 URL：这必须是包含 SubQuery 项目的公共存储库的有效 GitHub URL。schema.graphql 文件必须位于目录的根目录中。</p></li><li><p>隐藏项目：如果选中，这将在公共 SubQuery 浏览器中隐藏项目。 如果想与社区共享您的 SubQuery 项目，请不要选择此项！</p></li></ul><p><img src="/2021/09/25/SubQuery入门指南II/4.png" width="100%" height="50%"></p><p><br></p><p>单击创建后，将跳转到控制面板。这上面包含许多有用信息，如它使用的网络、它运行的源代码的 GitHub 存储库 URL、它的创建时间和上次更新时间，尤其是部署的详细信息</p><p><img src="/2021/09/25/SubQuery入门指南II/5.png" width="100%" height="50%"></p><p><br></p><h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><p><br></p><p>现在已在 SubQuery Projects 中创建了项目，下一步是部署项目使其可操作。 </p><p>部署一个版本会触发新的 SubQuery 索引操作启动，并设置所需的查询服务以开始接受 GraphQL 请求。 还可以在此处将新版本部署到现有项目。</p><p>可以选择部署到各种环境，例如生产槽或暂存槽。 在这里，将部署到生产槽。 单击“部署”按钮会显示如下：</p><p><img src="/2021/09/25/SubQuery入门指南II/6.png" width="100%" height="50%"></p><ul><li><p>新版本的 Commit Hash：从 GitHub 中选择您要部署的 SubQuery 项目代码库的正确交付 (因为只有一个交付/提交，所以下拉菜单中只有一个选项)</p></li><li><p>索引器版本：这是要在其上运行此SubQuery项目的SubQuery节点服务的版本。 可登录<a href="https://www.npmjs.com/package/@subql/node" target="_blank" rel="noopener">此网址参考</a></p></li><li><p>查询版本：这是要在其上运行此 SubQuery 项目的 SubQuery 查询服务的版本。 可登录<a href="https://www.npmjs.com/package/@subql/query" target="_blank" rel="noopener">此网址参考</a></p></li></ul><p>将使用最新版本的索引器和查询版本，因此此处接受默认值，然后单击“部署更新”</p><p>然后，将看到部署处于“正在处理”状态。 在这里，代码正在部署到 SubQuery 的托管基础架构上。 服务器正在按需启动并准备提供服务，这将需要几分钟的时间。</p><p><img src="/2021/09/25/SubQuery入门指南II/7.png" width="100%" height="50%"></p><p><br></p><h3 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h3><p><br></p><p><img src="/2021/09/25/SubQuery入门指南II/8.png" width="100%" height="50%"></p><p><img src="/2021/09/25/SubQuery入门指南II/9.png" width="100%" height="50%"></p><p><br></p><h3 id="运行一个简单的-GET-查询"><a href="#运行一个简单的-GET-查询" class="headerlink" title="运行一个简单的 GET 查询"></a>运行一个简单的 GET 查询</h3><p><br></p><p>Query Endpoint:    <a href="https://api.subquery.network/sq/cuishuang/blockchain" target="_blank" rel="noopener">https://api.subquery.network/sq/cuishuang/blockchain</a></p><p><img src="/2021/09/25/SubQuery入门指南II/10.png" width="100%" height="50%"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/Nyy3ogj0-ySOTczJBvpQxw&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SubQuery开发者指南丨Hello World (由SubQuery 托管)&lt;/a&gt;&lt;/
      
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.dashen.tech/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>SubQuery入门指南</title>
    <link href="http://www.dashen.tech/2021/09/25/SubQuery%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
    <id>http://www.dashen.tech/2021/09/25/SubQuery入门指南/</id>
    <published>2021-09-25T13:20:46.000Z</published>
    <updated>2021-09-26T02:59:49.458Z</updated>
    
    <content type="html"><![CDATA[<p>SubQuery是波卡生态的 The Graph(以太坊生态的数据服务提供者)</p><p>SubQuery可以让开发者专注于其核心用例和前端，而无需浪费时间来构建用于数据处理的后端。</p><p><br></p><h3 id="下载SubQuery-CLI"><a href="#下载SubQuery-CLI" class="headerlink" title="下载SubQuery CLI"></a>下载SubQuery CLI</h3><p><br></p><blockquote><p>npm install -g @subql/cli</p></blockquote><blockquote><p>subql help </p></blockquote><p><img src="/2021/09/25/SubQuery入门指南/0.png" width="100%" height="50%"></p><p><br></p><h3 id="初始化-Starter-SubQuery-项目"><a href="#初始化-Starter-SubQuery-项目" class="headerlink" title="初始化 Starter SubQuery 项目"></a>初始化 Starter SubQuery 项目</h3><p><br></p><blockquote><p>subql init –starter Shuang_subql</p></blockquote><ul><li><p>Git 存储库（可选）：提供指向此 SubQuery 项目的，并将在其中托管的存储库的 Git URL（当托管在 SubQuery Explorer 中时）。</p></li><li><p>RPC 端点（必需）：提供一个 wss URL给一个正在运行的 RPC 端点，该端点将默认用于此项目。 您可以快速访问不同 Polkadot 网络的公共端点，甚至可以使用 OnFinality，或仅使用默认的 Polkadot 端点创建您自己的私有专用节点。</p></li><li><p>作者（必填）：在此处输入此 SubQuery 项目的所有者。</p></li><li><p>描述（可选）：您可以提供关于您项目的简短段落，描述项目包含哪些数据以及用户可以使用它做什么。</p></li><li><p>版本（必填）：输入自定义版本号或使用默认版本 (1.0.0)。</p></li><li><p>许可证（必需）：提供此项目的软件许可证或接受默认（Apache-2.0）。</p></li></ul><blockquote><p>cd Shuang_test</p></blockquote><blockquote><p>npm install</p></blockquote><p><img src="/2021/09/25/SubQuery入门指南/1.png" width="100%" height="50%"></p><p><br></p><h3 id="配置和构建入门项目"><a href="#配置和构建入门项目" class="headerlink" title="配置和构建入门项目"></a>配置和构建入门项目</h3><p><br></p><p><img src="/2021/09/25/SubQuery入门指南/2.png" width="100%" height="50%"></p><p>之后的开发将主要处理以下文件：</p><ul><li><p>project.yaml 中的清单</p></li><li><p>schema.graphql 中的 GraphQL 架构</p></li><li><p>src/mappings/ 目录中的映射函数</p></li></ul><p><br></p><h3 id="GraphQL-模型生成"><a href="#GraphQL-模型生成" class="headerlink" title="GraphQL 模型生成"></a>GraphQL 模型生成</h3><p><br></p><blockquote><p>npm run-script codegen</p></blockquote><p><img src="/2021/09/25/SubQuery入门指南/3.png" width="100%" height="50%"></p><p>此时会自动新建/src/types/models文件夹，里面是自动生成的文件</p><p><br></p><h3 id="构建项目"><a href="#构建项目" class="headerlink" title="构建项目"></a>构建项目</h3><p><br></p><blockquote><p>npm run-script build</p></blockquote><p><br></p><h3 id="运行-SubQuery-项目"><a href="#运行-SubQuery-项目" class="headerlink" title="运行 SubQuery 项目"></a>运行 SubQuery 项目</h3><p><br></p><p>打开本地的Docker，然后执行</p><blockquote><p>docker-compose pull &amp;&amp; docker-compose up</p></blockquote><p><img src="/2021/09/25/SubQuery入门指南/4.png" width="100%" height="50%"></p><p><br></p><h3 id="查询新建的项目"><a href="#查询新建的项目" class="headerlink" title="查询新建的项目"></a>查询新建的项目</h3><p><br></p><p>打开浏览器并前往 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p><p>这时会看到 GraphQL playground 显示在资源管理器中，其模式是准备查询。 在 Playground 的右上角，会找到一个 Docs 按钮，该按钮将打开文档绘图。 该文档是自动生成的，能帮助找到可以查询的实体和方法。</p><p>对于新的 SubQuery 入门项目，可以尝试以下查询以了解其工作原理或了解有关 GraphQL 查询语言的更多信息。</p><p><img src="/2021/09/25/SubQuery入门指南/5.png" width="100%" height="50%"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  query&#123;</span><br><span class="line">    starterEntities(first:10)&#123;</span><br><span class="line">      nodes&#123;</span><br><span class="line">        field1</span><br><span class="line">        field2</span><br><span class="line">        field3</span><br><span class="line">        id</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/09/25/SubQuery入门指南/6.png" width="100%" height="50%"></p><p><br></p><p>现在有一个本地运行的 SubQuery 项目，该项目接受 GraphQL API 对示例数据的请求~</p><p>下一篇将向展示如何将新项目发布到 SubQuery Projects, 并使用ta们的资源管理器去查询</p><p><br></p><p>参考 </p><p><a href="https://mp.weixin.qq.com/s/ymuziBgS9qr1R2_EXxdwHw" target="_blank" rel="noopener">SubQuery丨开发者快速入门指南</a></p><p><a href="https://mp.weixin.qq.com/s/6y9tHW1YPUWqjdYgnUte7Q" target="_blank" rel="noopener">SubQuery丨Hello world 入门简介</a></p><p><a href="https://mp.weixin.qq.com/s/hX-xncFOkDTG8dC9HP9VSg" target="_blank" rel="noopener">SubQuery开发者指南丨Hello World Explained</a></p><p><a href="https://mp.weixin.qq.com/s/ZIAJ1HKipaI6ZRkQ9pHIGA" target="_blank" rel="noopener">!!!SubQuery开发者指南丨清单文件（Manifest File）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SubQuery是波卡生态的 The Graph(以太坊生态的数据服务提供者)&lt;/p&gt;
&lt;p&gt;SubQuery可以让开发者专注于其核心用例和前端，而无需浪费时间来构建用于数据处理的后端。&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载SubQuery-CLI&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="微服务" scheme="http://www.dashen.tech/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>搭建substrate开发环境</title>
    <link href="http://www.dashen.tech/2021/09/19/%E6%90%AD%E5%BB%BAsubstrate%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.dashen.tech/2021/09/19/搭建substrate开发环境/</id>
    <published>2021-09-19T13:46:30.000Z</published>
    <updated>2021-09-21T08:45:29.058Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/09/19/搭建substrate开发环境/-1.png" width="100%" height="100%"></p><p><br></p><h3 id="安装Substrate依赖"><a href="#安装Substrate依赖" class="headerlink" title="安装Substrate依赖"></a>安装Substrate依赖</h3><p><br></p><blockquote><p>curl <a href="https://getsubstrate.io/-o-" target="_blank" rel="noopener">https://getsubstrate.io/-o-</a> <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh</a> | bash</p></blockquote><details><br><summary><b>实际的shell为:</b></summary><br><br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Copyright 2015-2020 Parity Technologies (UK) Ltd.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"linux-gnu"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="keyword">if</span> [[ $(whoami) == <span class="string">"root"</span> ]]; <span class="keyword">then</span></span><br><span class="line">MAKE_ME_ROOT=</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">MAKE_ME_ROOT=sudo</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/redhat-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Redhat Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/SuSE-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Suse Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/arch-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Arch Linux detected."</span></span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> pacman -Syu --needed --noconfirm cmake gcc openssl-1.0 pkgconf git clang</span><br><span class="line"><span class="built_in">export</span> OPENSSL_LIB_DIR=<span class="string">"/usr/lib/openssl-1.0"</span>;</span><br><span class="line"><span class="built_in">export</span> OPENSSL_INCLUDE_DIR=<span class="string">"/usr/include/openssl-1.0"</span></span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/mandrake-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Mandrake Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/debian_version ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Ubuntu/Debian Linux detected."</span></span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> apt update</span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> apt install -y cmake pkg-config libssl-dev git gcc build-essential git clang libclang-dev</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Unknown Linux distribution."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"darwin"</span>* ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Mac OS (Darwin) detected."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">which</span> brew &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line">brew install openssl cmake llvm</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"freebsd"</span>* ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FreeBSD detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Unknown operating system."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">which</span> rustup &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">curl https://sh.rustup.rs -sSf | sh -s -- -y</span><br><span class="line"><span class="built_in">source</span> ~/.cargo/env</span><br><span class="line">rustup default stable</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rustup update</span><br><span class="line">rustup default stable</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">rustup update nightly</span><br><span class="line">rustup target add wasm32-unknown-unknown --toolchain nightly</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"--fast"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Skipped cargo install of 'substrate' and 'subkey'"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You can install manually by cloning the https://github.com/paritytech/substrate repo,"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"and using cargo to install 'substrate' and 'subkey' from the repo path."</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">g=$(mktemp -d)</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/paritytech/substrate <span class="string">"<span class="variable">$g</span>"</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="string">"<span class="variable">$g</span>"</span></span><br><span class="line">cargo install --force --path ./bin/node/cli <span class="comment">#substrate</span></span><br><span class="line">cargo install --force --path ./bin/utils/subkey subkey</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Run source ~/.cargo/env now to update environment"</span></span><br></pre></td></tr></table></figure><br><br></details><p><img src="/2021/09/19/搭建substrate开发环境/0.png" width="100%" height="100%"></p><p>(wasm-gc，可以压缩wasm二进制文件的大小)</p><p><img src="/2021/09/19/搭建substrate开发环境/1.png" width="100%" height="100%"></p><p><br></p><hr><p><br></p><h3 id="使用node-template"><a href="#使用node-template" class="headerlink" title="使用node template"></a>使用node template</h3><p><br></p><p><img src="/2021/09/19/搭建substrate开发环境/2.png" width="100%" height="100%"></p><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:substrate-developer-hub/substrate-node-template.git</p></blockquote><p>（cd substrate-node-template）</p><blockquote><p>cargo build –release</p></blockquote><p>(编译确实非常慢)</p><p><img src="/2021/09/19/搭建substrate开发环境/3.png" width="100%" height="100%"></p><blockquote><p>./target/release/node-template purge-chain –dev</p></blockquote><p><img src="/2021/09/19/搭建substrate开发环境/4.png" width="100%" height="100%"></p><blockquote><p>./target/release/node-template –dev  </p></blockquote><p><img src="/2021/09/19/搭建substrate开发环境/5.png" width="100%" height="100%"></p><p><br></p><p>可使用 <strong>./target/release/node-template -h </strong> 查看所有命令：</p><details><br><summary><b>./target/release/node-template -h:</b></summary><br><br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">node-template 3.0.0-monthly-2021-09+1-3b547c9-aarch64-macos</span><br><span class="line"></span><br><span class="line">Substrate DevHub &lt;https://github.com/substrate-developer-hub&gt;</span><br><span class="line">A fresh FRAME-based Substrate node, ready <span class="keyword">for</span> hacking.</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    node-template [FLAGS] [OPTIONS]</span><br><span class="line">    node-template &lt;SUBCOMMAND&gt;</span><br><span class="line"></span><br><span class="line">FLAGS:</span><br><span class="line">        --alice                            Shortcut <span class="keyword">for</span> `--name Alice --validator` with session keys <span class="keyword">for</span> `Alice` added</span><br><span class="line">                                           to keystore</span><br><span class="line">        --allow-private-ipv4               Always accept connecting to private IPv4 addresses (as specified <span class="keyword">in</span></span><br><span class="line">                                           [RFC1918](https://tools.ietf.org/html/rfc1918)). Enabled by default <span class="keyword">for</span></span><br><span class="line">                                           chains marked as <span class="string">"local"</span> <span class="keyword">in</span> their chain specifications, or when `--dev` is</span><br><span class="line">                                           passed</span><br><span class="line">        --bob                              Shortcut <span class="keyword">for</span> `--name Bob --validator` with session keys <span class="keyword">for</span> `Bob` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --charlie                          Shortcut <span class="keyword">for</span> `--name Charlie --validator` with session keys <span class="keyword">for</span> `Charlie`</span><br><span class="line">                                           added to keystore</span><br><span class="line">        --dave                             Shortcut <span class="keyword">for</span> `--name Dave --validator` with session keys <span class="keyword">for</span> `Dave` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --dev                              Specify the development chain</span><br><span class="line">        --<span class="built_in">disable</span>-log-color                Disable <span class="built_in">log</span> color output</span><br><span class="line">        --<span class="built_in">disable</span>-log-reloading            Disable feature to dynamically update and reload the <span class="built_in">log</span> filter</span><br><span class="line">        --discover-local                   Enable peer discovery on <span class="built_in">local</span> networks</span><br><span class="line">        --eve                              Shortcut <span class="keyword">for</span> `--name Eve --validator` with session keys <span class="keyword">for</span> `Eve` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --ferdie                           Shortcut <span class="keyword">for</span> `--name Ferdie --validator` with session keys <span class="keyword">for</span> `Ferdie` added</span><br><span class="line">                                           to keystore</span><br><span class="line">        --force-authoring                  Enable authoring even when offline</span><br><span class="line">    -h, --<span class="built_in">help</span>                             Prints <span class="built_in">help</span> information</span><br><span class="line">        --ipfs-server                      Join the IPFS network and serve transactions over bitswap protocol</span><br><span class="line">        --kademlia-disjoint-query-paths    Require iterative Kademlia DHT queries to use disjoint paths <span class="keyword">for</span> increased</span><br><span class="line">                                           resiliency <span class="keyword">in</span> the presence of potentially adversarial nodes</span><br><span class="line">        --light                            Experimental: Run <span class="keyword">in</span> light client mode</span><br><span class="line">        --no-grandpa                       Disable GRANDPA voter when running <span class="keyword">in</span> validator mode, otherwise <span class="built_in">disable</span> the</span><br><span class="line">                                           GRANDPA observer</span><br><span class="line">        --no-mdns                          Disable mDNS discovery</span><br><span class="line">        --no-private-ipv4                  Always forbid connecting to private IPv4 addresses (as specified <span class="keyword">in</span></span><br><span class="line">                                           [RFC1918](https://tools.ietf.org/html/rfc1918)), unless the address was</span><br><span class="line">                                           passed with `--reserved-nodes` or `--bootnodes`. Enabled by default <span class="keyword">for</span></span><br><span class="line">                                           chains marked as <span class="string">"live"</span> <span class="keyword">in</span> their chain specifications</span><br><span class="line">        --no-prometheus                    Do not expose a Prometheus exporter endpoint</span><br><span class="line">        --no-telemetry                     Disable connecting to the Substrate telemetry server</span><br><span class="line">        --one                              Shortcut <span class="keyword">for</span> `--name One --validator` with session keys <span class="keyword">for</span> `One` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --password-interactive             Use interactive shell <span class="keyword">for</span> entering the password used by the keystore</span><br><span class="line">        --prometheus-external              Expose Prometheus exporter on all interfaces</span><br><span class="line">        --reserved-only                    Whether to only synchronize the chain with reserved nodes</span><br><span class="line">        --rpc-external                     Listen to all RPC interfaces</span><br><span class="line">        --storage-chain                    Enable storage chain mode</span><br><span class="line">        --tmp                              Run a temporary node</span><br><span class="line">        --two                              Shortcut <span class="keyword">for</span> `--name Two --validator` with session keys <span class="keyword">for</span> `Two` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --unsafe-pruning                   Force start with unsafe pruning settings</span><br><span class="line">        --unsafe-rpc-external              Listen to all RPC interfaces</span><br><span class="line">        --unsafe-ws-external               Listen to all Websocket interfaces</span><br><span class="line">        --validator                        Enable validator mode</span><br><span class="line">    -V, --version                          Prints version information</span><br><span class="line">        --ws-external                      Listen to all Websocket interfaces</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">    -d, --base-path &lt;PATH&gt;                                       Specify custom base path</span><br><span class="line">        --bootnodes &lt;ADDR&gt;...                                    Specify a list of bootnodes</span><br><span class="line">        --chain &lt;CHAIN_SPEC&gt;                                     Specify the chain specification</span><br><span class="line">        --database &lt;DB&gt;</span><br><span class="line">            Select database backend to use [possible values: rocksdb, paritydb-experimental, auto]</span><br><span class="line"></span><br><span class="line">        --db-cache &lt;MiB&gt;                                         Limit the memory the database cache can use</span><br><span class="line">        --offchain-worker &lt;ENABLED&gt;</span><br><span class="line">            Should execute offchain workers on every block [default: WhenValidating]  [possible values:</span><br><span class="line">            Always, Never, WhenValidating]</span><br><span class="line">        --execution &lt;STRATEGY&gt;</span><br><span class="line">            The execution strategy that should be used by all execution contexts [possible values: Native,</span><br><span class="line">            Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-block-construction &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> constructing blocks [possible values:</span><br><span class="line">            Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-import-block &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">for</span> general block import (including locally</span><br><span class="line">            authored blocks) [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-offchain-worker &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> using an off-chain worker [possible values:</span><br><span class="line">            Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-other &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> not syncing, importing or constructing</span><br><span class="line">            blocks [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-syncing &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">for</span> importing blocks as part of an initial sync</span><br><span class="line">            [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --<span class="keyword">in</span>-peers &lt;COUNT&gt;</span><br><span class="line">            Specify the maximum number of incoming connections we<span class="string">'re accepting [default: 25]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --enable-offchain-indexing &lt;ENABLE_OFFCHAIN_INDEXING&gt;</span></span><br><span class="line"><span class="string">            Enable Offchain Indexing API, which allows block import to write to Offchain DB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --ipc-path &lt;PATH&gt;                                        Specify IPC RPC server path</span></span><br><span class="line"><span class="string">        --keep-blocks &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Specify the number of finalized blocks to keep in the database</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --keystore-path &lt;PATH&gt;                                   Specify custom keystore path</span></span><br><span class="line"><span class="string">        --keystore-uri &lt;keystore-uri&gt;                            Specify custom URIs to connect to for keystore-services</span></span><br><span class="line"><span class="string">        --listen-addr &lt;LISTEN_ADDR&gt;...                           Listen on this multiaddress</span></span><br><span class="line"><span class="string">    -l, --log &lt;LOG_PATTERN&gt;...</span></span><br><span class="line"><span class="string">            Sets a custom logging filter. Syntax is &lt;target&gt;=&lt;level&gt;, e.g. -lsync=debug</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --max-parallel-downloads &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of peers from which to ask for the same blocks in parallel [default: 5]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --max-runtime-instances &lt;max-runtime-instances&gt;          The size of the instances cache for each runtime</span></span><br><span class="line"><span class="string">        --name &lt;NAME&gt;                                            The human-readable name for this node</span></span><br><span class="line"><span class="string">        --node-key &lt;KEY&gt;                                         The secret key to use for libp2p networking</span></span><br><span class="line"><span class="string">        --node-key-file &lt;FILE&gt;</span></span><br><span class="line"><span class="string">            The file from which to read the node'</span>s secret key to use <span class="keyword">for</span> libp2p networking</span><br><span class="line"></span><br><span class="line">        --node-key-type &lt;TYPE&gt;</span><br><span class="line">            The <span class="built_in">type</span> of secret key to use <span class="keyword">for</span> libp2p networking [default: Ed25519]  [possible values:</span><br><span class="line">            Ed25519]</span><br><span class="line">        --out-peers &lt;COUNT&gt;</span><br><span class="line">            Specify the number of outgoing connections we<span class="string">'re trying to maintain [default: 25]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --password &lt;password&gt;</span></span><br><span class="line"><span class="string">            Password used by the keystore. This allows appending an extra user-defined secret to the seed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --password-filename &lt;PATH&gt;                               File that contains the password used by the keystore</span></span><br><span class="line"><span class="string">        --pool-kbytes &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of kilobytes of all transactions stored in the pool [default: 20480]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --pool-limit &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of transactions in the transaction pool [default: 8192]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --port &lt;PORT&gt;                                            Specify p2p protocol TCP port</span></span><br><span class="line"><span class="string">        --prometheus-port &lt;PORT&gt;                                 Specify Prometheus exporter TCP Port</span></span><br><span class="line"><span class="string">        --pruning &lt;PRUNING_MODE&gt;</span></span><br><span class="line"><span class="string">            Specify the state pruning mode, a number of blocks to keep or '</span>archive<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --public-addr &lt;PUBLIC_ADDR&gt;...</span></span><br><span class="line"><span class="string">            The public address that other nodes will use to connect to it. This can be used if there'</span>s a proxy <span class="keyword">in</span> front</span><br><span class="line">            of this node</span><br><span class="line">        --reserved-nodes &lt;ADDR&gt;...                               Specify a list of reserved node addresses</span><br><span class="line">        --rpc-cors &lt;ORIGINS&gt;</span><br><span class="line">            Specify browser Origins allowed to access the HTTP &amp; WS RPC servers</span><br><span class="line"></span><br><span class="line">        --rpc-http-threads &lt;COUNT&gt;                               Size of the RPC HTTP server thread pool</span><br><span class="line">        --rpc-max-payload &lt;rpc-max-payload&gt;</span><br><span class="line">            Set the the maximum RPC payload size <span class="keyword">for</span> both requests and responses (both http and ws), <span class="keyword">in</span> megabytes.</span><br><span class="line">            Default is 15MiB</span><br><span class="line">        --rpc-methods &lt;METHOD SET&gt;</span><br><span class="line">            RPC methods to expose. [default: Auto]  [possible values: Auto, Safe, Unsafe]</span><br><span class="line"></span><br><span class="line">        --rpc-port &lt;PORT&gt;                                        Specify HTTP RPC server TCP port</span><br><span class="line">        --state-cache-size &lt;Bytes&gt;                               Specify the state cache size [default: 67108864]</span><br><span class="line">        --sync &lt;SYNC_MODE&gt;                                       Blockchain syncing mode [default: Full]</span><br><span class="line">        --telemetry-url &lt;URL VERBOSITY&gt;...                       The URL of the telemetry server to connect to</span><br><span class="line">        --tracing-receiver &lt;RECEIVER&gt;</span><br><span class="line">            Receiver to process tracing messages [default: Log]  [possible values: Log]</span><br><span class="line"></span><br><span class="line">        --tracing-targets &lt;TARGETS&gt;</span><br><span class="line">            Sets a custom profiling filter. Syntax is the same as <span class="keyword">for</span> logging: &lt;target&gt;=&lt;level&gt;</span><br><span class="line"></span><br><span class="line">        --wasm-execution &lt;METHOD&gt;</span><br><span class="line">            Method <span class="keyword">for</span> executing Wasm runtime code [default: Compiled]  [possible values: interpreted-i-know-</span><br><span class="line">            what-i-do, compiled]</span><br><span class="line">        --wasm-runtime-overrides &lt;PATH&gt;                          Specify the path <span class="built_in">where</span> <span class="built_in">local</span> WASM runtimes are stored</span><br><span class="line">        --ws-max-connections &lt;COUNT&gt;                             Maximum number of WS RPC server connections</span><br><span class="line">        --ws-port &lt;PORT&gt;                                         Specify WebSockets RPC server TCP port</span><br><span class="line"></span><br><span class="line">SUBCOMMANDS:</span><br><span class="line">    benchmark        Benchmark runtime pallets.</span><br><span class="line">    build-spec       Build a chain specification</span><br><span class="line">    check-block      Validate blocks</span><br><span class="line">    <span class="built_in">export</span>-blocks    Export blocks</span><br><span class="line">    <span class="built_in">export</span>-state     Export the state of a given block into a chain spec</span><br><span class="line">    <span class="built_in">help</span>             Prints this message or the <span class="built_in">help</span> of the given subcommand(s)</span><br><span class="line">    import-blocks    Import blocks</span><br><span class="line">    key              Key management cli utilities</span><br><span class="line">    purge-chain      Remove the whole chain</span><br><span class="line">    revert           Revert the chain to a previous state</span><br></pre></td></tr></table></figure><br><br></details><p><br></p><h3 id="使用交互工具-apps"><a href="#使用交互工具-apps" class="headerlink" title="使用交互工具 apps"></a>使用交互工具 apps</h3><p><br></p><h4 id="方法一，使用官方的apps："><a href="#方法一，使用官方的apps：" class="headerlink" title="方法一，使用官方的apps："></a>方法一，使用官方的apps：</h4><p><a href="https://polkadot.js.org/apps/#/accounts" target="_blank" rel="noopener">https://polkadot.js.org/apps/#/accounts</a></p><p><a href="https://polkadot.js.org/apps/#/explorer" target="_blank" rel="noopener">https://polkadot.js.org/apps/#/explorer</a></p><p><img src="/2021/09/19/搭建substrate开发环境/6.png" width="100%" height="100%"></p><h4 id="方法二，-编译-安装本地的apps，安装步骤参考项目的readme文档"><a href="#方法二，-编译-安装本地的apps，安装步骤参考项目的readme文档" class="headerlink" title="方法二，(编译)安装本地的apps，安装步骤参考项目的readme文档"></a>方法二，(编译)安装本地的apps，安装步骤参考项目的readme文档</h4><p>其实是一个react的项目</p><p><a href="https://github.com/polkadot-js/apps#development" target="_blank" rel="noopener">https://github.com/polkadot-js/apps#development</a></p><p><br></p><h3 id="配置IDE"><a href="#配置IDE" class="headerlink" title="配置IDE"></a>配置IDE</h3><p><br></p><h4 id="VSCode-插件"><a href="#VSCode-插件" class="headerlink" title="VSCode 插件"></a>VSCode 插件</h4><ul><li><p>Better toml</p></li><li><p>Rust-analyzer：<a href="https://github.com/rust-analyzer/rust-analyzer" target="_blank" rel="noopener">https://github.com/rust-analyzer/rust-analyzer</a></p></li><li><p>Intellij IDEA Keybindings</p></li><li><p>Settings Sync(将配置保存到github，换机器时好同步)</p></li></ul><p><br></p><h4 id="IntelliJ-IDEA-插件："><a href="#IntelliJ-IDEA-插件：" class="headerlink" title="IntelliJ IDEA 插件："></a>IntelliJ IDEA 插件：</h4><ul><li>Rust</li></ul><p><br></p><h3 id="国内资源加速-crates-io"><a href="#国内资源加速-crates-io" class="headerlink" title="国内资源加速 crates.io"></a>国内资源加速 crates.io</h3><p><br></p><p><a href="https://mirrors.ustc.edu.cn/help/crates.io-index.html" target="_blank" rel="noopener">中科大Rust crates源</a>，修改 ~/.cargo/config;</p><p>（之前没有设置过，则需新建config文件）</p><p>修改如下：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">registry = <span class="string">"https://github.com/rust-lang/crates.io-index"</span></span><br><span class="line">replace-with = <span class="symbol">'ustc</span>'</span><br><span class="line"></span><br><span class="line">[source.ustc]</span><br><span class="line">registry = <span class="string">"git://mirrors.ustc.edu.cn/crates.io-index"</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="国内资源加速Github"><a href="#国内资源加速Github" class="headerlink" title="国内资源加速Github"></a>国内资源加速Github</h3><p><br></p><p>方法一： 使用代理</p><ul><li>Shadowsocks，通过https协议拉取最新代码</li></ul><p>方法二： 将Github的代码仓库映射到国内的代码托管网站</p><ul><li>如gitee.com</li></ul><p><br></p><p><a href="https://substrate.dev/docs/zh-CN/" target="_blank" rel="noopener">文档参见</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2021/09/19/搭建substrate开发环境/-1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Substrate依赖&quot;&gt;&lt;a href=&quot;#安装Substrate依赖&quot;
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>使用Selenium获取网站信息</title>
    <link href="http://www.dashen.tech/2021/09/18/%E4%BD%BF%E7%94%A8Selenium%E8%8E%B7%E5%8F%96%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF/"/>
    <id>http://www.dashen.tech/2021/09/18/使用Selenium获取网站信息/</id>
    <published>2021-09-18T13:36:16.000Z</published>
    <updated>2021-09-19T10:13:17.624Z</updated>
    
    <content type="html"><![CDATA[<p>想要爬取<a href="https://www.mingyantong.com/" target="_blank" rel="noopener">这个网站</a>的内容，先使用了Chrome<a href="https://sspai.com/post/55496" target="_blank" rel="noopener">Web Scraper插件</a> 的Element Click功能<a href="https://sspai.com/post/56718" target="_blank" rel="noopener">来获取分页数据</a>,但发现几次请求后就出现错误。</p><p>使用Go实现了该功能，获取每一页html内容，而后通过字符串匹配得到想要的信息，但发现这个网站会封禁IP&amp;对内容加盐…</p><p>不想折腾IP代理池，而直接使用 WEB自动化工具 <em>Selenium</em>,早前就见到过测试同学有使用，正好借此契机，也体验一下。</p><p>Selenium对Firefox支持较好。</p><p>另需要安装所用系统对应的<a href="https://github.com/mozilla/geckodriver/releases" target="_blank" rel="noopener">geckodriver</a>来驱动Firefox。将解压后的二进制文件所在的位置加到系统路径下。</p><p><code>juzi.py</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># !/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">        url = <span class="string">"https://www.mingyantong.com/writer/%E5%BC%A0%E7%88%B1%E7%8E%B2?page=&#123;&#125;"</span>.format(i)</span><br><span class="line"></span><br><span class="line">        browser = webdriver.Firefox()</span><br><span class="line">        browser.get(url)</span><br><span class="line"></span><br><span class="line">        html = browser.page_source</span><br><span class="line">        html = etree.HTML(html, etree.HTMLParser())</span><br><span class="line">        juzi_list = html.xpath(<span class="string">'//div[@class="view-content"]//div'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> juzi <span class="keyword">in</span> juzi_list:</span><br><span class="line">            content = juzi.xpath(<span class="string">'./div/div/a[@class = "xlistju"]/text()'</span>)</span><br><span class="line"></span><br><span class="line">            author = juzi.xpath(<span class="string">'./div/div[@class="xqjulistwafo"]/a/text()'</span>)</span><br><span class="line"></span><br><span class="line">            book = juzi.xpath(<span class="string">'./div/div[@class="xqjulistwafo"]/span/a/text()'</span>)</span><br><span class="line"></span><br><span class="line">            all_content = &#123;</span><br><span class="line">                <span class="string">"content"</span>: content,</span><br><span class="line">                <span class="string">"author"</span>: author,</span><br><span class="line">                <span class="string">"book"</span>: book,</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (content == [] <span class="keyword">and</span> author == [] <span class="keyword">and</span> book == []):</span><br><span class="line">            <span class="comment">#print(content,author,book)</span></span><br><span class="line">            <span class="comment">#print(all_content)</span></span><br><span class="line">            <span class="keyword">if</span> len(book) == <span class="number">0</span> :</span><br><span class="line">                print(content[<span class="number">0</span>])</span><br><span class="line">                print()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(content[<span class="number">0</span>] + <span class="string">"---&lt;"</span> + book[<span class="number">0</span>] + <span class="string">"&gt;"</span>)</span><br><span class="line">                print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    get_content()</span><br></pre></td></tr></table></figure></p><p>调整页码，执行<code>python3 juzi.py &gt; result.txt</code>即可~</p><p><br></p><p><img src="/2021/09/18/使用Selenium获取网站信息/0.png" width="100%" height="100%"></p><p>注: 请求频率太快，也会被该网站的防爬策略识别并封禁。建议增加适当的time.Sleep</p><p><br></p><hr><p><br></p><p>若使用<code>browser = webdriver.Chrome()</code>，需安装Chrome的驱动，<br>方法如下：</p><p><a href="https://blog.csdn.net/weixin_44318830/article/details/103339273" target="_blank" rel="noopener">解决selenium.common.exceptions.WebDriverException: Message: ‘chromedriver‘</a></p><p><img src="/2021/09/18/使用Selenium获取网站信息/1.png" width="100%" height="100%"></p><p><img src="/2021/09/18/使用Selenium获取网站信息/2.png" width="100%" height="100%"></p><p><br></p><p>关于selenium，更多操作可参考</p><p><a href="https://www.cnblogs.com/saryli/p/5182811.html" target="_blank" rel="noopener">python selenium –browser 操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想要爬取&lt;a href=&quot;https://www.mingyantong.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个网站&lt;/a&gt;的内容，先使用了Chrome&lt;a href=&quot;https://sspai.com/post/55496&quot; ta
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.dashen.tech/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(13)</title>
    <link href="http://www.dashen.tech/2021/09/15/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-13/"/>
    <id>http://www.dashen.tech/2021/09/15/Rust-vs-Go-常用语法对比-13/</id>
    <published>2021-09-14T16:43:58.000Z</published>
    <updated>2021-09-21T02:56:59.903Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="241-Yield-priority-to-other-threads"><a href="#241-Yield-priority-to-other-threads" class="headerlink" title="241. Yield priority to other threads"></a>241. <font color="0c0a3e">Yield priority to other threads</font></h3><blockquote><p>Explicitly decrease the priority of the current process, so that other execution threads have a better chance to execute now. Then resume normal execution and call function <strong>busywork</strong>.</p></blockquote><p><em>将优先权让给其他线程</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"aaa"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"bbb"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"ccc"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"ddd"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"eee"</span>)</span><br><span class="line"></span><br><span class="line">runtime.Gosched()</span><br><span class="line">busywork()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">busywork</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>After Gosched, the execution of the current goroutine resumes automatically.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">eee</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br><span class="line">ddd</span><br><span class="line">main</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::std::thread::yield_now();</span><br><span class="line">busywork();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="242-Iterate-over-a-set"><a href="#242-Iterate-over-a-set" class="headerlink" title="242. Iterate over a set"></a>242. <font color="0c0a3e">Iterate over a set</font></h3><blockquote><p>Call a function f on each element e of a set x.</p></blockquote><p><em>迭代一个集合</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"C"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"D"</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e := <span class="keyword">range</span> x &#123;</span><br><span class="line">f(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(e T)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"contains element %v \n"</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contains element A </span><br><span class="line">contains element B </span><br><span class="line">contains element D</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = HashSet::new();</span><br><span class="line">    x.insert(<span class="string">"a"</span>);</span><br><span class="line">    x.insert(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> &amp;x &#123;</span><br><span class="line">        f(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(s: &amp;&amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Element &#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>x is a HashSet</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element a</span><br><span class="line">Element b</span><br></pre></td></tr></table></figure><p><br></p><h3 id="243-Print-list"><a href="#243-Print-list" class="headerlink" title="243. Print list"></a>243. <font color="0c0a3e">Print list</font></h3><blockquote><p>Print the contents of list a on the standard output.</p></blockquote><p><em>打印 list</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">First <span class="keyword">string</span></span><br><span class="line">Last  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">x := Person&#123;</span><br><span class="line">First: <span class="string">"Jane"</span>,</span><br><span class="line">Last:  <span class="string">"Doe"</span>,</span><br><span class="line">&#125;</span><br><span class="line">y := Person&#123;</span><br><span class="line">First: <span class="string">"John"</span>,</span><br><span class="line">Last:  <span class="string">"Doe"</span>,</span><br><span class="line">&#125;</span><br><span class="line">a := []Person&#123;x, y&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">x, y := <span class="number">11</span>, <span class="number">22</span></span><br><span class="line">a := []*<span class="keyword">int</span>&#123;&amp;x, &amp;y&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">11</span> <span class="number">22</span> <span class="number">33</span>]</span><br><span class="line">[aa bb]</span><br><span class="line">[&#123;Jane Doe&#125; &#123;John Doe&#125;]</span><br><span class="line">[<span class="number">0xc000018080</span> <span class="number">0xc000018088</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22, 33]</code></p><p><br></p><h3 id="244-Print-map"><a href="#244-Print-map" class="headerlink" title="244. Print map"></a>244. <font color="0c0a3e">Print map</font></h3><blockquote><p>Print the contents of map m to the standard output: keys and values.</p></blockquote><p><em>打印 map</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"eleven"</span>:     <span class="number">11</span>,</span><br><span class="line"><span class="string">"twenty-two"</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">x, y := <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"seven"</span>: &amp;x,</span><br><span class="line"><span class="string">"eight"</span>: &amp;y,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[eleven:<span class="number">11</span> twenty-two:<span class="number">22</span>]</span><br><span class="line"><span class="keyword">map</span>[eight:<span class="number">0xc000100040</span> seven:<span class="number">0xc000100028</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashMap::new();</span><br><span class="line">    m.insert(<span class="string">"Áron"</span>.to_string(), <span class="number">23</span>);</span><br><span class="line">    m.insert(<span class="string">"Béla"</span>.to_string(), <span class="number">35</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{&quot;Béla&quot;: 35, &quot;Áron&quot;: 23}</code></p><p><br></p><h3 id="245-Print-value-of-custom-type"><a href="#245-Print-value-of-custom-type" class="headerlink" title="245. Print value of custom type"></a>245. <font color="0c0a3e">Print value of custom type</font></h3><blockquote><p>Print the value of object x having custom type T, for log or debug.</p></blockquote><p><em>打印自定义类型的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// T represents a tank. It doesn't implement fmt.Stringer.</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">weight    <span class="keyword">int</span></span><br><span class="line">firePower <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person implement fmt.Stringer.</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName   <span class="keyword">string</span></span><br><span class="line">LastName    <span class="keyword">string</span></span><br><span class="line">YearOfBirth <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s, born %d"</span>, p.FirstName, p.LastName, p.YearOfBirth)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">x := T&#123;</span><br><span class="line">name:      <span class="string">"myTank"</span>,</span><br><span class="line">weight:    <span class="number">100</span>,</span><br><span class="line">firePower: <span class="number">90</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">x := Person&#123;</span><br><span class="line">FirstName:   <span class="string">"John"</span>,</span><br><span class="line">LastName:    <span class="string">"Doe"</span>,</span><br><span class="line">YearOfBirth: <span class="number">1958</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Will be more relevant if T implements fmt.Stringer</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;myTank <span class="number">100</span> <span class="number">90</span>&#125;</span><br><span class="line">John Doe, born <span class="number">1958</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T represents a tank</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span>&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">    name: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>,</span><br><span class="line">    weight: &amp;<span class="symbol">'a</span> <span class="built_in">i32</span>,</span><br><span class="line">    fire_power: &amp;<span class="symbol">'a</span> <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = T &#123;</span><br><span class="line">        name: <span class="string">"mytank"</span>,</span><br><span class="line">        weight: &amp;<span class="number">100</span>,</span><br><span class="line">        fire_power: &amp;<span class="number">90</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Implement fmt::Debug or fmt::Display for T</em></p><p><code>T { name: &quot;mytank&quot;, weight: 100, fire_power: 90 }</code></p><p><br></p><h3 id="246-Count-distinct-elements"><a href="#246-Count-distinct-elements" class="headerlink" title="246. Count distinct elements"></a>246. <font color="0c0a3e">Count distinct elements</font></h3><blockquote><p>Set c to the number of distinct elements in list items.</p></blockquote><p><em>计算不同的元素的数量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">items := []T&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"b"</span>, <span class="string">"aaa"</span>, <span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"d"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"items has"</span>, <span class="built_in">len</span>(items), <span class="string">"elements"</span>)</span><br><span class="line"></span><br><span class="line">distinct := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items &#123;</span><br><span class="line">distinct[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">c := <span class="built_in">len</span>(distinct)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"items has"</span>, c, <span class="string">"distinct elements"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items has <span class="number">7</span> elements</span><br><span class="line">items has <span class="number">5</span> distinct elements</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="string">"víz"</span>, <span class="string">"árvíz"</span>, <span class="string">"víz"</span>, <span class="string">"víz"</span>, <span class="string">"ár"</span>, <span class="string">"árvíz"</span>];</span><br><span class="line">    <span class="keyword">let</span> c = items.iter().unique().count();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3</code></p><p><br></p><h3 id="247-Filter-list-in-place"><a href="#247-Filter-list-in-place" class="headerlink" title="247. Filter list in-place"></a>247. <font color="0c0a3e">Filter list in-place</font></h3><blockquote></blockquote><p>Remove all the elements from list x that don’t satisfy the predicate p, without allocating a new list.<br>Keep all the elements that do satisfy p.<br>For languages that don’t have mutable lists, refer to idiom #57 instead.</p><p><em>就地筛选列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">x[j] = x[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2 4 6 8 10]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x []*T</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125; &#123;</span><br><span class="line">t := <span class="built_in">new</span>(T)</span><br><span class="line">*t = v</span><br><span class="line">x = <span class="built_in">append</span>(x, t)</span><br><span class="line">&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t *T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> *t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">x[j] = x[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k := j; k &lt; <span class="built_in">len</span>(x); k++ &#123;</span><br><span class="line">x[k] = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, pt := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Print(*pt, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2 4 6 8 10</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">p</span></span>(t: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    t % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..x.len() &#123;</span><br><span class="line">        <span class="keyword">if</span> p(x[i]) &#123;</span><br><span class="line">            x[j] = x[i];</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    x.truncate(j);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2, 4, 6, 8, 10]</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">p</span></span>(t: &amp;<span class="built_in">i64</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    t % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    x.retain(p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2, 4, 6, 8, 10]</code></p><p><br></p><h3 id="249-Declare-and-assign-multiple-variables"><a href="#249-Declare-and-assign-multiple-variables" class="headerlink" title="249. Declare and assign multiple variables"></a>249. <font color="0c0a3e">Declare and assign multiple variables</font></h3><blockquote><p>Define variables a, b and c in a concise way.<br>Explain if they need to have the same type.</p></blockquote><p><em>声明并分配多个变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// a, b and c don't need to have the same type.</span></span><br><span class="line"></span><br><span class="line">a, b, c := <span class="number">42</span>, <span class="string">"hello"</span>, <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">fmt.Printf(<span class="string">"%T %T %T \n"</span>, a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span> hello <span class="number">5</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">string</span> <span class="keyword">float64</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// a, b and c don't need to have the same type.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (a, b, c) = (<span class="number">42</span>, <span class="string">"hello"</span>, <span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; &#123;&#125; &#123;&#125;"</span>, a, b, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42 hello 5</code></p><p><br></p><h3 id="251-Parse-binary-digits"><a href="#251-Parse-binary-digits" class="headerlink" title="251. Parse binary digits"></a>251. <font color="0c0a3e">Parse binary digits</font></h3><blockquote><p>Extract integer value i from its binary string representation s (in radix 2)<br>E.g. “1101” -&gt; 13</p></blockquote><p><em>解析二进制数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"1101"</span></span><br><span class="line">fmt.Println(<span class="string">"s is"</span>, reflect.TypeOf(s), s)</span><br><span class="line"></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i is"</span>, reflect.TypeOf(i), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s is <span class="keyword">string</span> <span class="number">1101</span></span><br><span class="line">i is <span class="keyword">int64</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"1101"</span>; <span class="comment">// binary digits</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="built_in">i32</span>::from_str_radix(s, <span class="number">2</span>).expect(<span class="string">"Not a binary number!"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>13</code></p><p><br></p><h3 id="252-Conditional-assignment"><a href="#252-Conditional-assignment" class="headerlink" title="252. Conditional assignment"></a>252. <font color="0c0a3e">Conditional assignment</font></h3><blockquote><p>Assign to variable x the value “a” if calling the function condition returns true, or the value “b” otherwise.</p></blockquote><p><em>条件赋值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> condition() &#123;</span><br><span class="line">x = <span class="string">"a"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = <span class="string">"b"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">condition</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Scorates"</span> == <span class="string">"dog"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>b</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">if</span> condition() &#123; <span class="string">"a"</span> &#125; <span class="keyword">else</span> &#123; <span class="string">"b"</span> &#125;;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="258-Convert-list-of-strings-to-list-of-integers"><a href="#258-Convert-list-of-strings-to-list-of-integers" class="headerlink" title="258. Convert list of strings to list of integers"></a>258. <font color="0c0a3e">Convert list of strings to list of integers</font></h3><blockquote><p>Convert the string values from list a into a list of integers b.</p></blockquote><p><em>将字符串列表转换为整数列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"11"</span>, <span class="string">"22"</span>, <span class="string">"33"</span>&#125;</span><br><span class="line"></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">for</span> i, s := <span class="keyword">range</span> a &#123;</span><br><span class="line">b[i], err = strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11 22 33]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="built_in">vec!</span>[<span class="string">"11"</span>, <span class="string">"-22"</span>, <span class="string">"33"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = a.iter().map(|x| x.parse::&lt;<span class="built_in">i64</span>&gt;().unwrap()).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, -22, 33]</code></p><p><br></p><h3 id="259-Split-on-several-separators"><a href="#259-Split-on-several-separators" class="headerlink" title="259. Split on several separators"></a>259. <font color="0c0a3e">Split on several separators</font></h3><blockquote><p>Build list parts consisting of substrings of input string s, separated by any of the characters ‘,’ (comma), ‘-‘ (dash), ‘_’ (underscore).</p></blockquote><p><em>在几个分隔符上拆分</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"2021-03-11,linux_amd64"</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[,\\-_]"</span>)</span><br><span class="line">parts := re.Split(s, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, parts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;2021&quot; &quot;03&quot; &quot;11&quot; &quot;linux&quot; &quot;amd64&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"2021-03-11,linux_amd64"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> parts: <span class="built_in">Vec</span>&lt;_&gt; = s.split(&amp;[<span class="string">','</span>, <span class="string">'-'</span>, <span class="string">'_'</span>][..]).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, parts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;2021&quot;, &quot;03&quot;, &quot;11&quot;, &quot;linux&quot;, &quot;amd64&quot;]</code></p><p><br></p><h3 id="266-Repeating-string"><a href="#266-Repeating-string" class="headerlink" title="266. Repeating string"></a>266. <font color="0c0a3e">Repeating string</font></h3><blockquote><p>Assign to string s the value of string v, repeated n times and write it out.<br>E.g. v=”abc”, n=5 ⇒ s=”abcabcabcabcabc”</p></blockquote><p><em>重复字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := <span class="string">"abc"</span></span><br><span class="line">n := <span class="number">5</span></span><br><span class="line"></span><br><span class="line">s := strings.Repeat(v, n)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>abcabcabcabcabc</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = v.repeat(n);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>abcabcabcabcabc</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;241-Yield-priority-to-other-threads&quot;&gt;&lt;a href=&quot;#241-Yield-priority-to-other-threads&quot; class=&quot;headerlink&quot; title=&quot;241. Yield
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(12)</title>
    <link href="http://www.dashen.tech/2021/09/13/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-12/"/>
    <id>http://www.dashen.tech/2021/09/13/Rust-vs-Go-常用语法对比-12/</id>
    <published>2021-09-13T14:43:58.000Z</published>
    <updated>2021-09-21T02:56:54.270Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="221-Remove-all-non-digits-characters"><a href="#221-Remove-all-non-digits-characters" class="headerlink" title="221. Remove all non-digits characters"></a>221. <font color="0c0a3e">Remove all non-digits characters</font></h3><blockquote><p>Create string t from string s, keeping only digit characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.</p></blockquote><p><em>删除所有非数字字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`height="168px"`</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[^\\d]"</span>)</span><br><span class="line">t := re.ReplaceAllLiteralString(s, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>168</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: <span class="built_in">String</span> = <span class="string">"Today is the 14th of July"</span></span><br><span class="line">        .chars()</span><br><span class="line">        .filter(|c| c.is_digit(<span class="number">10</span>))</span><br><span class="line">        .collect();</span><br><span class="line"></span><br><span class="line">    dbg!(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[src/main.rs:7] t = &quot;14&quot;</code></p><p><br></p><h3 id="222-Find-first-index-of-an-element-in-list"><a href="#222-Find-first-index-of-an-element-in-list" class="headerlink" title="222. Find first index of an element in list"></a>222. <font color="0c0a3e">Find first index of an element in list</font></h3><blockquote><p>Set i to the first index in list items at which the element x can be found, or -1 if items does not contain x.</p></blockquote><p><em>在列表中查找元素的第一个索引</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"huey"</span>, <span class="string">"dewey"</span>, <span class="string">"louie"</span>&#125;</span><br><span class="line">x := <span class="string">"dewey"</span></span><br><span class="line"></span><br><span class="line">i := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> j, e := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> e == x &#123;</span><br><span class="line">i = j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Found %q at position %d in %q"</span>, x, i, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Found &quot;dewey&quot; at position 1 in [&quot;huey&quot; &quot;dewey&quot; &quot;louie&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">'A'</span>, '🎂', <span class="string">'㍗'</span>];</span><br><span class="line">    <span class="keyword">let</span> x = '💩';</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> items.iter().position(|y| *y == x) &#123;</span><br><span class="line">        <span class="literal">Some</span>(i) =&gt; <span class="built_in">println!</span>(<span class="string">"Found &#123;&#125; at position &#123;&#125;."</span>, x, i),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"There is no &#123;&#125; in the list."</span>, x),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>There is no 💩 in the list.</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="number">42</span>, -<span class="number">3</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = items.iter().position(|y| *y == x).map_or(-<span class="number">1</span>, |n| n <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; =&gt; &#123;&#125;"</span>, x, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = items.iter().position(|y| *y == x).map_or(-<span class="number">1</span>, |n| n <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; =&gt; &#123;&#125;"</span>, x, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> =&gt; <span class="number">2</span></span><br><span class="line"><span class="number">13</span> =&gt; -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="223-for-else-loop"><a href="#223-for-else-loop" class="headerlink" title="223. for else loop"></a>223. <font color="0c0a3e">for else loop</font></h3><blockquote><p>Loop through list items checking a condition. Do something else if no matches are found.<br>A typical use case is looping through a series of containers looking for one that matches a condition. If found, an item is inserted; otherwise, a new container is created.<br>These are mostly used as an inner nested loop, and in a location where refactoring inner logic into a separate function reduces clarity.</p></blockquote><p><em>for else循环</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> item == <span class="string">"baz"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"found it"</span>)</span><br><span class="line"><span class="keyword">goto</span> forelse</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">fmt.Println(<span class="string">"never found it"</span>)</span><br><span class="line">&#125;</span><br><span class="line">        forelse:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>found it</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items &#123;</span><br><span class="line">        <span class="keyword">if</span> item == &amp;<span class="string">"baz"</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"found it"</span>);</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"never found it"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>found it</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">     <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">None</span> = items.iter().find(|&amp;&amp;item| item == <span class="string">"rockstar programmer"</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"NotFound"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NotFound</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    items</span><br><span class="line">        .iter()</span><br><span class="line">        .find(|&amp;&amp;item| item == <span class="string">"rockstar programmer"</span>)</span><br><span class="line">        .or_else(|| &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"NotFound"</span>);</span><br><span class="line">            <span class="literal">Some</span>(&amp;<span class="string">"rockstar programmer"</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NotFound</code></p><p><br></p><h3 id="224-Add-element-to-the-beginning-of-the-list"><a href="#224-Add-element-to-the-beginning-of-the-list" class="headerlink" title="224. Add element to the beginning of the list"></a>224. <font color="0c0a3e">Add element to the beginning of the list</font></h3><blockquote><p>Insert element x at the beginning of list items.</p></blockquote><p><em>将元素添加到列表的开头</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="number">42</span>, <span class="number">1337</span>&#125;</span><br><span class="line"><span class="keyword">var</span> x T = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">append</span>([]T&#123;x&#125;, items...)</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[7 42 1337]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="number">42</span>, <span class="number">1337</span>&#125;</span><br><span class="line"><span class="keyword">var</span> x T = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">append</span>(items, x)</span><br><span class="line"><span class="built_in">copy</span>(items[<span class="number">1</span>:], items)</span><br><span class="line">items[<span class="number">0</span>] = x</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[7 42 1337]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::VecDeque;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = VecDeque::new();</span><br><span class="line">    items.push_back(<span class="number">22</span>);</span><br><span class="line">    items.push_back(<span class="number">33</span>);</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    items.push_front(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22, 33]</code></p><p><br></p><h3 id="225-Declare-and-use-an-optional-argument"><a href="#225-Declare-and-use-an-optional-argument" class="headerlink" title="225. Declare and use an optional argument"></a>225. <font color="0c0a3e">Declare and use an optional argument</font></h3><blockquote><p>Declare an optional integer argument x to procedure f, printing out “Present” and its value if it is present, “Not present” otherwise</p></blockquote><p><em>声明并使用可选参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Present"</span>, x[<span class="number">0</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Not present"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">f(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Go does not have optional arguments, but to some extend, they can be mimicked with a variadic parameter.<br>x is a variadic parameter, which must be the last parameter for the function f.<br>Strictly speaking, x is a list of integers, which might have more than one element. These additional elements are ignored.</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not present</span><br><span class="line">Present <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(x: <span class="built_in">Option</span>&lt;()&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"Present &#123;&#125;"</span>, x),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"Not present"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="226-Delete-last-element-from-list"><a href="#226-Delete-last-element-from-list" class="headerlink" title="226. Delete last element from list"></a>226. <font color="0c0a3e">Delete last element from list</font></h3><blockquote><p>Remove the last element from list items.</p></blockquote><p><em>从列表中删除最后一个元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"kiwi"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">items = items[:<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[banana apple kiwi]</span><br><span class="line">[banana apple]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    items.pop();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22]</code></p><p><br></p><h3 id="227-Copy-list"><a href="#227-Copy-list" class="headerlink" title="227. Copy list"></a>227. <font color="0c0a3e">Copy list</font></h3><blockquote><p>Create new list y containing the same elements as list x.<br>Subsequent modifications of y must not affect x (except for the contents referenced by the elements themselves if they contain pointers).</p></blockquote><p><em>复制列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">x := []T&#123;<span class="string">"Never"</span>, <span class="string">"gonna"</span>, <span class="string">"shower"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="built_in">copy</span>(y, x)</span><br><span class="line"></span><br><span class="line">y[<span class="number">2</span>] = <span class="string">"give"</span></span><br><span class="line">y = <span class="built_in">append</span>(y, <span class="string">"you"</span>, <span class="string">"up"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Never gonna shower]</span><br><span class="line">[Never gonna give you up]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = x.clone();</span><br><span class="line"></span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is &#123;:?&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"y is &#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x is [<span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">y is [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="228-Copy-a-file"><a href="#228-Copy-a-file" class="headerlink" title="228. Copy a file"></a>228. <font color="0c0a3e">Copy a file</font></h3><blockquote><p>Copy the file at path src to dst.</p></blockquote><p><em>复制文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">stat, err := os.Stat(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ioutil.WriteFile(dst, data, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rw-r--r--</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">stat, err := os.Stat(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(dst, data, stat.Mode())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os.Chmod(dst, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chmod(<span class="string">"/tmp/file1"</span>, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rwxrwxrwx</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">f, err := os.Open(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">stat, err := f.Stat()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">g, err := os.OpenFile(dst, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, stat.Mode())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> g.Close()</span><br><span class="line">_, err = io.Copy(g, f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os.Chmod(dst, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chmod(<span class="string">"/tmp/file1"</span>, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rwxrwxrwx</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> src = <span class="string">"/etc/fstabZ"</span>;</span><br><span class="line">    <span class="keyword">let</span> dst = <span class="string">"fstab.bck"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r = fs::copy(src, dst);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Ok</span>(v) =&gt; <span class="built_in">println!</span>(<span class="string">"Copied &#123;:?&#125; bytes"</span>, v),</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error copying &#123;:?&#125; to &#123;:?&#125;: &#123;:?&#125;"</span>, src, dst, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>error copying &quot;/etc/fstabZ&quot; to &quot;fstab.bck&quot;: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }</code></p><p><br></p><h3 id="231-Test-if-bytes-are-a-valid-UTF-8-string"><a href="#231-Test-if-bytes-are-a-valid-UTF-8-string" class="headerlink" title="231. Test if bytes are a valid UTF-8 string"></a>231. <font color="0c0a3e">Test if bytes are a valid UTF-8 string</font></h3><blockquote><pre><code>Set b to true if the byte sequence s consists entirely of valid UTF-8 character code points, false otherwise.</code></pre></blockquote><p><em>测试字节是否是有效的UTF-8字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">s := []<span class="keyword">byte</span>(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">b := utf8.Valid(s)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">s := []<span class="keyword">byte</span>&#123;<span class="number">0xff</span>, <span class="number">0xfe</span>, <span class="number">0xfd</span>&#125;</span><br><span class="line">b := utf8.Valid(s)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> bytes = [<span class="number">0xc3</span>, <span class="number">0x81</span>, <span class="number">0x72</span>, <span class="number">0x76</span>, <span class="number">0xc3</span>, <span class="number">0xad</span>, <span class="number">0x7a</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> b = std::<span class="built_in">str</span>::from_utf8(&amp;bytes).is_ok();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> bytes = [<span class="number">0xc3</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x76</span>, <span class="number">0xc3</span>, <span class="number">0xad</span>, <span class="number">0x7a</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> b = std::<span class="built_in">str</span>::from_utf8(&amp;bytes).is_ok();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="234-Encode-bytes-to-base64"><a href="#234-Encode-bytes-to-base64" class="headerlink" title="234. Encode bytes to base64"></a>234. <font color="0c0a3e">Encode bytes to base64</font></h3><blockquote><p>Assign to string s the standard base64 encoding of the byte array data, as specified by RFC 4648.</p></blockquote><p><em>将字节编码为base64</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/base64"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello world"</span>)</span><br><span class="line">s := base64.StdEncoding.EncodeToString(data)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SGVsbG8gd29ybGQ=</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use base64;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"Hello, World!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b64txt = base64::encode(d);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b64txt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SGVsbG8sIFdvcmxkIQ==</code></p><p><br></p><h3 id="235-Decode-base64"><a href="#235-Decode-base64" class="headerlink" title="235. Decode base64"></a>235. <font color="0c0a3e">Decode base64</font></h3><blockquote><p>Assign to byte array data the bytes represented by the base64 string s, as specified by RFC 4648.</p></blockquote><p><em>解码base64</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/base64"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"SGVsbG8gd29ybGQ="</span></span><br><span class="line"></span><br><span class="line">data, err := base64.StdEncoding.DecodeString(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;Hello world&quot;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use base64;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"SGVsbG8sIFdvcmxkIQ=="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = base64::decode(d).unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hex: &#123;:x?&#125;"</span>, bytes);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Txt: &#123;&#125;"</span>, std::<span class="built_in">str</span>::from_utf8(&amp;bytes).unwrap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hex: [<span class="number">48</span>, <span class="number">65</span>, <span class="number">6</span>c, <span class="number">6</span>c, <span class="number">6</span>f, <span class="number">2</span>c, <span class="number">20</span>, <span class="number">57</span>, <span class="number">6</span>f, <span class="number">72</span>, <span class="number">6</span>c, <span class="number">64</span>, <span class="number">21</span>]</span><br><span class="line">Txt: Hello, World!</span><br></pre></td></tr></table></figure><p><br></p><h3 id="237-Xor-integers"><a href="#237-Xor-integers" class="headerlink" title="237. Xor integers"></a>237. <font color="0c0a3e">Xor integers</font></h3><blockquote><p>Assign to c the result of (a xor b)</p></blockquote><p><strong>异或运算</strong></p><p><em>异或整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">230</span>, <span class="number">42</span></span><br><span class="line">c := a ^ b</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %12b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %12b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %12b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is     <span class="number">11100110</span></span><br><span class="line">b is       <span class="number">101010</span></span><br><span class="line">c is     <span class="number">11001100</span></span><br><span class="line">c == <span class="number">204</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := big.NewInt(<span class="number">230</span>), big.NewInt(<span class="number">42</span>)</span><br><span class="line">c := <span class="built_in">new</span>(big.Int)</span><br><span class="line">c.Xor(a, b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %12b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %12b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %12b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is     <span class="number">11100110</span></span><br><span class="line">b is       <span class="number">101010</span></span><br><span class="line">c is     <span class="number">11001100</span></span><br><span class="line">c == <span class="number">204</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">230</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">let</span> c = a ^ b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>204</code></p><p><br></p><h3 id="238-Xor-byte-arrays"><a href="#238-Xor-byte-arrays" class="headerlink" title="238. Xor byte arrays"></a>238. <font color="0c0a3e">Xor byte arrays</font></h3><blockquote><p>Write in a new byte array c the xor result of byte arrays a and b.<br>a and b have the same size.</p></blockquote><p><em>异或字节数组</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>), []<span class="keyword">byte</span>(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">c[i] = a[i] ^ b[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %08b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %08b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %08b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"c as string would be %q\n"</span>, <span class="keyword">string</span>(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a is [<span class="number">01001000</span> <span class="number">01100101</span> <span class="number">01101100</span> <span class="number">01101100</span> <span class="number">01101111</span>]</span><br><span class="line">b is [<span class="number">01110111</span> <span class="number">01101111</span> <span class="number">01110010</span> <span class="number">01101100</span> <span class="number">01100100</span>]</span><br><span class="line">c is [<span class="number">00111111</span> <span class="number">00001010</span> <span class="number">00011110</span> <span class="number">00000000</span> <span class="number">00001011</span>]</span><br><span class="line">c == [<span class="number">63</span> <span class="number">10</span> <span class="number">30</span> <span class="number">0</span> <span class="number">11</span>]</span><br><span class="line">c as <span class="keyword">string</span> would be <span class="string">"?\n\x1e\x00\v"</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T [<span class="number">5</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b T</span><br><span class="line"><span class="built_in">copy</span>(a[:], <span class="string">"Hello"</span>)</span><br><span class="line"><span class="built_in">copy</span>(b[:], <span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c T</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">c[i] = a[i] ^ b[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %08b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %08b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %08b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"c as string would be %q\n"</span>, <span class="keyword">string</span>(c[:]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a is [<span class="number">01001000</span> <span class="number">01100101</span> <span class="number">01101100</span> <span class="number">01101100</span> <span class="number">01101111</span>]</span><br><span class="line">b is [<span class="number">01110111</span> <span class="number">01101111</span> <span class="number">01110010</span> <span class="number">01101100</span> <span class="number">01100100</span>]</span><br><span class="line">c is [<span class="number">00111111</span> <span class="number">00001010</span> <span class="number">00011110</span> <span class="number">00000000</span> <span class="number">00001011</span>]</span><br><span class="line">c == [<span class="number">63</span> <span class="number">10</span> <span class="number">30</span> <span class="number">0</span> <span class="number">11</span>]</span><br><span class="line">c as <span class="keyword">string</span> would be <span class="string">"?\n\x1e\x00\v"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: &amp;[<span class="built_in">u8</span>] = <span class="string">"Hello"</span>.as_bytes();</span><br><span class="line">    <span class="keyword">let</span> b: &amp;[<span class="built_in">u8</span>] = <span class="string">"world"</span>.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> c: <span class="built_in">Vec</span>&lt;_&gt; = a.iter().zip(b).map(|(x, y)| x ^ y).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[63, 10, 30, 0, 11]</code></p><p><br></p><h3 id="239-Find-first-regular-expression-match"><a href="#239-Find-first-regular-expression-match" class="headerlink" title="239. Find first regular expression match"></a>239. <font color="0c0a3e">Find first regular expression match</font></h3><blockquote><p>Assign to string x the first word of string s consisting of exactly 3 digits, or the empty string if no such match exists.<br>A word containing more digits, or 3 digits as a substring fragment, must not match.</p></blockquote><p><em>查找第一个正则表达式匹配项</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">re := regexp.MustCompile(<span class="string">`\b\d\d\d\b`</span>)</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"12"</span>,</span><br><span class="line"><span class="string">"123"</span>,</span><br><span class="line"><span class="string">"1234"</span>,</span><br><span class="line"><span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span>,</span><br><span class="line"><span class="string">"See p.456, for word boundaries"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">x := re.FindString(s)</span><br><span class="line">fmt.Printf(<span class="string">"%q -&gt; %q\n"</span>, s, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"12"</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"123"</span> -&gt; <span class="string">"123"</span></span><br><span class="line"><span class="string">"1234"</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span> -&gt; <span class="string">"224"</span></span><br><span class="line"><span class="string">"See p.456, for word boundaries"</span> -&gt; <span class="string">"456"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sentences = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"12"</span>,</span><br><span class="line">        <span class="string">"123"</span>,</span><br><span class="line">        <span class="string">"1234"</span>,</span><br><span class="line">        <span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span>,</span><br><span class="line">        <span class="string">"See p.456, for word boundaries"</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> sentences &#123;</span><br><span class="line">        <span class="keyword">let</span> re = Regex::new(<span class="string">r"\b\d\d\d\b"</span>).expect(<span class="string">"failed to compile regex"</span>);</span><br><span class="line">        <span class="keyword">let</span> x = re.find(s).map(|x| x.as_str()).unwrap_or(<span class="string">""</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"[&#123;&#125;] -&gt; [&#123;&#125;]"</span>, &amp;s, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] -&gt; []</span><br><span class="line">[<span class="number">12</span>] -&gt; []</span><br><span class="line">[<span class="number">123</span>] -&gt; [<span class="number">123</span>]</span><br><span class="line">[<span class="number">1234</span>] -&gt; []</span><br><span class="line">[I have <span class="number">12</span> goats, <span class="number">3988</span> otters, <span class="number">224</span> shrimps and <span class="number">456</span> giraffes] -&gt; [<span class="number">224</span>]</span><br><span class="line">[See p.<span class="number">456</span>, <span class="keyword">for</span> word boundaries] -&gt; [<span class="number">456</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="240-Sort-2-lists-together"><a href="#240-Sort-2-lists-together" class="headerlink" title="240. Sort 2 lists together"></a>240. <font color="0c0a3e">Sort 2 lists together</font></h3><blockquote><p>Lists a and b have the same length. Apply the same permutation to a and b to have them sorted based on the values of a.</p></blockquote><p><em>将两个列表排序在一起.列表a和b的长度相同。对a和b应用相同的排列，根据a的值对它们进行排序。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> K <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sorter <span class="keyword">struct</span> &#123;</span><br><span class="line">k []K</span><br><span class="line">t []T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s.k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// Swap affects 2 slices at once.</span></span><br><span class="line">s.k[i], s.k[j] = s.k[j], s.k[i]</span><br><span class="line">s.t[i], s.t[j] = s.t[j], s.t[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.k[i] &lt; s.k[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []K&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"nine"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"eight"</span>&#125;</span><br><span class="line"></span><br><span class="line">sort.Sort(&amp;sorter&#123;</span><br><span class="line">k: a,</span><br><span class="line">t: b,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[three four eight nine]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">Vec</span>&lt;_&gt; = a.iter().zip(b).collect();</span><br><span class="line">    tmp.as_mut_slice().sort_by_key(|(&amp;x, _y)| x);</span><br><span class="line">    <span class="keyword">let</span> (aa, bb): (<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) = tmp.into_iter().unzip();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;, &#123;:?&#125;"</span>, aa, bb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[10, 20, 30, 40], [104, 102, 101, 103]</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;221-Remove-all-non-digits-characters&quot;&gt;&lt;a href=&quot;#221-Remove-all-non-digits-characters&quot; class=&quot;headerlink&quot; title=&quot;221. Rem
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(11)</title>
    <link href="http://www.dashen.tech/2021/09/12/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-11/"/>
    <id>http://www.dashen.tech/2021/09/12/Rust-vs-Go-常用语法对比-11/</id>
    <published>2021-09-12T14:43:58.000Z</published>
    <updated>2021-09-21T02:56:54.269Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="202-Sum-of-squares"><a href="#202-Sum-of-squares" class="headerlink" title="202. Sum of squares"></a>202. <font color="0c0a3e">Sum of squares</font></h3><blockquote><p>Calculate the sum of squares s of data, an array of floating point values.</p></blockquote><p><em>计算平方和</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">float64</span>&#123;<span class="number">0.06</span>, <span class="number">0.82</span>, <span class="number">-0.01</span>, <span class="number">-0.34</span>, <span class="number">-0.55</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> data &#123;</span><br><span class="line">s += math.Pow(d, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>+1.094200e+000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="built_in">Vec</span>&lt;<span class="built_in">f32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">2.0</span>, <span class="number">3.5</span>, <span class="number">4.0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = data.iter().map(|x| x.powi(<span class="number">2</span>)).sum::&lt;<span class="built_in">f32</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>32.25</code></p><p><br></p><h3 id="205-Get-an-environment-variable"><a href="#205-Get-an-environment-variable" class="headerlink" title="205. Get an environment variable"></a>205. <font color="0c0a3e">Get an environment variable</font></h3><blockquote><p>Read an environment variable with the name “FOO” and assign it to the string variable foo. If it does not exist or if the system does not support environment variables, assign a value of “none”.</p></blockquote><p><em>获取环境变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo, ok := os.LookupEnv(<span class="string">"FOO"</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">foo = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>none</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo := os.Getenv(<span class="string">"FOO"</span>)</span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">""</span> &#123;</span><br><span class="line">foo = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>none</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo;</span><br><span class="line">    <span class="keyword">match</span> env::var(<span class="string">"FOO"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; foo = val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; foo = <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> user;</span><br><span class="line">    <span class="keyword">match</span> env::var(<span class="string">"USER"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; user = val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; user = <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = env::var(<span class="string">"FOO"</span>).unwrap_or(<span class="string">"none"</span>.to_string());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> user = env::var(<span class="string">"USER"</span>).unwrap_or(<span class="string">"none"</span>.to_string());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="keyword">match</span> env::var(<span class="string">"FOO"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">match</span> env::var(<span class="string">"USER"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(tnt_root) = env::var(<span class="string">"TNT_ROOT"</span>) &#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="206-Switch-statement-with-strings"><a href="#206-Switch-statement-with-strings" class="headerlink" title="206. Switch statement with strings"></a>206. <font color="0c0a3e">Switch statement with strings</font></h3><blockquote><p>Execute different procedures foo, bar, baz and barfl if the string str contains the name of the respective procedure. Do it in a way natural to the language.</p></blockquote><p><em>switch语句</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> str &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"foo"</span>:</span><br><span class="line">foo()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"bar"</span>:</span><br><span class="line">bar()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"baz"</span>:</span><br><span class="line">baz()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"barfl"</span>:</span><br><span class="line">barfl()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called foo"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called bar"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">baz</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called baz"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">barfl</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called barfl"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Called baz</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">baz</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">barfl</span></span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> str_ = <span class="string">"x"</span>;</span><br><span class="line">    <span class="keyword">match</span> str_ &#123;</span><br><span class="line">        <span class="string">"foo"</span> =&gt; foo(),</span><br><span class="line">        <span class="string">"bar"</span> =&gt; bar(),</span><br><span class="line">        <span class="string">"baz"</span> =&gt; baz(),</span><br><span class="line">        <span class="string">"barfl"</span> =&gt; barfl(),</span><br><span class="line">        _ =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="207-Allocate-a-list-that-is-automatically-deallocated"><a href="#207-Allocate-a-list-that-is-automatically-deallocated" class="headerlink" title="207. Allocate a list that is automatically deallocated"></a>207. <font color="0c0a3e">Allocate a list that is automatically deallocated</font></h3><blockquote><p>Allocate a list a containing n elements (n assumed to be too large for a stack) that is automatically deallocated when the program exits the scope it is declared in.</p></blockquote><p><em>分配一个自动解除分配的列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">10</span>_000_000</span><br><span class="line">a := <span class="built_in">make</span>([]T, n)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Elements have type T.<br>a is garbage-collected after the program exits its scope, unless we let it “escape” by taking its reference.<br>The runtime decides if a lives in the stack on in the heap.</em></p><p><code>10000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">0</span>; n];</span><br></pre></td></tr></table></figure><p><code>Heap allocations are deallocated when the variable goes out of scope.</code></p><p><br></p><h3 id="208-Formula-with-arrays"><a href="#208-Formula-with-arrays" class="headerlink" title="208. Formula with arrays"></a>208. <font color="0c0a3e">Formula with arrays</font></h3><blockquote><p>Given the arrays a,b,c,d of equal length and the scalar e, calculate a = e<em>(a+b</em>c+cos(d)).<br>Store the results in a.</p></blockquote><p><em>对数组元素进行运算</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyFormula</span><span class="params">(a, b, c, d []<span class="keyword">float64</span>, e <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">a[i] = e * (v + b[i] + c[i] + math.Cos(d[i]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">float64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := []<span class="keyword">float64</span>&#123;<span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>&#125;</span><br><span class="line">c := []<span class="keyword">float64</span>&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">d := []<span class="keyword">float64</span>&#123;<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;</span><br><span class="line">e := <span class="number">42.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a is    "</span>, a)</span><br><span class="line">applyFormula(a, b, c, d, e)</span><br><span class="line">fmt.Println(<span class="string">"a is now"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a is     [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">a is now [<span class="number">689.1127648209083</span> <span class="number">786.9429631647291</span> <span class="number">879.4931076599294</span> <span class="number">1001.3783018264178</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">5</span>., <span class="number">2</span>., <span class="number">8</span>., <span class="number">9</span>., <span class="number">0.5</span>]; <span class="comment">// we want it to be mutable</span></span><br><span class="line">    <span class="keyword">let</span> b: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">7</span>., <span class="number">9</span>., <span class="number">8</span>., <span class="number">0.965</span>, <span class="number">0.98</span>]; </span><br><span class="line">    <span class="keyword">let</span> c: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">0</span>., <span class="number">0.8</span>, <span class="number">789456</span>., <span class="number">123456</span>., <span class="number">0.0003</span>]; </span><br><span class="line">    <span class="keyword">let</span> d: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">332</span>., <span class="number">0.1</span>, <span class="number">8</span>., <span class="number">9874</span>., <span class="number">0.3</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> e: <span class="built_in">f32</span> = <span class="number">85</span>.;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..a.len() &#123;</span><br><span class="line">        a[i] = e * (a[i] + b[i] * c[i] + d[i].cos());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a); <span class="comment">//Don't have any idea about the output</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[470.29297, 866.57544, 536830750.0, 10127158.0, 123.7286]</code></p><p><br></p><h3 id="209-Type-with-automatic-deep-deallocation"><a href="#209-Type-with-automatic-deep-deallocation" class="headerlink" title="209. Type with automatic deep deallocation"></a>209. <font color="0c0a3e">Type with automatic deep deallocation</font></h3><blockquote><p>Declare a type t which contains a string s and an integer array n with variable size, and allocate a variable v of type t. Allocate v.s and v.n and set them to the values “Hello, world!” for s and [1,4,9,16,25], respectively. Deallocate v, automatically deallocating v.s and v.n (no memory leaks).</p></blockquote><p><em>自动深度解除分配的类型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> t <span class="keyword">struct</span> &#123;</span><br><span class="line">s <span class="keyword">string</span></span><br><span class="line">n []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v := t&#123;</span><br><span class="line">s: <span class="string">"Hello, world!"</span>,</span><br><span class="line">n: []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pretend to use v (otherwise this is a compile error)</span></span><br><span class="line">_ = v</span><br><span class="line"></span><br><span class="line"><span class="comment">// When f exits, v and all its fields are garbage-collected, recursively</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>After v goes out of scope, v and all its fields will be garbage-collected, recursively</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span> &#123;</span><br><span class="line">s: <span class="built_in">String</span>,</span><br><span class="line">n: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> v = T &#123;</span><br><span class="line">s: <span class="string">"Hello, world!"</span>.into(),</span><br><span class="line">n: <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>When a variable goes out of scope, all member variables are deallocated recursively.</em> </p><p><br></p><h3 id="211-Create-folder"><a href="#211-Create-folder" class="headerlink" title="211. Create folder"></a>211. <font color="0c0a3e">Create folder</font></h3><blockquote><p>Create the folder at path on the filesystem</p></blockquote><p><em>创建文件夹</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo"</span></span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 := os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, info.IsDir())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo exists: <span class="literal">false</span></span><br><span class="line">foo exists: <span class="literal">true</span></span><br><span class="line">foo is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo/bar"</span></span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Could not create"</span>, path, <span class="string">"with os.Mkdir"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 := os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.MkdirAll(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Could not create"</span>, path, <span class="string">"with os.MkdirAll"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 = os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, info.IsDir())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo/bar exists: <span class="literal">false</span></span><br><span class="line">Could not create foo/bar with os.Mkdir</span><br><span class="line">foo/bar exists: <span class="literal">false</span></span><br><span class="line">foo/bar exists: <span class="literal">true</span></span><br><span class="line">foo/bar is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/tmp/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e);</span><br><span class="line">            std::process::exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/goofy exists: <span class="literal">false</span></span><br><span class="line">created /tmp/goofy: OK</span><br><span class="line">/tmp/goofy exists: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/tmp/friends/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fs::create_dir can't create parent folders</span></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e),</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fs::create_dir_all does create parent folders</span></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir_all(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e),</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/tmp/friends/goofy exists: <span class="literal">false</span></span><br><span class="line">error creating /tmp/friends/goofy: No such file or directory (os error <span class="number">2</span>)</span><br><span class="line">/tmp/friends/goofy exists: <span class="literal">false</span></span><br><span class="line">created /tmp/friends/goofy: OK</span><br><span class="line">/tmp/friends/goofy exists: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="212-Check-if-folder-exists"><a href="#212-Check-if-folder-exists" class="headerlink" title="212. Check if folder exists"></a>212. <font color="0c0a3e">Check if folder exists</font></h3><blockquote><p>Set boolean b to true if path exists on the filesystem and is a directory; false otherwise.</p></blockquote><p><em>检查文件夹是否存在</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo"</span></span><br><span class="line">info, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err) &amp;&amp; info.IsDir()</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err = os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err) &amp;&amp; info.IsDir()</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo is a directory: <span class="literal">false</span></span><br><span class="line">foo is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/etc"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc: <span class="literal">true</span></span><br><span class="line">/goofy: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="215-Pad-string-on-the-left"><a href="#215-Pad-string-on-the-left" class="headerlink" title="215. Pad string on the left"></a>215. <font color="0c0a3e">Pad string on the left</font></h3><blockquote><p>Prepend extra character c at the beginning of string s to make sure its length is at least m.<br>The length is the number of characters, not the number of bytes.</p></blockquote><p><em>左侧补齐字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="number">3</span></span><br><span class="line">c := <span class="string">"-"</span></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"a"</span>,</span><br><span class="line"><span class="string">"ab"</span>,</span><br><span class="line"><span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"abcd"</span>,</span><br><span class="line"><span class="string">"é"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> n := utf8.RuneCountInString(s); n &lt; m &#123;</span><br><span class="line">s = strings.Repeat(c, m-n) + s</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--a</span><br><span class="line">-ab</span><br><span class="line">abc</span><br><span class="line">abcd</span><br><span class="line">--é</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> unicode_width::&#123;UnicodeWidthChar, UnicodeWidthStr&#125;;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(columns_short) = m.checked_sub(s.width()) &#123;</span><br><span class="line">    <span class="keyword">let</span> padding_width = c</span><br><span class="line">        .width()</span><br><span class="line">        .filter(|n| *n &gt; <span class="number">0</span>)</span><br><span class="line">        .expect(<span class="string">"padding character should be visible"</span>);</span><br><span class="line">    <span class="comment">// Saturate the columns_short</span></span><br><span class="line">    <span class="keyword">let</span> padding_needed = columns_short + padding_width - <span class="number">1</span> / padding_width;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = <span class="built_in">String</span>::with_capacity(s.len() + padding_needed);</span><br><span class="line">    t.extend((<span class="number">0</span>..padding_needed).map(|_| c)</span><br><span class="line">    t.push_str(&amp;s);</span><br><span class="line">    s = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*This uses the Unicode display width to determine the padding needed. This will be appropriate for most uses of monospaced text.</p><p>It assumes that m won’t combine with other characters to form a grapheme.*</p><p><br></p><h3 id="217-Create-a-Zip-archive"><a href="#217-Create-a-Zip-archive" class="headerlink" title="217. Create a Zip archive"></a>217. <font color="0c0a3e">Create a Zip archive</font></h3><blockquote><p>Create a zip-file with filename name and add the files listed in list to that zip-file.</p></blockquote><p><em>创建压缩文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"archive/zip"</span></span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"readme.txt"</span>,</span><br><span class="line"><span class="string">"gopher.txt"</span>,</span><br><span class="line"><span class="string">"todo.txt"</span>,</span><br><span class="line">&#125;</span><br><span class="line">name := <span class="string">"archive.zip"</span></span><br><span class="line"></span><br><span class="line">err := makeZip(list, name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeZip</span><span class="params">(list []<span class="keyword">string</span>, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a buffer to write our archive to.</span></span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new zip archive.</span></span><br><span class="line">w := zip.NewWriter(buf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add some files to the archive.</span></span><br><span class="line"><span class="keyword">for</span> _, filename := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="comment">// Open file for reading</span></span><br><span class="line">input, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create ZIP entry for writing</span></span><br><span class="line">output, err := w.Create(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = io.Copy(output, input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure to check the error on Close.</span></span><br><span class="line">err := w.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">N := buf.Len()</span><br><span class="line">err = ioutil.WriteFile(name, buf.Bytes(), <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Written a ZIP file of"</span>, N, <span class="string">"bytes"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create some files in the filesystem.</span></span><br><span class="line"><span class="keyword">var</span> files = []<span class="keyword">struct</span> &#123;</span><br><span class="line">Name, Body <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"readme.txt"</span>, <span class="string">"This archive contains some text files."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"gopher.txt"</span>, <span class="string">"Gopher names:\nGeorge\nGeoffrey\nGonzo"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"todo.txt"</span>, <span class="string">"Get animal handling licence.\nWrite more examples."</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">err := ioutil.WriteFile(file.Name, []<span class="keyword">byte</span>(file.Body), <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>list contains filenames of files existing in the filesystem.<br>In this example, the zip data is buffered in memory before writing to the filesystem.</em></p><p><code>2009/11/10 23:00:00 Written a ZIP file of 492 bytes</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> zip::write::FileOptions;</span><br><span class="line"><span class="keyword">let</span> path = std::path::Path::new(_name);</span><br><span class="line"><span class="keyword">let</span> file = std::fs::File::create(&amp;path).unwrap();</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> zip = zip::ZipWriter::new(file); zip.start_file(<span class="string">"readme.txt"</span>, FileOptions::default())?;                                                          </span><br><span class="line">zip.write_all(<span class="string">b"Hello, World!\n"</span>)?;</span><br><span class="line">zip.finish()?;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> zip::write::FileOptions;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">zip</span></span>(_name: &amp;<span class="built_in">str</span>, _list: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt;) -&gt; zip::result::ZipResult&lt;()&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> path = std::path::Path::new(_name);</span><br><span class="line">    <span class="keyword">let</span> file = std::fs::File::create(&amp;path).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> zip = zip::ZipWriter::new(file);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> _list.iter() &#123;</span><br><span class="line">        zip.start_file(i <span class="keyword">as</span> &amp;<span class="built_in">str</span>, FileOptions::default())?;</span><br><span class="line">    &#125;</span><br><span class="line">    zip.finish()?;</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="218-List-intersection"><a href="#218-List-intersection" class="headerlink" title="218. List intersection"></a>218. <font color="0c0a3e">List intersection</font></h3><blockquote><p>Create list c containing all unique elements that are contained in both lists a and b.<br>c should not contain any duplicates, even if a and b do.<br>The order of c doesn’t matter.</p></blockquote><p><em>列表的交集</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []T&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">b := []T&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert to sets</span></span><br><span class="line">seta := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> a &#123;</span><br><span class="line">seta[x] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">setb := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> b &#123;</span><br><span class="line">setb[y] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate in one pass</span></span><br><span class="line"><span class="keyword">var</span> c []T</span><br><span class="line"><span class="keyword">for</span> x := <span class="keyword">range</span> seta &#123;</span><br><span class="line"><span class="keyword">if</span> setb[x] &#123;</span><br><span class="line">c = <span class="built_in">append</span>(c, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[5 7 9]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> unique_a = a.iter().collect::&lt;HashSet&lt;_&gt;&gt;();</span><br><span class="line">    <span class="keyword">let</span> unique_b = b.iter().collect::&lt;HashSet&lt;_&gt;&gt;();</span><br><span class="line">    <span class="keyword">let</span> c = unique_a.intersection(&amp;unique_b).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c: &#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c: [2, 4]</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> set_a: HashSet&lt;_&gt; = a.into_iter().collect();</span><br><span class="line">    <span class="keyword">let</span> set_b: HashSet&lt;_&gt; = b.into_iter().collect();</span><br><span class="line">    <span class="keyword">let</span> c = set_a.intersection(&amp;set_b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c: &#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c: [2, 4]</code></p><p><br></p><h3 id="219-Replace-multiple-spaces-with-single-space"><a href="#219-Replace-multiple-spaces-with-single-space" class="headerlink" title="219. Replace multiple spaces with single space"></a>219. <font color="0c0a3e">Replace multiple spaces with single space</font></h3><blockquote><p>Create string t from the value of string s with each sequence of spaces replaced by a single space.<br>Explain if only the space characters will be replaced, or the other whitespaces as well: tabs, newlines.</p></blockquote><p><em>用单个空格替换多个空格</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// regexp created only once, and then reused</span></span><br><span class="line"><span class="keyword">var</span> whitespaces = regexp.MustCompile(<span class="string">`\s+`</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`</span></span><br><span class="line"><span class="string">one   two</span></span><br><span class="line"><span class="string">   three</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">t := whitespaces.ReplaceAllString(s, <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"t=%q"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>t=&quot; one two three &quot;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"</span></span><br><span class="line"><span class="string">one   two</span></span><br><span class="line"><span class="string">   three</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line">    <span class="keyword">let</span> re = Regex::new(<span class="string">r"\s+"</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> t = re.replace_all(s, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>one two three</code></p><p><br></p><h3 id="220-Create-a-tuple-value"><a href="#220-Create-a-tuple-value" class="headerlink" title="220. Create a tuple value"></a>220. <font color="0c0a3e">Create a tuple value</font></h3><blockquote><p>Create t consisting of 3 values having different types.<br>Explain if the elements of t are strongly typed or not.</p></blockquote><p><em>创建元组值a</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t := []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="number">2.5</span>,</span><br><span class="line"><span class="string">"hello"</span>,</span><br><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A slice of empty interface may hold any values (not strongly typed).</strong></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = (<span class="number">2.5</span>, <span class="string">"hello"</span>, -<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    t.<span class="number">2</span> -= <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(2.5, &quot;hello&quot;, -5)</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;202-Sum-of-squares&quot;&gt;&lt;a href=&quot;#202-Sum-of-squares&quot; class=&quot;headerlink&quot; title=&quot;202. Sum of squares&quot;&gt;&lt;/a&gt;202. &lt;font color=&quot;0
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(10)</title>
    <link href="http://www.dashen.tech/2021/09/11/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-10/"/>
    <id>http://www.dashen.tech/2021/09/11/Rust-vs-Go-常用语法对比-10/</id>
    <published>2021-09-11T14:43:58.000Z</published>
    <updated>2021-09-21T02:56:41.849Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="182-Quine-program"><a href="#182-Quine-program" class="headerlink" title="182. Quine program"></a>182. <font color="0c0a3e">Quine program</font></h3><blockquote><pre><code>Output the source of the program.</code></pre></blockquote><p><em>输出程序的源代码</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s%c%s%c\n"</span>, s, <span class="number">0x60</span>, s, <span class="number">0x60</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">`package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">fmt.Printf("%s%c%s%c\n", s, 0x60, s, 0x60)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var s = `</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s%c%s%c\n"</span>, s, <span class="number">0x60</span>, s, <span class="number">0x60</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">`package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">fmt.Printf("%s%c%s%c\n", s, 0x60, s, 0x60)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var s = `</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"fn main() &#123;\n    let x = "</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"print!(\"&#123;&#125;&#123;:?&#125;;\n    let y = &#123;:?&#125;;\n    &#123;&#125;\", x, x, y, y)\n&#125;\n"</span>;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;&#123;:?&#125;;</span></span><br><span class="line"><span class="string">    let y = &#123;:?&#125;;</span></span><br><span class="line"><span class="string">    &#123;&#125;"</span>, x, x, y, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"fn main() &#123;\n    let x = "</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"print!(\"&#123;&#125;&#123;:?&#125;;\n    let y = &#123;:?&#125;;\n    &#123;&#125;\", x, x, y, y)\n&#125;\n"</span>;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;&#123;:?&#125;;</span></span><br><span class="line"><span class="string">    let y = &#123;:?&#125;;</span></span><br><span class="line"><span class="string">    &#123;&#125;"</span>, x, x, y, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;<span class="built_in">print!</span>(<span class="string">"&#123;&#125;,&#123;0:?&#125;)&#125;&#125;"</span>,<span class="string">"fn main()&#123;print!(\"&#123;&#125;,&#123;0:?&#125;)&#125;&#125;\""</span>)&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><code>fn main(){print!(&quot;{},{0:?})}}&quot;,&quot;fn main(){print!(\&quot;{},{0:?})}}\&quot;&quot;)}</code></p><p><br></p><h3 id="184-Tomorrow"><a href="#184-Tomorrow" class="headerlink" title="184. Tomorrow"></a>184. <font color="0c0a3e">Tomorrow</font></h3><blockquote><p>Assign to variable t a string representing the day, month and year of the day after the current date.</p></blockquote><p><em>明天的日期</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line">t := time.Now().Add(<span class="number">24</span> * time.Hour).Format(<span class="string">"2006-01-02"</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t = chrono::Utc::now().date().succ().to_string();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2021-07-18UTC</code></p><p><br></p><h3 id="185-Execute-function-in-30-seconds"><a href="#185-Execute-function-in-30-seconds" class="headerlink" title="185. Execute function in 30 seconds"></a>185. <font color="0c0a3e">Execute function in 30 seconds</font></h3><blockquote><p>Schedule the execution of f(42) in 30 seconds.</p></blockquote><p><em>30秒内执行功能</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line">timer := time.AfterFunc(</span><br><span class="line"><span class="number">30</span>*time.Second,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">f(<span class="number">42</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Scheduling f(42)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">f(<span class="number">42</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Poor man's waiting of completion of f.</span></span><br><span class="line"><span class="comment">// Don't do this in prod, use proper synchronization instead.</span></span><br><span class="line">time.Sleep(<span class="number">4</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Received"</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Scheduling f(42)</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> std::thread::sleep;</span><br><span class="line">sleep(Duration::new(<span class="number">30</span>, <span class="number">0</span>));</span><br><span class="line">f(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="186-Exit-program-cleanly"><a href="#186-Exit-program-cleanly" class="headerlink" title="186. Exit program cleanly"></a>186. <font color="0c0a3e">Exit program cleanly</font></h3><blockquote><p>Exit a program cleanly indicating no error to OS</p></blockquote><p><em>干净地退出程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>A</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">process1()</span><br><span class="line">process2()</span><br><span class="line">process3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 2"</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">defer</span> os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process3</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process <span class="number">1</span></span><br><span class="line">process <span class="number">2</span></span><br><span class="line">C</span><br><span class="line">B</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::exit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"A"</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>A</code></p><p><br></p><h3 id="189-Filter-and-transform-list"><a href="#189-Filter-and-transform-list" class="headerlink" title="189. Filter and transform list"></a>189. <font color="0c0a3e">Filter and transform list</font></h3><blockquote><p>Produce a new list y containing the result of function T applied to all elements e of list x that match the predicate P.</p></blockquote><p><em>过滤和转换列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">P</span><span class="params">(e <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Predicate "is even"</span></span><br><span class="line"><span class="keyword">return</span> e%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result = <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">T</span><span class="params">(e <span class="keyword">int</span>)</span> <span class="title">Result</span></span> &#123;</span><br><span class="line"><span class="comment">// Transformation "square"</span></span><br><span class="line"><span class="keyword">return</span> e * e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y []Result</span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> P(e) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, T(e))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[16 36 64 100]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y = x.iter()</span><br><span class="line">.filter(P)</span><br><span class="line">        .map(T)</span><br><span class="line">.collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="190-Call-an-external-C-function"><a href="#190-Call-an-external-C-function" class="headerlink" title="190. Call an external C function"></a>190. <font color="0c0a3e">Call an external C function</font></h3><blockquote><p>Declare an external C function with the prototype<br>void foo(double *a, int n);<br>and call it, passing an array (or a list) of size 10 to a and 10 to n.<br>Use only standard features of your language.</p></blockquote><p><em>调用外部C函数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void foo(double *a, int n);</span></span><br><span class="line"><span class="comment">// double a[] = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line">C.foo(C.a, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">    <span class="comment">/// # Safety</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// `a` must point to an array of at least size 10</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(a: *<span class="keyword">mut</span> libc::c_double, n: libc::c_int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> a = [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>, <span class="number">9.0</span>];</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    foo(a.as_mut_ptr(), n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="191-Check-if-any-value-in-a-list-is-larger-than-a-limit"><a href="#191-Check-if-any-value-in-a-list-is-larger-than-a-limit" class="headerlink" title="191. Check if any value in a list is larger than a limit"></a>191. <font color="0c0a3e">Check if any value in a list is larger than a limit</font></h3><blockquote><pre><code>Given a one-dimensional array a, check if any value is larger than x, and execute the procedure f if that is the case</code></pre></blockquote><p><em>检查列表中是否有任何值大于限制</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Larger found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">x := <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> v &gt; x &#123;</span><br><span class="line">f()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Larger found</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">if</span> a.iter().any(|&amp;elem| elem &gt; x) &#123;</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">if</span> a.iter().any(|&amp;elem| elem &gt; x) &#123;</span><br><span class="line">        g()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"F"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">g</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"G"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>F</code></p><p><br></p><h3 id="192-Declare-a-real-variable-with-at-least-20-digits"><a href="#192-Declare-a-real-variable-with-at-least-20-digits" class="headerlink" title="192. Declare a real variable with at least 20 digits"></a>192. <font color="0c0a3e">Declare a real variable with at least 20 digits</font></h3><blockquote><p>Declare a real variable a with at least 20 digits; if the type does not exist, issue an error at compile time.</p></blockquote><p><em>声明一个至少有20位数字的实变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, _, err := big.ParseFloat(<span class="string">"123456789.123456789123465789"</span>, <span class="number">10</span>, <span class="number">200</span>, big.ToZero)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.234567891234567891234657889999999999999999999999999999999999e+08</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rust_decimal::Decimal;</span><br><span class="line"><span class="keyword">use</span> std::<span class="built_in">str</span>::FromStr;</span><br><span class="line"><span class="keyword">let</span> a = Decimal::from_str(<span class="string">"1234567890.123456789012345"</span>).unwrap();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="197-Get-a-list-of-lines-from-a-file"><a href="#197-Get-a-list-of-lines-from-a-file" class="headerlink" title="197.  Get a list of lines from a file"></a>197. <font color="0c0a3e"> Get a list of lines from a file</font></h3><blockquote><p>Retrieve the contents of file at path into a list of strings lines, in which each element is a line of the file.</p></blockquote><p><em>从文件中获取行列表.将文件路径中的内容检索到字符串行列表中，其中每个元素都是文件的一行。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readLines</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">lines := strings.Split(<span class="keyword">string</span>(b), <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">return</span> lines, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lines, err := readLines(<span class="string">"/tmp/file1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line">fmt.Printf(<span class="string">"line %d: %s\n"</span>, i, line)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">`foo</span></span><br><span class="line"><span class="string">bar</span></span><br><span class="line"><span class="string">baz`</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line <span class="number">0</span>: foo</span><br><span class="line">line <span class="number">1</span>: bar</span><br><span class="line">line <span class="number">2</span>: baz</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::io::BufReader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/etc/hosts"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lines = BufReader::new(File::open(path).unwrap())</span><br><span class="line">        .lines()</span><br><span class="line">        .collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, lines);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[Ok(&quot;127.0.0.1\tlocalhost&quot;), Ok(&quot;::1\tlocalhost ip6-localhost ip6-loopback&quot;), Ok(&quot;fe00::0\tip6-localnet&quot;), Ok(&quot;ff00::0\tip6-mcastprefix&quot;), Ok(&quot;ff02::1\tip6-allnodes&quot;), Ok(&quot;ff02::2\tip6-allrouters&quot;)]</code></p><p><br></p><h3 id="198-Abort-program-execution-with-error-condition"><a href="#198-Abort-program-execution-with-error-condition" class="headerlink" title="198. Abort program execution with error condition"></a>198. <font color="0c0a3e">Abort program execution with error condition</font></h3><blockquote><p>Abort program execution with error condition x (where x is an integer value)</p></blockquote><p><em>出现错误情况时中止程序执行</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">os.Exit(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Program exited: status 1.</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process;</span><br><span class="line">process::exit(x);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="200-Return-hypotenuse"><a href="#200-Return-hypotenuse" class="headerlink" title="200. Return hypotenuse"></a>200. <font color="0c0a3e">Return hypotenuse</font></h3><blockquote><p>Returns the hypotenuse h of the triangle where the sides adjacent to the square angle have lengths x and y.</p></blockquote><p><em>返回三角形的斜边h，其中与直角相邻的边的长度为x和y。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">1.0</span></span><br><span class="line">y := <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">h := math.Hypot(x, y)</span><br><span class="line">fmt.Println(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.4142135623730951</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (x, y) = (<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">let</span> h = hypot(x, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">hypot</span></span>(x: <span class="built_in">f64</span>, y: <span class="built_in">f64</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = x.powi(<span class="number">2</span>) + y.powi(<span class="number">2</span>);</span><br><span class="line">    num.powf(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.4142135623730951</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;182-Quine-program&quot;&gt;&lt;a href=&quot;#182-Quine-program&quot; class=&quot;headerlink&quot; title=&quot;182. Quine program&quot;&gt;&lt;/a&gt;182. &lt;font color=&quot;0c0a
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(9)</title>
    <link href="http://www.dashen.tech/2021/09/10/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-9/"/>
    <id>http://www.dashen.tech/2021/09/10/Rust-vs-Go-常用语法对比-9/</id>
    <published>2021-09-10T13:43:58.000Z</published>
    <updated>2021-09-21T02:56:35.666Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="161-Multiply-all-the-elements-of-a-list"><a href="#161-Multiply-all-the-elements-of-a-list" class="headerlink" title="161. Multiply all the elements of a list"></a>161. <font color="0c0a3e">Multiply all the elements of a list</font></h3><blockquote><p>Multiply all the elements of the list elements by a constant c</p></blockquote><p><em>将list中的每个元素都乘以一个数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">5.5</span></span><br><span class="line">elements := []<span class="keyword">float64</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(elements)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> elements &#123;</span><br><span class="line">elements[i] *= c</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(elements)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">9</span> <span class="number">30</span>]</span><br><span class="line">[<span class="number">11</span> <span class="number">22</span> <span class="number">49.5</span> <span class="number">165</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> elements: <span class="built_in">Vec</span>&lt;<span class="built_in">f32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">2.0</span>, <span class="number">3.5</span>, <span class="number">4.0</span>];</span><br><span class="line">    <span class="keyword">let</span> c = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elements = elements.into_iter().map(|x| c * x).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[4.0, 7.0, 8.0]</code></p><p><br></p><h3 id="162-Execute-procedures-depending-on-options"><a href="#162-Execute-procedures-depending-on-options" class="headerlink" title="162. Execute procedures depending on options"></a>162. <font color="0c0a3e">Execute procedures depending on options</font></h3><blockquote><p>execute bat if b is a program option and fox if f is a program option.</p></blockquote><p><em>根据选项执行程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Just for testing in the Playground, let's simulate</span></span><br><span class="line"><span class="comment">// the user called this program with command line</span></span><br><span class="line"><span class="comment">// flags -f and -b</span></span><br><span class="line">os.Args = []<span class="keyword">string</span>&#123;<span class="string">"program"</span>, <span class="string">"-f"</span>, <span class="string">"-b"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = flag.Bool(<span class="string">"b"</span>, <span class="literal">false</span>, <span class="string">"Do bat"</span>)</span><br><span class="line"><span class="keyword">var</span> f = flag.Bool(<span class="string">"f"</span>, <span class="literal">false</span>, <span class="string">"Do fox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *b &#123;</span><br><span class="line">bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> *f &#123;</span><br><span class="line">fox()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"The end."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"BAR"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fox</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"FOX"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BAR</span><br><span class="line">FOX</span><br><span class="line">The end.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(arg) = ::std::env::args().nth(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> &amp;arg == <span class="string">"f"</span> &#123;</span><br><span class="line">        fox();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> &amp;arg = <span class="string">"b"</span> &#123;</span><br><span class="line">        bat();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">eprintln!(<span class="string">"invalid argument: &#123;&#125;"</span>, arg),</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eprintln!(<span class="string">"missing argument"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(arg) = ::std::env::args().nth(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> arg.as_str() &#123;</span><br><span class="line">        <span class="string">"f"</span> =&gt; fox(),</span><br><span class="line">        <span class="string">"b"</span> =&gt; <span class="keyword">box</span>(),</span><br><span class="line">        _ =&gt; eprintln!(<span class="string">"invalid argument: &#123;&#125;"</span>, arg),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eprintln!(<span class="string">"missing argument"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="163-Print-list-elements-by-group-of-2"><a href="#163-Print-list-elements-by-group-of-2" class="headerlink" title="163. Print list elements by group of 2"></a>163. <font color="0c0a3e">Print list elements by group of 2</font></h3><blockquote><p>Print all the list elements, two by two, assuming list length is even.</p></blockquote><p><em>两个一组打印数组元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i+<span class="number">1</span> &lt; <span class="built_in">len</span>(list); i += <span class="number">2</span> &#123;</span><br><span class="line">fmt.Println(list[i], list[i+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a b</span><br><span class="line">c d</span><br><span class="line">e f</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> list.chunks(<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, pair[<span class="number">0</span>], pair[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="164-Open-URL-in-default-browser"><a href="#164-Open-URL-in-default-browser" class="headerlink" title="164. Open URL in default browser"></a>164. <font color="0c0a3e">Open URL in default browser</font></h3><blockquote><p>Open the URL s in the default browser.<br>Set boolean b to indicate whether the operation was successful.</p></blockquote><p><em>在默认浏览器中打开链接</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/skratchdot/open-golang/open"</span></span><br><span class="line">b := open.Start(s) == <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openbrowser</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> runtime.GOOS &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"xdg-open"</span>, url).Start()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"windows"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"rundll32"</span>, <span class="string">"url.dll,FileProtocolHandler"</span>, url).Start()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"open"</span>, url).Start()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">err = fmt.Errorf(<span class="string">"unsupported platform"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> webbrowser;</span><br><span class="line">webbrowser::open(s).expect(<span class="string">"failed to open URL"</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="165-Last-element-of-list"><a href="#165-Last-element-of-list" class="headerlink" title="165. Last element of list"></a>165. <font color="0c0a3e">Last element of list</font></h3><blockquote><p>Assign to variable x the last element of list items.</p></blockquote><p><em>列表中的最后一个元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123; <span class="string">"what"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span> &#125;</span><br><span class="line"></span><br><span class="line">x := items[<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mess</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line">    <span class="keyword">let</span> x = items[items.len()-<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line">    <span class="keyword">let</span> x = items.last().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42</code></p><p><br></p><h3 id="166-Concatenate-two-lists"><a href="#166-Concatenate-two-lists" class="headerlink" title="166. Concatenate two lists"></a>166. <font color="0c0a3e">Concatenate two lists</font></h3><blockquote><p>Create list ab containing all the elements of list a, followed by all elements of list b.</p></blockquote><p><em>连接两个列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []<span class="keyword">string</span>&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line">ab := <span class="built_in">append</span>(a, b...)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">a := []T&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab []T</span><br><span class="line">ab = <span class="built_in">append</span>(<span class="built_in">append</span>(ab, a...), b...)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">a := []T&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line">ab := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(a)+<span class="built_in">len</span>(b))</span><br><span class="line"><span class="built_in">copy</span>(ab, a)</span><br><span class="line"><span class="built_in">copy</span>(ab[<span class="built_in">len</span>(a):], b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> ab = [a, b].concat();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ab);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4]</code></p><p><br></p><h3 id="167-Trim-prefix"><a href="#167-Trim-prefix" class="headerlink" title="167. Trim prefix"></a>167. <font color="0c0a3e">Trim prefix</font></h3><blockquote><p>Create string t consisting of string s with its prefix p removed (if s starts with p).</p></blockquote><p><em>移除前缀</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"café-society"</span></span><br><span class="line">p := <span class="string">"café"</span></span><br><span class="line"></span><br><span class="line">t := strings.TrimPrefix(s, p)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-society</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.trim_start_matches(p);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Warning: trim_start_matches removes several leading occurrences of p, if present.</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.trim_start_matches(p);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> t = <span class="keyword">if</span> s.starts_with(p) &#123; &amp;s[p.len()..] &#125; <span class="keyword">else</span> &#123; s &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pre_thing</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.strip_prefix(p).unwrap_or_else(|| s);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If prefix p is repeated in s, it is removed only once by strip_prefix</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.strip_prefix(p).unwrap_or_else(|| s);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">pre_thing</span><br></pre></td></tr></table></figure><p><br></p><h3 id="168-Trim-suffix"><a href="#168-Trim-suffix" class="headerlink" title="168. Trim suffix"></a>168. <font color="0c0a3e">Trim suffix</font></h3><blockquote><p>Create string t consisting of string s with its suffix w removed (if s ends with w).</p></blockquote><p><em>移除后缀</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"café-society"</span></span><br><span class="line">w := <span class="string">"society"</span></span><br><span class="line"></span><br><span class="line">t := strings.TrimSuffix(s, w)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>café-</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w); <span class="comment">// s does not end with w, it is left intact</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w); <span class="comment">// removes several occurrences of w</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br><span class="line">thing</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s); <span class="comment">// s does not end with w, it is left intact</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s); <span class="comment">// only 1 occurrence of w is removed</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br><span class="line">thing_suf</span><br></pre></td></tr></table></figure><p><br></p><h3 id="169-String-length"><a href="#169-String-length" class="headerlink" title="169. String length"></a>169. <font color="0c0a3e">String length</font></h3><blockquote><pre><code>Assign to integer n the number of characters of string s.</code></pre><p>Make sure that multibyte characters are properly handled.<br>n can be different from the number of bytes of s.</p></blockquote><p><em>字符串长度</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"unicode/utf8"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Hello, 世界"</span></span><br><span class="line">n := utf8.RuneCountInString(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>9</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"世界"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = s.chars().count();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; characters"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2 characters</code></p><p><br></p><h3 id="170-Get-map-size"><a href="#170-Get-map-size" class="headerlink" title="170. Get map size"></a>170. <font color="0c0a3e">Get map size</font></h3><blockquote><p>Set n to the number of elements stored in mymap.<br>This is not always equal to the map capacity.</p></blockquote><p><em>获取map的大小</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(mymap)</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [(<span class="string">"one"</span>, <span class="number">1</span>), (<span class="string">"two"</span>, <span class="number">2</span>)].iter().cloned().collect();</span><br><span class="line">    mymap.insert(<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = mymap.len();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"mymap has &#123;:?&#125; entries"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mymap has 3 entries</code></p><p><br></p><h3 id="171-Add-an-element-at-the-end-of-a-list"><a href="#171-Add-an-element-at-the-end-of-a-list" class="headerlink" title="171. Add an element at the end of a list"></a>171. <font color="0c0a3e">Add an element at the end of a list</font></h3><blockquote><p>Append element x to the list s.</p></blockquote><p><em>在list尾部添加元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>&#125;</span><br><span class="line">x := <span class="number">21</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1 1 2 3 5 8 13 21]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    s.push(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 99]</code></p><p><br></p><h3 id="172-Insert-entry-in-map"><a href="#172-Insert-entry-in-map" class="headerlink" title="172. Insert entry in map"></a>172. <font color="0c0a3e">Insert entry in map</font></h3><blockquote><p>Insert value v for key k in map m.</p></blockquote><p><em>向map中写入元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line">k := <span class="string">"three"</span></span><br><span class="line">v := <span class="number">3</span></span><br><span class="line"></span><br><span class="line">m[k] = v</span><br><span class="line"></span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map[one:1 three:3 two:2]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [(<span class="string">"one"</span>, <span class="number">1</span>), (<span class="string">"two"</span>, <span class="number">2</span>)].iter().cloned().collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (k, v) = (<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    m.insert(k, v);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{&quot;three&quot;: 3, &quot;one&quot;: 1, &quot;two&quot;: 2}</code></p><p><br></p><h3 id="173-Format-a-number-with-grouped-thousands"><a href="#173-Format-a-number-with-grouped-thousands" class="headerlink" title="173. Format a number with grouped thousands"></a>173. <font color="0c0a3e">Format a number with grouped thousands</font></h3><blockquote><p>Number will be formatted with a comma separator between every group of thousands.</p></blockquote><p><em>按千位格式化数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"golang.org/x/text/language"</span></span><br><span class="line"><span class="string">"golang.org/x/text/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Playground doesn't work with import of external packages.</span></span><br><span class="line"><span class="comment">// However, you may copy this source and test it on your workstation.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := message.NewPrinter(language.English)</span><br><span class="line">s := p.Sprintf(<span class="string">"%d\n"</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1,000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1,000</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/floscodes/golang-thousands"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Playground takes more time when importing external packages.</span></span><br><span class="line"><span class="comment">// However, you may want to copy this source and test it on your workstation.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := strconv.Itoa(<span class="number">23489</span>)</span><br><span class="line">s := thousands.Separate(n, <span class="string">"en"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 23,489</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>23,489</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> separator::Separatable;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="number">1000</span>.separated_string());</span><br></pre></td></tr></table></figure><p><br></p><h3 id="174-Make-HTTP-POST-request"><a href="#174-Make-HTTP-POST-request" class="headerlink" title="174. Make HTTP POST request"></a>174. <font color="0c0a3e">Make HTTP POST request</font></h3><blockquote><p>Make a HTTP request with method POST to URL u</p></blockquote><p><em>发起http POST请求</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">contentType := <span class="string">"text/plain"</span></span><br><span class="line"><span class="keyword">var</span> body io.Reader</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello"</span></span><br><span class="line"></span><br><span class="line">response, err := http.Post(u, contentType, body)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err := ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"POST response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line"></span><br><span class="line">response, err = http.Get(u)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err = ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"GET  response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Refusing request verb %q"</span>, r.Method)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello POST :)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST response: 200 Hello Alice (POST)</span><br><span class="line">GET  response: 400 Refusing request verb &quot;GET&quot;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">formValues := url.Values&#123;</span><br><span class="line"><span class="string">"who"</span>: []<span class="keyword">string</span>&#123;<span class="string">"Alice"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello"</span></span><br><span class="line"></span><br><span class="line">response, err := http.PostForm(u, formValues)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err := ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"POST response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line"></span><br><span class="line">response, err = http.Get(u)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err = ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"GET  response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Refusing request verb %q"</span>, r.Method)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello %s (POST)"</span>, r.FormValue(<span class="string">"who"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">error-chain = <span class="string">"0.12.4"</span></span><br><span class="line">reqwest = &#123; version = <span class="string">"0.11.2"</span>, features = [<span class="string">"blocking"</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> error_chain::error_chain;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">let</span> client = reqwest::blocking::Client::new();</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> response = client.post(u).body(<span class="string">"abc"</span>).send()?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="175-Bytes-to-hex-string"><a href="#175-Bytes-to-hex-string" class="headerlink" title="175. Bytes to hex string"></a>175. <font color="0c0a3e">Bytes to hex string</font></h3><blockquote><p>From array a of n bytes, build the equivalent hex string s of 2n digits.<br>Each byte (256 possible values) is encoded as two hexadecimal characters (16 possible values per digit).</p></blockquote><p><em>字节转十六进制字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line">s := hex.EncodeToString(a)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>48656c6c6f</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> core::fmt::Write;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; core::fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">22</span>, <span class="number">4</span>, <span class="number">127</span>, <span class="number">193</span>];</span><br><span class="line">    <span class="keyword">let</span> n = a.len();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::with_capacity(<span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">write!</span>(s, <span class="string">"&#123;:02X&#125;"</span>, byte)?;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dbg!(s);</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[src/main.rs:12] s = &quot;16047FC1&quot;</code></p><p><br></p><h3 id="176-Hex-string-to-byte-array"><a href="#176-Hex-string-to-byte-array" class="headerlink" title="176. Hex string to byte array"></a>176. <font color="0c0a3e">Hex string to byte array</font></h3><blockquote><p>From hex string s of 2n digits, build the equivalent array a of n bytes.<br>Each pair of hexadecimal characters (16 possible values per digit) is decoded into one byte (256 possible values).</p></blockquote><p><em>十六进制字符串转字节数组</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"48656c6c6f"</span></span><br><span class="line"></span><br><span class="line">a, err := hex.DecodeString(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">72</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span>]</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> hex::FromHex</span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt; = <span class="built_in">Vec</span>::from_hex(s).expect(<span class="string">"Invalid Hex String"</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="178-Check-if-point-is-inside-rectangle"><a href="#178-Check-if-point-is-inside-rectangle" class="headerlink" title="178. Check if point is inside rectangle"></a>178. <font color="0c0a3e">Check if point is inside rectangle</font></h3><blockquote><pre><code>Set boolean b to true if if the point with coordinates (x,y) is inside the rectangle with coordinates (x1,y1,x2,y2) , or to false otherwise.</code></pre><p>Describe if the edges are considered to be inside the rectangle.</p></blockquote><p><em>检查点是否在矩形内</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x1, y1, x2, y2 := <span class="number">1</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">100</span></span><br><span class="line">r := image.Rect(x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line">x, y := <span class="number">10</span>, <span class="number">10</span></span><br><span class="line">p := image.Pt(x, y)</span><br><span class="line">b := p.In(r)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">x, y = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">p = image.Pt(x, y)</span><br><span class="line">b = p.In(r)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span></span> &#123;</span><br><span class="line">    x1: <span class="built_in">i32</span>,</span><br><span class="line">    x2: <span class="built_in">i32</span>,</span><br><span class="line">    y1: <span class="built_in">i32</span>,</span><br><span class="line">    y2: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rect &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">contains</span></span>(&amp;<span class="keyword">self</span>, x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.x1 &lt; x &amp;&amp; x &lt; <span class="keyword">self</span>.x2 &amp;&amp; <span class="keyword">self</span>.y1 &lt; y &amp;&amp; y &lt; <span class="keyword">self</span>.y2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="179-Get-center-of-a-rectangle"><a href="#179-Get-center-of-a-rectangle" class="headerlink" title="179. Get center of a rectangle"></a>179. <font color="0c0a3e">Get center of a rectangle</font></h3><blockquote><p>Return the center c of the rectangle with coördinates(x1,y1,x2,y2)</p></blockquote><p><em>获取矩形的中心</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"image"</span></span><br><span class="line">c := image.Pt((x1+x2)/<span class="number">2</span>, (y1+y2)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    x1: <span class="built_in">f64</span>,</span><br><span class="line">    y1: <span class="built_in">f64</span>,</span><br><span class="line">    x2: <span class="built_in">f64</span>,</span><br><span class="line">    y2: <span class="built_in">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">center</span></span>(&amp;<span class="keyword">self</span>) -&gt; (<span class="built_in">f64</span>, <span class="built_in">f64</span>) &#123;</span><br><span class="line">    ((<span class="keyword">self</span>.x1 + <span class="keyword">self</span>.x2) / <span class="number">2.0</span>, (<span class="keyword">self</span>.y1 + <span class="keyword">self</span>.y2) / <span class="number">2.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> r = Rectangle &#123;</span><br><span class="line">        x1: <span class="number">5</span>.,</span><br><span class="line">        y1: <span class="number">5</span>.,</span><br><span class="line">        x2: <span class="number">10</span>.,</span><br><span class="line">        y2: <span class="number">10</span>.,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, r.center());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(7.5, 7.5)</code></p><p><br></p><h3 id="180-List-files-in-directory"><a href="#180-List-files-in-directory" class="headerlink" title="180. List files in directory"></a>180. <font color="0c0a3e">List files in directory</font></h3><blockquote><p>Create list x containing the contents of directory d.<br>x may contain files and subfolders.<br>No recursive subfolder listing.</p></blockquote><p><em>列出目录中的文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line">x, err := ioutil.ReadDir(d)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Println(f.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">tmpfs</span><br><span class="line">usr</span><br><span class="line"><span class="keyword">var</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"/etc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = fs::read_dir(d).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> x &#123;</span><br><span class="line">        <span class="keyword">let</span> entry = entry.unwrap();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, entry.path());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"/etc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = std::fs::read_dir(d)</span><br><span class="line">        .unwrap()</span><br><span class="line">        .collect::&lt;<span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;_&gt;, _&gt;&gt;()</span><br><span class="line">        .unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> x &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, entry.path());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"/etc/issue.net"</span></span><br><span class="line"><span class="string">"/etc/bindresvport.blacklist"</span></span><br><span class="line"><span class="string">"/etc/rc1.d"</span></span><br><span class="line"><span class="string">"/etc/hostname"</span></span><br><span class="line"><span class="string">"/etc/xattr.conf"</span></span><br><span class="line"><span class="string">"/etc/resolv.conf"</span></span><br><span class="line"><span class="string">"/etc/pam.conf"</span></span><br><span class="line"><span class="string">"/etc/mke2fs.conf"</span></span><br><span class="line"><span class="string">"/etc/e2scrub.conf"</span></span><br><span class="line"><span class="string">"/etc/update-motd.d"</span></span><br><span class="line"><span class="string">"/etc/terminfo"</span></span><br><span class="line"><span class="string">"/etc/alternatives"</span></span><br><span class="line"><span class="string">"/etc/ld.so.cache"</span></span><br><span class="line"><span class="string">"/etc/networks"</span></span><br><span class="line"><span class="string">"/etc/profile"</span></span><br><span class="line"><span class="string">"/etc/debconf.conf"</span></span><br><span class="line"><span class="string">"/etc/security"</span></span><br><span class="line"><span class="string">"/etc/.pwd.lock"</span></span><br><span class="line"><span class="string">"/etc/gai.conf"</span></span><br><span class="line"><span class="string">"/etc/dpkg"</span></span><br><span class="line"><span class="string">"/etc/rc3.d"</span></span><br><span class="line"><span class="string">"/etc/fstab"</span></span><br><span class="line"><span class="string">"/etc/gshadow"</span></span><br><span class="line"><span class="string">"/etc/sysctl.conf"</span></span><br><span class="line"><span class="string">"/etc/rc2.d"</span></span><br><span class="line"><span class="string">"/etc/selinux"</span></span><br><span class="line"><span class="string">"/etc/ld.so.conf.d"</span></span><br><span class="line"><span class="string">"/etc/os-release"</span></span><br><span class="line"><span class="string">"/etc/libaudit.conf"</span></span><br><span class="line"><span class="string">"/etc/login.defs"</span></span><br><span class="line"><span class="string">"/etc/skel"</span></span><br><span class="line"><span class="string">"/etc/shells"</span></span><br><span class="line"><span class="string">"/etc/rc4.d"</span></span><br><span class="line"><span class="string">"/etc/cron.d"</span></span><br><span class="line"><span class="string">"/etc/default"</span></span><br><span class="line"><span class="string">"/etc/lsb-release"</span></span><br><span class="line"><span class="string">"/etc/apt"</span></span><br><span class="line"><span class="string">"/etc/debian_version"</span></span><br><span class="line"><span class="string">"/etc/machine-id"</span></span><br><span class="line"><span class="string">"/etc/deluser.conf"</span></span><br><span class="line"><span class="string">"/etc/group"</span></span><br><span class="line"><span class="string">"/etc/legal"</span></span><br><span class="line"><span class="string">"/etc/rc6.d"</span></span><br><span class="line"><span class="string">"/etc/init.d"</span></span><br><span class="line"><span class="string">"/etc/sysctl.d"</span></span><br><span class="line"><span class="string">"/etc/pam.d"</span></span><br><span class="line"><span class="string">"/etc/passwd"</span></span><br><span class="line"><span class="string">"/etc/rc5.d"</span></span><br><span class="line"><span class="string">"/etc/bash.bashrc"</span></span><br><span class="line"><span class="string">"/etc/hosts"</span></span><br><span class="line"><span class="string">"/etc/rc0.d"</span></span><br><span class="line"><span class="string">"/etc/environment"</span></span><br><span class="line"><span class="string">"/etc/cron.daily"</span></span><br><span class="line"><span class="string">"/etc/shadow"</span></span><br><span class="line"><span class="string">"/etc/ld.so.conf"</span></span><br><span class="line"><span class="string">"/etc/subgid"</span></span><br><span class="line"><span class="string">"/etc/opt"</span></span><br><span class="line"><span class="string">"/etc/logrotate.d"</span></span><br><span class="line"><span class="string">"/etc/subuid"</span></span><br><span class="line"><span class="string">"/etc/profile.d"</span></span><br><span class="line"><span class="string">"/etc/adduser.conf"</span></span><br><span class="line"><span class="string">"/etc/issue"</span></span><br><span class="line"><span class="string">"/etc/rmt"</span></span><br><span class="line"><span class="string">"/etc/host.conf"</span></span><br><span class="line"><span class="string">"/etc/rcS.d"</span></span><br><span class="line"><span class="string">"/etc/nsswitch.conf"</span></span><br><span class="line"><span class="string">"/etc/systemd"</span></span><br><span class="line"><span class="string">"/etc/kernel"</span></span><br><span class="line"><span class="string">"/etc/mtab"</span></span><br><span class="line"><span class="string">"/etc/shadow-"</span></span><br><span class="line"><span class="string">"/etc/passwd-"</span></span><br><span class="line"><span class="string">"/etc/subuid-"</span></span><br><span class="line"><span class="string">"/etc/gshadow-"</span></span><br><span class="line"><span class="string">"/etc/subgid-"</span></span><br><span class="line"><span class="string">"/etc/group-"</span></span><br><span class="line"><span class="string">"/etc/ethertypes"</span></span><br><span class="line"><span class="string">"/etc/logcheck"</span></span><br><span class="line"><span class="string">"/etc/gss"</span></span><br><span class="line"><span class="string">"/etc/bash_completion.d"</span></span><br><span class="line"><span class="string">"/etc/X11"</span></span><br><span class="line"><span class="string">"/etc/perl"</span></span><br><span class="line"><span class="string">"/etc/ca-certificates"</span></span><br><span class="line"><span class="string">"/etc/protocols"</span></span><br><span class="line"><span class="string">"/etc/ca-certificates.conf"</span></span><br><span class="line"><span class="string">"/etc/python2.7"</span></span><br><span class="line"><span class="string">"/etc/localtime"</span></span><br><span class="line"><span class="string">"/etc/xdg"</span></span><br><span class="line"><span class="string">"/etc/timezone"</span></span><br><span class="line"><span class="string">"/etc/mailcap.order"</span></span><br><span class="line"><span class="string">"/etc/emacs"</span></span><br><span class="line"><span class="string">"/etc/ssh"</span></span><br><span class="line"><span class="string">"/etc/magic.mime"</span></span><br><span class="line"><span class="string">"/etc/services"</span></span><br><span class="line"><span class="string">"/etc/ssl"</span></span><br><span class="line"><span class="string">"/etc/ldap"</span></span><br><span class="line"><span class="string">"/etc/rpc"</span></span><br><span class="line"><span class="string">"/etc/mime.types"</span></span><br><span class="line"><span class="string">"/etc/magic"</span></span><br><span class="line"><span class="string">"/etc/mailcap"</span></span><br><span class="line"><span class="string">"/etc/inputrc"</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;161-Multiply-all-the-elements-of-a-list&quot;&gt;&lt;a href=&quot;#161-Multiply-all-the-elements-of-a-list&quot; class=&quot;headerlink&quot; title=&quot;16
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(8)</title>
    <link href="http://www.dashen.tech/2021/09/09/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-8/"/>
    <id>http://www.dashen.tech/2021/09/09/Rust-vs-Go-常用语法对比-8/</id>
    <published>2021-09-09T11:43:58.000Z</published>
    <updated>2021-09-21T02:56:28.839Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="141-Iterate-in-sequence-over-two-lists"><a href="#141-Iterate-in-sequence-over-two-lists" class="headerlink" title="141. Iterate in sequence over two lists"></a>141. <font color="0c0a3e">Iterate in sequence over two lists</font></h3><blockquote><p>Iterate in sequence over the elements of the list items1 then items2. For each iteration print the element.</p></blockquote><p><em>依次迭代两个列表<br>依次迭代列表项1和项2的元素。每次迭代打印元素。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items1 := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">items2 := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items1 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items2 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> item1 = <span class="built_in">vec!</span>[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line">    <span class="keyword">let</span> item2 = <span class="built_in">vec!</span>[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item1.iter().chain(item2.iter()) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">"&#123;&#125; "</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1 2 3 a b c</code></p><p><br></p><h3 id="142-Hexadecimal-digits-of-an-integer"><a href="#142-Hexadecimal-digits-of-an-integer" class="headerlink" title="142. Hexadecimal digits of an integer"></a>142. <font color="0c0a3e">Hexadecimal digits of an integer</font></h3><blockquote><p>Assign to string s the hexadecimal representation (base 16) of integer x.<br>E.g. 999 -&gt; “3e7”</p></blockquote><p><em>将整数x的十六进制表示(16进制)赋给字符串s。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">int64</span>(<span class="number">999</span>)</span><br><span class="line">s := strconv.FormatInt(x, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3e7</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">999</span>)</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%x"</span>, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3e7</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:X&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:x&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>{:X} produces uppercase hex.<br>{:x} produces lowercase hex.</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3E7</span></span><br><span class="line"><span class="number">3e7</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="143-Iterate-alternatively-over-two-lists"><a href="#143-Iterate-alternatively-over-two-lists" class="headerlink" title="143. Iterate alternatively over two lists"></a>143. <font color="0c0a3e">Iterate alternatively over two lists</font></h3><blockquote><p>Iterate alternatively over the elements of the list items1 and items2. For each iteration, print the element.<br>Explain what happens if items1 and items2 have different size.</p></blockquote><p><em>交替迭代两个列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items1 := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br><span class="line">items2 := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(items1) || i &lt; <span class="built_in">len</span>(items2); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(items1) &#123;</span><br><span class="line">fmt.Println(items1[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(items2) &#123;</span><br><span class="line">fmt.Println(items2[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">A</span><br><span class="line">b</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> itertools;</span><br><span class="line"><span class="keyword">use</span> itertools::izip;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items1 = [<span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>];</span><br><span class="line">    <span class="keyword">let</span> items2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> izip!(&amp;items1, &amp;items2) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, pair.<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, pair.<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="144-Check-if-file-exists"><a href="#144-Check-if-file-exists" class="headerlink" title="144. Check if file exists"></a>144. <font color="0c0a3e">Check if file exists</font></h3><blockquote></blockquote><p>Set boolean b to true if file at path fp exists on filesystem; false otherwise.<br>Beware that you should never do this and then in the next instruction assume the result is still valid, this is a race condition on any multitasking OS.</p><p><em>检查文件是否存在</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fp := <span class="string">"foo.txt"</span></span><br><span class="line">_, err := os.Stat(fp)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(fp, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">fp = <span class="string">"bar.txt"</span></span><br><span class="line">_, err = os.Stat(fp)</span><br><span class="line">b = !os.IsNotExist(err)</span><br><span class="line">fmt.Println(fp, <span class="string">"exists:"</span>, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ioutil.WriteFile(<span class="string">"foo.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`abc`</span>), <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>There’s no specific existence check func in standard library, so we have to inspect an error return value.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo.txt exists: <span class="literal">true</span></span><br><span class="line">bar.txt exists: <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = <span class="string">"/etc/hosts"</span>;</span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(fp).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, fp, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fp = <span class="string">"/etc/kittens"</span>;</span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(fp).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, fp, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts: <span class="literal">true</span></span><br><span class="line">/etc/kittens: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="145-Print-log-line-with-datetime"><a href="#145-Print-log-line-with-datetime" class="headerlink" title="145. Print log line with datetime"></a>145. <font color="0c0a3e">Print log line with datetime</font></h3><blockquote><p>Print message msg, prepended by current date and time.<br>Explain what behavior is idiomatic: to stdout or stderr, and what the date format is.</p></blockquote><p><em>打印带时间的日志</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := <span class="string">"Hello, playground"</span></span><br><span class="line">log.Println(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The date is fixed in the past in the Playground, never mind.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.programming-idioms.org/idiom/145/print-log-line-with-date/1815/go</span></span><br></pre></td></tr></table></figure><p><code>2009/11/10 23:00:00 Hello, playground</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">"Hello"</span>;</span><br><span class="line">    eprintln!(<span class="string">"[&#123;&#125;] &#123;&#125;"</span>, humantime::format_rfc3339_seconds(std::time::SystemTime::now()), msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2021-07-17T07:14:03Z] Hello</code></p><p><br></p><h3 id="146-Convert-string-to-floating-point-number"><a href="#146-Convert-string-to-floating-point-number" class="headerlink" title="146. Convert string to floating point number"></a>146. <font color="0c0a3e">Convert string to floating point number</font></h3><blockquote><p>Extract floating point value f from its string representation s</p></blockquote><p><em>字符串转换为浮点型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"3.1415926535"</span></span><br><span class="line"></span><br><span class="line">f, err := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %v, err=%v\n"</span>, f, f, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// http://www.programming-idioms.org/idiom/146/convert-string-to-floating-point-number/1819/go</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><code>float64, 3.1415926535, err=&lt;nil&gt;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"3.14159265359"</span>;</span><br><span class="line">    <span class="keyword">let</span> f = s.parse::&lt;<span class="built_in">f32</span>&gt;().unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;² = &#123;&#125;"</span> , f, f * f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3.1415927² = 9.869605</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"3.14159265359"</span>;</span><br><span class="line">    <span class="keyword">let</span> f: <span class="built_in">f32</span> = s.parse().unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;² = &#123;&#125;"</span>, f, f * f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3.1415927² = 9.869605</code></p><p><br></p><h3 id="147-Remove-all-non-ASCII-characters"><a href="#147-Remove-all-non-ASCII-characters" class="headerlink" title="147. Remove all non-ASCII characters"></a>147. <font color="0c0a3e">Remove all non-ASCII characters</font></h3><blockquote><pre><code>Create string t from string s, keeping only ASCII characters</code></pre></blockquote><p><em>移除所有的非ASCII字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"dæmi : пример : příklad : thí dụ"</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[[:^ascii:]]"</span>)</span><br><span class="line">t := re.ReplaceAllLiteralString(s, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dmi :  : pklad : th d</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"unicode"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"5#∑∂ƒ∞645eyfu"</span></span><br><span class="line">t := strings.Map(<span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r &gt; unicode.MaxASCII &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>5#645eyfu</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"do👍ot"</span>.replace(|c: <span class="built_in">char</span>| !c.is_ascii(), <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doot</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"do👍ot"</span>.replace(|c: <span class="built_in">char</span>| !c.is_ascii(), <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doot</code></p><p><br></p><h3 id="148-Read-list-of-integers-from-stdin"><a href="#148-Read-list-of-integers-from-stdin" class="headerlink" title="148. Read list of integers from stdin"></a>148. <font color="0c0a3e">Read list of integers from stdin</font></h3><blockquote><p>Read a list of integer numbers from the standard input, until EOF.</p></blockquote><p><em>从stdin(标准输入)中读取整数列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ints []<span class="keyword">int</span></span><br><span class="line">s := bufio.NewScanner(osStdin)</span><br><span class="line">s.Split(bufio.ScanWords)</span><br><span class="line"><span class="keyword">for</span> s.Scan() &#123;</span><br><span class="line">i, err := strconv.Atoi(s.Text())</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ints = <span class="built_in">append</span>(ints, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := s.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ints)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// osStdin simulates os.Stdin</span></span><br><span class="line"><span class="keyword">var</span> osStdin = strings.NewReader(<span class="string">`</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">33  `</span>)</span><br></pre></td></tr></table></figure><p><code>[11 22 33]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;</span><br><span class="line">    io::&#123;<span class="keyword">self</span>, Read&#125;,</span><br><span class="line">    <span class="built_in">str</span>::FromStr,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dummy io::stdin</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">io_stdin</span></span>() -&gt; <span class="keyword">impl</span> Read &#123;</span><br><span class="line">    <span class="string">"123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">789"</span></span><br><span class="line">    .as_bytes()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> string = <span class="built_in">String</span>::new();</span><br><span class="line">    io_stdin().read_to_string(&amp;<span class="keyword">mut</span> string)?;</span><br><span class="line">    <span class="keyword">let</span> result = string</span><br><span class="line">        .lines()</span><br><span class="line">        .map(<span class="built_in">i32</span>::from_str)</span><br><span class="line">        .collect::&lt;<span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;_&gt;, _&gt;&gt;();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, result);</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Ok</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">456</span>,</span><br><span class="line">        <span class="number">789</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="150-Remove-trailing-slash"><a href="#150-Remove-trailing-slash" class="headerlink" title="150. Remove trailing slash"></a>150. <font color="0c0a3e">Remove trailing slash</font></h3><blockquote><p>Remove last character from string p, if this character is a slash /.</p></blockquote><p><em>去除末尾的 /</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := <span class="string">"/usr/bin/"</span></span><br><span class="line"></span><br><span class="line">p = strings.TrimSuffix(p, <span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/usr/bin</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="built_in">String</span>::from(<span class="string">"Dddd/"</span>);</span><br><span class="line">    <span class="keyword">if</span> p.ends_with(<span class="string">'/'</span>) &#123;</span><br><span class="line">        p.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dddd</code></p><p><br></p><h3 id="151-Remove-string-trailing-path-separator"><a href="#151-Remove-string-trailing-path-separator" class="headerlink" title="151. Remove string trailing path separator"></a>151. <font color="0c0a3e">Remove string trailing path separator</font></h3><blockquote><p>Remove last character from string p, if this character is the file path separator of current platform.<br>Note that this also transforms unix root path “/“ into the empty string!</p></blockquote><p><em>删除字符串尾部路径分隔符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := somePath()</span><br><span class="line">fmt.Println(p)</span><br><span class="line"></span><br><span class="line">sep := fmt.Sprintf(<span class="string">"%c"</span>, os.PathSeparator)</span><br><span class="line">p = strings.TrimSuffix(p, sep)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">somePath</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">dir, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">p := fmt.Sprintf(<span class="string">"%s%c%s%c"</span>, dir, os.PathSeparator, <span class="string">"foobar"</span>, os.PathSeparator)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="number">067319278</span>/foobar/</span><br><span class="line">/tmp/<span class="number">067319278</span>/foobar</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := somePath()</span><br><span class="line">fmt.Println(p)</span><br><span class="line"></span><br><span class="line">sep := fmt.Sprintf(<span class="string">"%c"</span>, filepath.Separator)</span><br><span class="line">p = strings.TrimSuffix(p, sep)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">somePath</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">dir, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">p := fmt.Sprintf(<span class="string">"%s%c%s%c"</span>, dir, os.PathSeparator, <span class="string">"foobar"</span>, os.PathSeparator)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="number">065654753</span>/foobar/</span><br><span class="line">/tmp/<span class="number">065654753</span>/foobar</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"/tmp/"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">if</span> ::std::path::is_separator(p.chars().last().unwrap()) &#123;</span><br><span class="line">            &amp;p[<span class="number">0</span>..p.len() - <span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">if</span> ::std::path::is_separator(p.chars().last().unwrap()) &#123;</span><br><span class="line">            &amp;p[<span class="number">0</span>..p.len() - <span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp</span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="string">"/tmp/"</span>;</span><br><span class="line"></span><br><span class="line">        p = p.strip_suffix(std::path::is_separator).unwrap_or(p);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line">        p = p.strip_suffix(std::path::is_separator).unwrap_or(p);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp</span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><p><br></p><h3 id="152-Turn-a-character-into-a-string"><a href="#152-Turn-a-character-into-a-string" class="headerlink" title="152. Turn a character into a string"></a>152. <font color="0c0a3e">Turn a character into a string</font></h3><blockquote><p>Create string s containing only the character c.</p></blockquote><p><em>将字符转换成字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">rune</span> = os.PathSeparator</span><br><span class="line">fmt.Printf(<span class="string">"%c \n"</span>, c)</span><br><span class="line"></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%c"</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"%#v \n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ </span><br><span class="line"><span class="string">"/"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">'a'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s = c.to_string();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a</code></p><p><br></p><h3 id="153-Concatenate-string-with-integer"><a href="#153-Concatenate-string-with-integer" class="headerlink" title="153. Concatenate string with integer"></a>153. <font color="0c0a3e">Concatenate string with integer</font></h3><blockquote><p>Create string t as the concatenation of string s and integer i.</p></blockquote><p><em>连接字符串和整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Hello"</span></span><br><span class="line">i := <span class="number">123</span></span><br><span class="line"></span><br><span class="line">t := fmt.Sprintf(<span class="string">"%s%d"</span>, s, i)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hello123</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Foo"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;&#123;&#125;"</span>, s, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span> , t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Foo1</code></p><p><br></p><h3 id="154-Halfway-between-two-hex-color-codes"><a href="#154-Halfway-between-two-hex-color-codes" class="headerlink" title="154. Halfway between two hex color codes"></a>154. <font color="0c0a3e">Halfway between two hex color codes</font></h3><blockquote><p>Find color c, the average between colors c1, c2.<br>c, c1, c2 are strings of hex color codes: 7 chars, beginning with a number sign # .<br>Assume linear computations, ignore gamma corrections.</p></blockquote><p><em>求两个十六进制颜色代码的中间值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For concision, halfway assume valid inputs.</span></span><br><span class="line"><span class="comment">// Caller must have explicitly checked that c1, c2 are well-formed color codes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">halfway</span><span class="params">(c1, c2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">r1, _ := strconv.ParseInt(c1[<span class="number">1</span>:<span class="number">3</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">r2, _ := strconv.ParseInt(c2[<span class="number">1</span>:<span class="number">3</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">r := (r1 + r2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">g1, _ := strconv.ParseInt(c1[<span class="number">3</span>:<span class="number">5</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">g2, _ := strconv.ParseInt(c2[<span class="number">3</span>:<span class="number">5</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">g := (g1 + g2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">b1, _ := strconv.ParseInt(c1[<span class="number">5</span>:<span class="number">7</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">b2, _ := strconv.ParseInt(c2[<span class="number">5</span>:<span class="number">7</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">b := (b1 + b2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c := fmt.Sprintf(<span class="string">"#%02X%02X%02X"</span>, r, g, b)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := <span class="string">"#15293E"</span></span><br><span class="line">c2 := <span class="string">"#012549"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c1); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c1, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c2); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c2, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := halfway(c1, c2)</span><br><span class="line">fmt.Println(<span class="string">"The average of"</span>, c1, <span class="string">"and"</span>, c2, <span class="string">"is"</span>, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFormat</span><span class="params">(color <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(color) != <span class="number">7</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors have exactly 7 chars"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> color[<span class="number">0</span>] != <span class="string">'#'</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors start with #"</span>)</span><br><span class="line">&#125;</span><br><span class="line">isNotDigit := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c &lt; <span class="string">'a'</span> || c &gt; <span class="string">'f'</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> strings.IndexFunc(strings.ToLower(color[<span class="number">1</span>:]), isNotDigit) != <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Forbidden char"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>The average of #15293E and #012549 is #0B2743</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For concision, halfway assume valid inputs.</span></span><br><span class="line"><span class="comment">// Caller must have explicitly checked that c1, c2 are well-formed color codes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">halfway</span><span class="params">(c1, c2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">7</span>]<span class="keyword">byte</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="string">'#'</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">sub1 := c1[<span class="number">1</span>+<span class="number">2</span>*i : <span class="number">3</span>+<span class="number">2</span>*i]</span><br><span class="line">sub2 := c2[<span class="number">1</span>+<span class="number">2</span>*i : <span class="number">3</span>+<span class="number">2</span>*i]</span><br><span class="line">v1, _ := strconv.ParseInt(sub1, <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">v2, _ := strconv.ParseInt(sub2, <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">v := (v1 + v2) / <span class="number">2</span></span><br><span class="line">sub := fmt.Sprintf(<span class="string">"%02X"</span>, v)</span><br><span class="line"><span class="built_in">copy</span>(buf[<span class="number">1</span>+<span class="number">2</span>*i:<span class="number">3</span>+<span class="number">2</span>*i], sub)</span><br><span class="line">&#125;</span><br><span class="line">c := <span class="keyword">string</span>(buf[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := <span class="string">"#15293E"</span></span><br><span class="line">c2 := <span class="string">"#012549"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c1); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c1, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c2); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c2, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := halfway(c1, c2)</span><br><span class="line">fmt.Println(<span class="string">"The average of"</span>, c1, <span class="string">"and"</span>, c2, <span class="string">"is"</span>, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFormat</span><span class="params">(color <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(color) != <span class="number">7</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors have exactly 7 chars"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> color[<span class="number">0</span>] != <span class="string">'#'</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors start with #"</span>)</span><br><span class="line">&#125;</span><br><span class="line">isNotDigit := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c &lt; <span class="string">'a'</span> || c &gt; <span class="string">'f'</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> strings.IndexFunc(strings.ToLower(color[<span class="number">1</span>:]), isNotDigit) != <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Forbidden char"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>The average of #15293E and #012549 is #0B2743</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">str</span>::FromStr;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Colour</span></span> &#123;</span><br><span class="line">    r: <span class="built_in">u8</span>,</span><br><span class="line">    g: <span class="built_in">u8</span>,</span><br><span class="line">    b: <span class="built_in">u8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ColourError</span></span> &#123;</span><br><span class="line">    MissingHash,</span><br><span class="line">    InvalidRed,</span><br><span class="line">    InvalidGreen,</span><br><span class="line">    InvalidBlue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Colour &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"#&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;"</span>, <span class="keyword">self</span>.r, <span class="keyword">self</span>.g, <span class="keyword">self</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> FromStr <span class="keyword">for</span> Colour &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Err</span></span> = ColourError;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from_str</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="keyword">Self</span>, Self::<span class="literal">Err</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> !s.starts_with(<span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="literal">Err</span>(ColourError::MissingHash)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">Ok</span>(Colour &#123;</span><br><span class="line">                r: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">1</span>..<span class="number">3</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidRed)?,</span><br><span class="line">                g: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">3</span>..<span class="number">5</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidGreen)?,</span><br><span class="line">                b: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">5</span>..<span class="number">7</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidBlue)?</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">mid_colour</span></span>(c1: &amp;<span class="built_in">str</span>, c2: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">String</span>, ColourError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> c1 = c1.parse::&lt;Colour&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> c2 = c2.parse::&lt;Colour&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> c = Colour &#123;</span><br><span class="line">        r: (((c1.r <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.r <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span>,</span><br><span class="line">        g: (((c1.g <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.g <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span>,</span><br><span class="line">        b: (((c1.b <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.b <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="literal">Ok</span>(<span class="built_in">format!</span>(<span class="string">"&#123;&#125;"</span>, c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, mid_colour(<span class="string">"#15293E"</span>, <span class="string">"#012549"</span>).unwrap())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>#0b2743</code></p><p><br></p><h3 id="155-Delete-file"><a href="#155-Delete-file" class="headerlink" title="155. Delete file"></a>155. <font color="0c0a3e">Delete file</font></h3><blockquote><p>Delete from filesystem the file having path filepath.</p></blockquote><p><em>删除文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, filepath := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"/tmp/foo.txt"</span>,</span><br><span class="line"><span class="string">"/tmp/bar.txt"</span>,</span><br><span class="line"><span class="string">"/tmp/foo.txt"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">err := os.Remove(filepath)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Removed"</span>, filepath)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/foo.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`abc`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Removed /tmp/foo.txt</span><br><span class="line">remove /tmp/bar.txt: no such file or directory</span><br><span class="line">remove /tmp/foo.txt: no such file or directory</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> filepath = <span class="string">"/tmp/abc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Creating &#123;&#125;"</span>, filepath);</span><br><span class="line">    <span class="keyword">let</span> _file = fs::File::create(filepath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(filepath).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, filepath, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Deleting &#123;&#125;"</span>, filepath);</span><br><span class="line">    <span class="keyword">let</span> r = fs::remove_file(filepath);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(filepath).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, filepath, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Creating /tmp/abc</span><br><span class="line">/tmp/abc exists: <span class="literal">true</span></span><br><span class="line">Deleting /tmp/abc</span><br><span class="line"><span class="literal">Ok</span>(())</span><br><span class="line">/tmp/abc exists: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="156-Format-integer-with-zero-padding"><a href="#156-Format-integer-with-zero-padding" class="headerlink" title="156. Format integer with zero-padding"></a>156. <font color="0c0a3e">Format integer with zero-padding</font></h3><blockquote><p>Assign to string s the value of integer i in 3 decimal digits. Pad with zeros if i &lt; 100. Keep all digits if i ≥ 1000.</p></blockquote><p><em>用零填充格式化整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">8</span>,</span><br><span class="line"><span class="number">64</span>,</span><br><span class="line"><span class="number">256</span>,</span><br><span class="line"><span class="number">2048</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%03d"</span>, i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000</span></span><br><span class="line"><span class="number">008</span></span><br><span class="line"><span class="number">064</span></span><br><span class="line"><span class="number">256</span></span><br><span class="line"><span class="number">2048</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:03&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:03&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="157-Declare-constant-string"><a href="#157-Declare-constant-string" class="headerlink" title="157. Declare constant string"></a>157. <font color="0c0a3e">Declare constant string</font></h3><blockquote><p>Initialize a constant planet with string value “Earth”.</p></blockquote><p><em>声明常量字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> planet = <span class="string">"Earth"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"We live on planet"</span>, planet)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>We live on planet Earth</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> PLANET: &amp;<span class="built_in">str</span> = <span class="string">"Earth"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, PLANET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Earth</code></p><p><br></p><h3 id="158-Random-sublist"><a href="#158-Random-sublist" class="headerlink" title="158. Random sublist"></a>158. <font color="0c0a3e">Random sublist</font></h3><blockquote><p>Create a new list y from randomly picking exactly k elements from list x.<br></p></blockquote><p><strong>It is assumed that x has at least k elements.<br>Each element must have same probability to be picked.<br>Each element from x must be picked at most once.<br>Explain if the original ordering is preserved or not.</strong></p><p><em>随机子列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">x := []T&#123;<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Carol"</span>, <span class="string">"Dan"</span>, <span class="string">"Eve"</span>, <span class="string">"Frank"</span>, <span class="string">"Grace"</span>, <span class="string">"Heidi"</span>&#125;</span><br><span class="line">k := <span class="number">4</span></span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, k)</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm[:k] &#123;</span><br><span class="line">y[i] = x[v]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;Frank&quot; &quot;Eve&quot; &quot;Carol&quot; &quot;Grace&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::*;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> rng = &amp;<span class="keyword">mut</span> rand::thread_rng();</span><br><span class="line"><span class="keyword">let</span> y = x.choose_multiple(&amp;<span class="keyword">mut</span> rng, k).cloned().collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="159-Trie"><a href="#159-Trie" class="headerlink" title="159. Trie"></a>159. <font color="0c0a3e">Trie</font></h3><blockquote><p>Define a Trie data structure, where entries have an associated value.<br>(Not all nodes are entries)</p></blockquote><p><em>基数树</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">c        <span class="keyword">rune</span></span><br><span class="line">children <span class="keyword">map</span>[<span class="keyword">rune</span>]*Trie</span><br><span class="line">isLeaf   <span class="keyword">bool</span></span><br><span class="line">value    V</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> V <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := NewTrie(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> s, v := <span class="keyword">range</span> <span class="keyword">map</span>[<span class="keyword">string</span>]V&#123;</span><br><span class="line"><span class="string">"to"</span>:  <span class="number">7</span>,</span><br><span class="line"><span class="string">"tea"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"ted"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">"ten"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"A"</span>:   <span class="number">15</span>,</span><br><span class="line"><span class="string">"i"</span>:   <span class="number">11</span>,</span><br><span class="line"><span class="string">"in"</span>:  <span class="number">5</span>,</span><br><span class="line"><span class="string">"inn"</span>: <span class="number">9</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">t.insert(s, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(t.startsWith(<span class="string">"te"</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTrie</span><span class="params">(c <span class="keyword">rune</span>)</span> *<span class="title">Trie</span></span> &#123;</span><br><span class="line">t := <span class="built_in">new</span>(Trie)</span><br><span class="line">t.c = c</span><br><span class="line">t.children = <span class="keyword">map</span>[<span class="keyword">rune</span>]*Trie&#123;&#125;</span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">insert</span><span class="params">(s <span class="keyword">string</span>, value V)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line">t.isLeaf = <span class="literal">true</span></span><br><span class="line">t.value = value</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c, tail := cut(s)</span><br><span class="line">child, exists := t.children[c]</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line">child = NewTrie(c)</span><br><span class="line">t.children[c] = child</span><br><span class="line">&#125;</span><br><span class="line">child.insert(tail, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">startsWith</span><span class="params">(p <span class="keyword">string</span>, accu <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> t.isLeaf &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, accu)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> c, child := <span class="keyword">range</span> t.children &#123;</span><br><span class="line">rec := child.startsWith(<span class="string">""</span>, accu+<span class="keyword">string</span>(c))</span><br><span class="line">result = <span class="built_in">append</span>(result, rec...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">c, tail := cut(p)</span><br><span class="line"><span class="keyword">return</span> t.children[c].startsWith(tail, accu+<span class="keyword">string</span>(c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cut</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(head <span class="keyword">rune</span>, tail <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">r, size := utf8.DecodeRuneInString(s)</span><br><span class="line"><span class="keyword">return</span> r, s[size:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[ten tea ted]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span> &#123;</span><br><span class="line">    val: <span class="built_in">String</span>,</span><br><span class="line">    nodes: <span class="built_in">Vec</span>&lt;Trie&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="160-Detect-if-32-bit-or-64-bit-architecture"><a href="#160-Detect-if-32-bit-or-64-bit-architecture" class="headerlink" title="160. Detect if 32-bit or 64-bit architecture"></a>160. <font color="0c0a3e">Detect if 32-bit or 64-bit architecture</font></h3><blockquote><p>Execute f32() if platform is 32-bit, or f64() if platform is 64-bit.<br>This can be either a compile-time condition (depending on target) or a runtime detection.</p></blockquote><p><em>检测是32位还是64位架构</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strconv.IntSize == <span class="number">32</span> &#123;</span><br><span class="line">f32()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> strconv.IntSize == <span class="number">64</span> &#123;</span><br><span class="line">f64()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f32</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I am 32-bit"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f64</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I am 64-bit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>I am 64-bit</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> std::mem::size_of::&lt;&amp;<span class="built_in">char</span>&gt;() &#123;</span><br><span class="line">        <span class="number">4</span> =&gt; <span class="built_in">f32</span>(),</span><br><span class="line">        <span class="number">8</span> =&gt; <span class="built_in">f64</span>(),</span><br><span class="line">        _ =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f32</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I am 32-bit"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f64</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I am 64-bit"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>I am 64-bit</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;141-Iterate-in-sequence-over-two-lists&quot;&gt;&lt;a href=&quot;#141-Iterate-in-sequence-over-two-lists&quot; class=&quot;headerlink&quot; title=&quot;141.
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(7)</title>
    <link href="http://www.dashen.tech/2021/09/08/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-7/"/>
    <id>http://www.dashen.tech/2021/09/08/Rust-vs-Go-常用语法对比-7/</id>
    <published>2021-09-08T11:43:55.000Z</published>
    <updated>2021-09-21T02:56:20.485Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="121-UDP-listen-and-read"><a href="#121-UDP-listen-and-read" class="headerlink" title="121. UDP listen and read"></a>121. <font color="0c0a3e">UDP listen and read</font></h3><blockquote><p> Listen UDP traffic on port p and read 1024 bytes into buffer b.</p></blockquote><p><em>听端口p上的UDP流量，并将1024字节读入缓冲区b。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"net"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line">ServerAddr,err := net.ResolveUDPAddr(<span class="string">"udp"</span>,p)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">ServerConn, err := net.ListenUDP(<span class="string">"udp"</span>, ServerAddr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> ServerConn.Close()</span><br><span class="line">n,addr,err := ServerConn.ReadFromUDP(b[:<span class="number">1024</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">1024</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Only %d bytes could be read."</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::net::UdpSocket;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> b = [<span class="number">0</span> <span class="keyword">as</span> <span class="built_in">u8</span>; <span class="number">1024</span>];</span><br><span class="line"><span class="keyword">let</span> sock = UdpSocket::bind((<span class="string">"localhost"</span>, p)).unwrap();</span><br><span class="line">sock.recv_from(&amp;<span class="keyword">mut</span> b).unwrap();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="122-Declare-enumeration"><a href="#122-Declare-enumeration" class="headerlink" title="122. Declare enumeration"></a>122. <font color="0c0a3e">Declare enumeration</font></h3><blockquote><p>Create an enumerated type Suit with 4 possible values SPADES, HEARTS, DIAMONDS, CLUBS.</p></blockquote><p><em>声明枚举值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Suit <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">  Spades Suit = <span class="literal">iota</span></span><br><span class="line">  Hearts</span><br><span class="line">  Diamonds</span><br><span class="line">  Clubs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Hearts has type %T and value %d"</span>, Hearts, Hearts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hearts has type main.Suit and value 1</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Suit</span></span> &#123;</span><br><span class="line">    Spades,</span><br><span class="line">    Hearts,</span><br><span class="line">    Diamonds,</span><br><span class="line">    Clubs,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> _x = Suit::Diamonds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="123-Assert-condition"><a href="#123-Assert-condition" class="headerlink" title="123.  Assert condition"></a>123. <font color="0c0a3e"> Assert condition</font></h3><blockquote><p>Verify that predicate isConsistent returns true, otherwise report assertion violation.<br>Explain if the assertion is executed even in production environment or not.</p></blockquote><p><em>断言条件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// The code may look fine, but</span></span><br><span class="line"><span class="comment">// obviously we have a bug.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">salary = <span class="number">65000</span></span><br><span class="line">employees = <span class="number">120000</span></span><br><span class="line">totalPayroll = salary * employees</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !isConsistent() &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">"State consistency violated"</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Everything fine"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> salary <span class="keyword">int32</span></span><br><span class="line"><span class="keyword">var</span> employees <span class="keyword">int32</span></span><br><span class="line"><span class="keyword">var</span> totalPayroll <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isConsistent</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> salary &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">employees &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">totalPayroll &gt;= <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// i is odd</span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">23687</span>;</span><br><span class="line">    <span class="keyword">let</span> ii = i * i;</span><br><span class="line">    <span class="keyword">let</span> is_consistent = ii % <span class="number">2</span> == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// i*i must be odd</span></span><br><span class="line">    <span class="built_in">assert!</span>(is_consistent);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Cool."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Cool.</code></p><p><br></p><h3 id="124-Binary-search-for-a-value-in-sorted-array"><a href="#124-Binary-search-for-a-value-in-sorted-array" class="headerlink" title="124.  Binary search for a value in sorted array"></a>124. <font color="0c0a3e"> Binary search for a value in sorted array</font></h3><blockquote><p>Write function binarySearch which returns the index of an element having value x in sorted array a, or -1 if no such element.</p></blockquote><p><em>排序数组中值的二分搜索法</em></p><p><strong>二分查找</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">(a []T, x T)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">imin, imax := <span class="number">0</span>, <span class="built_in">len</span>(a)<span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> imin &lt;= imax &#123;</span><br><span class="line">imid := (imin + imax) / <span class="number">2</span></span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> a[imid] == x:</span><br><span class="line"><span class="keyword">return</span> imid</span><br><span class="line"><span class="keyword">case</span> a[imid] &lt; x:</span><br><span class="line">imin = imid + <span class="number">1</span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">imax = imid - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []T&#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x := T(<span class="number">-5</span>); x &lt;= <span class="number">15</span>; x++ &#123;</span><br><span class="line">i := binarySearch(a, x)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">-1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"not found"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"found at index"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">(a []<span class="keyword">int</span>, x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">i := sort.SearchInts(a, x)</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(a) &amp;&amp; a[i] == x &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">-5</span>; x &lt;= <span class="number">15</span>; x++ &#123;</span><br><span class="line">i := binarySearch(a, x)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">-1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"not found"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"found at index"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">binarySearch</span><span class="params">(a []T, x T)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">f := <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> a[i] &gt;= x &#125;</span><br><span class="line">i := sort.Search(<span class="built_in">len</span>(a), f)</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(a) &amp;&amp; a[i] == x &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []T&#123;<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"><span class="keyword">for</span> x := T(<span class="number">-5</span>); x &lt;= <span class="number">15</span>; x++ &#123;</span><br><span class="line">i := binarySearch(a, x)</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">-1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"not found"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Value"</span>, x, <span class="string">"found at index"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="125-Measure-function-call-duration"><a href="#125-Measure-function-call-duration" class="headerlink" title="125. Measure function call duration"></a>125. <font color="0c0a3e">Measure function call duration</font></h3><blockquote><p>measure the duration t, in nano seconds, of a call to the function foo. Print this duration.</p></blockquote><p><em>函数调用时间</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1 := time.Now()</span><br><span class="line">foo()</span><br><span class="line">t := time.Since(t1)</span><br><span class="line">ns := <span class="keyword">int64</span>(t / time.Nanosecond)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note that the clock is fixed in the Playground, so the resulting duration is always zero</span></span><br><span class="line">fmt.Printf(<span class="string">"%dns\n"</span>, ns)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"><span class="number">0</span>ns</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t1 := time.Now()</span><br><span class="line">foo()</span><br><span class="line">t := time.Since(t1)</span><br><span class="line">ns := t.Nanoseconds()</span><br><span class="line">fmt.Printf(<span class="string">"%dns\n"</span>, ns)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line"><span class="number">0</span>ns</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::&#123;Duration, Instant&#125;;</span><br><span class="line"><span class="keyword">let</span> start = Instant::now();</span><br><span class="line">foo();</span><br><span class="line"><span class="keyword">let</span> duration = start.elapsed();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, duration);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="126-Multiple-return-values"><a href="#126-Multiple-return-values" class="headerlink" title="126. Multiple return values"></a>126. <font color="0c0a3e">Multiple return values</font></h3><blockquote><pre><code>Write a function foo that returns a string and a boolean value.</code></pre></blockquote><p><em>多个返回值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s, b := foo()</span><br><span class="line">fmt.Println(s, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span> <span class="params">(<span class="keyword">string</span>, <span class="keyword">bool</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Too good to be"</span>, <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Too good to be true</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>() -&gt; (<span class="built_in">String</span>, <span class="built_in">bool</span>) &#123;</span><br><span class="line">    (<span class="built_in">String</span>::from(<span class="string">"bar"</span>), <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, foo());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(&quot;bar&quot;, true)</code></p><p><br></p><h3 id="128-Breadth-first-traversing-of-a-tree"><a href="#128-Breadth-first-traversing-of-a-tree" class="headerlink" title="128. Breadth-first traversing of a tree"></a>128. <font color="0c0a3e">Breadth-first traversing of a tree</font></h3><blockquote><p>Call a function f on every node of a tree, in breadth-first prefix order</p></blockquote><p><em>树的广度优先遍历</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(root *Tree)</span> <span class="title">Bfs</span><span class="params">(f <span class="keyword">func</span>(*Tree)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">queue := []*Tree&#123;root&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">t := queue[<span class="number">0</span>]</span><br><span class="line">queue = queue[<span class="number">1</span>:]</span><br><span class="line">f(t)</span><br><span class="line">queue = <span class="built_in">append</span>(queue, t.Children...)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key      key</span><br><span class="line">Deco     value</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Tree)</span> <span class="title">AddChild</span><span class="params">(x key, v value)</span></span> &#123;</span><br><span class="line">child := &amp;Tree&#123;Key: x, Deco: v&#125;</span><br><span class="line">this.Children = <span class="built_in">append</span>(this.Children, child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NodePrint</span><span class="params">(node *Tree)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v (%v)\n"</span>, node.Key, node.Deco)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := &amp;Tree&#123;Key: <span class="string">"World"</span>, Deco: <span class="string">"Our planet"</span>&#125;</span><br><span class="line">tree.AddChild(<span class="string">"Europe"</span>, <span class="string">"A continent"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Germany"</span>, <span class="string">"A country"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Ireland"</span>, <span class="string">"A country"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Mediterranean Sea"</span>, <span class="string">"A sea"</span>)</span><br><span class="line">tree.AddChild(<span class="string">"Asia"</span>, <span class="string">"A continent"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Japan"</span>, <span class="string">"A country"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Thailand"</span>, <span class="string">"A country"</span>)</span><br><span class="line"></span><br><span class="line">tree.Bfs(NodePrint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">World (Our planet)</span><br><span class="line">Europe (A continent)</span><br><span class="line">Asia (A continent)</span><br><span class="line">Germany (A country)</span><br><span class="line">Ireland (A country)</span><br><span class="line">Mediterranean Sea (A sea)</span><br><span class="line">Japan (A country)</span><br><span class="line">Thailand (A country)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::VecDeque;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span>&lt;V&gt; &#123;</span><br><span class="line">    children: <span class="built_in">Vec</span>&lt;Tree&lt;V&gt;&gt;,</span><br><span class="line">    value: V</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;V&gt; Tree&lt;V&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bfs</span></span>(&amp;<span class="keyword">self</span>, f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(&amp;V)) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> q = VecDeque::new();</span><br><span class="line">        q.push_back(<span class="keyword">self</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">let</span> <span class="literal">Some</span>(t) = q.pop_front() &#123;</span><br><span class="line">            (f)(&amp;t.value);</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> &amp;t.children &#123;</span><br><span class="line">                q.push_back(child);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t = Tree &#123;</span><br><span class="line">        children: <span class="built_in">vec!</span>[</span><br><span class="line">            Tree &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[</span><br><span class="line">                    Tree &#123; children: <span class="built_in">vec!</span>[], value: <span class="number">5</span> &#125;,</span><br><span class="line">                    Tree &#123; children: <span class="built_in">vec!</span>[], value: <span class="number">6</span> &#125;</span><br><span class="line">                ],</span><br><span class="line">                value: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            Tree &#123; children: <span class="built_in">vec!</span>[], value: <span class="number">3</span> &#125;,</span><br><span class="line">            Tree &#123; children: <span class="built_in">vec!</span>[], value: <span class="number">4</span> &#125;,</span><br><span class="line">        ],</span><br><span class="line">        value: <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    t.bfs(|v| <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="129-Breadth-first-traversing-in-a-graph"><a href="#129-Breadth-first-traversing-in-a-graph" class="headerlink" title="129. Breadth-first traversing in a graph"></a>129. <font color="0c0a3e">Breadth-first traversing in a graph</font></h3><blockquote><p>Call a function f on every vertex accessible from vertex start, in breadth-first prefix order</p></blockquote><p><em>图的广度优先遍历</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(start *Vertex)</span> <span class="title">Bfs</span><span class="params">(f <span class="keyword">func</span>(*Vertex)</span>)</span> &#123;</span><br><span class="line">queue := []*Vertex&#123;start&#125;</span><br><span class="line">seen := <span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span>&#123;start: <span class="literal">true</span>&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(queue) &gt; <span class="number">0</span> &#123;</span><br><span class="line">v := queue[<span class="number">0</span>]</span><br><span class="line">queue = queue[<span class="number">1</span>:]</span><br><span class="line">f(v)</span><br><span class="line"><span class="keyword">for</span> next, isEdge := <span class="keyword">range</span> v.Neighbours &#123;</span><br><span class="line"><span class="keyword">if</span> isEdge &amp;&amp; !seen[next] &#123;</span><br><span class="line">queue = <span class="built_in">append</span>(queue, next)</span><br><span class="line">seen[next] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Id         <span class="keyword">int</span></span><br><span class="line">Label      <span class="keyword">string</span></span><br><span class="line">Neighbours <span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Graph []*Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewVertex</span><span class="params">(id <span class="keyword">int</span>, label <span class="keyword">string</span>)</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Vertex&#123;</span><br><span class="line">Id:         id,</span><br><span class="line">Label:      label,</span><br><span class="line">Neighbours: <span class="built_in">make</span>(<span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">AddNeighbour</span><span class="params">(w *Vertex)</span></span> &#123;</span><br><span class="line">v.Neighbours[w] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VertexPrint</span><span class="params">(v *Vertex)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v (%v)\n"</span>, v.Id, v.Label)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Some cities</span></span><br><span class="line">london := NewVertex(<span class="number">0</span>, <span class="string">"London"</span>)</span><br><span class="line">ny := NewVertex(<span class="number">1</span>, <span class="string">"New York City"</span>)</span><br><span class="line">berlin := NewVertex(<span class="number">2</span>, <span class="string">"Berlin"</span>)</span><br><span class="line">paris := NewVertex(<span class="number">3</span>, <span class="string">"Paris"</span>)</span><br><span class="line">tokyo := NewVertex(<span class="number">4</span>, <span class="string">"Tokyo"</span>)</span><br><span class="line"></span><br><span class="line">g := Graph&#123;</span><br><span class="line">london,</span><br><span class="line">ny,</span><br><span class="line">berlin,</span><br><span class="line">paris,</span><br><span class="line">tokyo,</span><br><span class="line">&#125;</span><br><span class="line">_ = g</span><br><span class="line"></span><br><span class="line">london.AddNeighbour(paris)</span><br><span class="line">london.AddNeighbour(ny)</span><br><span class="line">ny.AddNeighbour(london)</span><br><span class="line">ny.AddNeighbour(paris)</span><br><span class="line">ny.AddNeighbour(tokyo)</span><br><span class="line">tokyo.AddNeighbour(paris)</span><br><span class="line">paris.AddNeighbour(tokyo)</span><br><span class="line">paris.AddNeighbour(berlin)</span><br><span class="line"></span><br><span class="line">london.Bfs(VertexPrint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> (London)</span><br><span class="line"><span class="number">3</span> (Paris)</span><br><span class="line"><span class="number">1</span> (New York City)</span><br><span class="line"><span class="number">2</span> (Berlin)</span><br><span class="line"><span class="number">4</span> (Tokyo)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::&#123;Rc, Weak&#125;;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span>&lt;V&gt; &#123;</span><br><span class="line">    value: V,</span><br><span class="line">    neighbours: <span class="built_in">Vec</span>&lt;Weak&lt;RefCell&lt;Vertex&lt;V&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">RcVertex</span></span>&lt;V&gt; = Rc&lt;RefCell&lt;Vertex&lt;V&gt;&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span>&lt;V&gt; &#123;</span><br><span class="line">    vertices: <span class="built_in">Vec</span>&lt;RcVertex&lt;V&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;V&gt; Graph&lt;V&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        Graph &#123; vertices: <span class="built_in">vec!</span>[] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new_vertex</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, value: V) -&gt; RcVertex&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.add_vertex(Vertex &#123; value, neighbours: <span class="built_in">Vec</span>::new() &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_vertex</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, v: Vertex&lt;V&gt;) -&gt; RcVertex&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> v = Rc::new(RefCell::new(v));</span><br><span class="line">        <span class="keyword">self</span>.vertices.push(Rc::clone(&amp;v));</span><br><span class="line">        v</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_edge</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, v1: &amp;RcVertex&lt;V&gt;, v2: &amp;RcVertex&lt;V&gt;) &#123;</span><br><span class="line">        v1.borrow_mut().neighbours.push(Rc::downgrade(&amp;v2));</span><br><span class="line">        v2.borrow_mut().neighbours.push(Rc::downgrade(&amp;v1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bft</span></span>(start: RcVertex&lt;V&gt;, f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(&amp;V)) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> q = <span class="built_in">vec!</span>[start];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> i &lt; q.len() &#123;</span><br><span class="line">            <span class="keyword">let</span> v = Rc::clone(&amp;q[i]);</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">            (f)(&amp;v.borrow().value);</span><br><span class="line">            <span class="keyword">for</span> n <span class="keyword">in</span> &amp;v.borrow().neighbours &#123;</span><br><span class="line">                <span class="keyword">let</span> n = n.upgrade().expect(<span class="string">"Invalid neighbour"</span>);</span><br><span class="line">                <span class="keyword">if</span> q.iter().all(|v| v.as_ptr() != n.as_ptr()) &#123;</span><br><span class="line">                    q.push(n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> g = Graph::new();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> v1 = g.new_vertex(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> v2 = g.new_vertex(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> v3 = g.new_vertex(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> v4 = g.new_vertex(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> v5 = g.new_vertex(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    g.add_edge(&amp;v1, &amp;v2);</span><br><span class="line">    g.add_edge(&amp;v1, &amp;v3);</span><br><span class="line">    g.add_edge(&amp;v1, &amp;v4);</span><br><span class="line">    g.add_edge(&amp;v2, &amp;v5);</span><br><span class="line">    g.add_edge(&amp;v3, &amp;v4);</span><br><span class="line">    g.add_edge(&amp;v4, &amp;v5);</span><br><span class="line">    </span><br><span class="line">    Graph::bft(v1, |v| <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="130-Depth-first-traversing-in-a-graph"><a href="#130-Depth-first-traversing-in-a-graph" class="headerlink" title="130. Depth-first traversing in a graph"></a>130. <font color="0c0a3e">Depth-first traversing in a graph</font></h3><blockquote><p>Call a function f on every vertex accessible for vertex v, in depth-first prefix order</p></blockquote><p><em>图的深度优先遍历</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">Dfs</span><span class="params">(f <span class="keyword">func</span>(*Vertex)</span>, <span class="title">seen</span> <span class="title">map</span>[*<span class="title">Vertex</span>]<span class="title">bool</span>)</span> &#123;</span><br><span class="line">seen[v] = <span class="literal">true</span></span><br><span class="line">f(v)</span><br><span class="line"><span class="keyword">for</span> next, isEdge := <span class="keyword">range</span> v.Neighbours &#123;</span><br><span class="line"><span class="keyword">if</span> isEdge &amp;&amp; !seen[next] &#123;</span><br><span class="line">next.Dfs(f, seen)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">Id         <span class="keyword">int</span></span><br><span class="line">Label      <span class="keyword">string</span></span><br><span class="line">Neighbours <span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Graph []*Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewVertex</span><span class="params">(id <span class="keyword">int</span>, label <span class="keyword">string</span>)</span> *<span class="title">Vertex</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;Vertex&#123;</span><br><span class="line">Id:         id,</span><br><span class="line">Label:      label,</span><br><span class="line">Neighbours: <span class="built_in">make</span>(<span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span>),</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v *Vertex)</span> <span class="title">AddNeighbour</span><span class="params">(w *Vertex)</span></span> &#123;</span><br><span class="line">v.Neighbours[w] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">VertexPrint</span><span class="params">(v *Vertex)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v (%v)\n"</span>, v.Id, v.Label)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Some cities</span></span><br><span class="line">london := NewVertex(<span class="number">0</span>, <span class="string">"London"</span>)</span><br><span class="line">ny := NewVertex(<span class="number">1</span>, <span class="string">"New York City"</span>)</span><br><span class="line">berlin := NewVertex(<span class="number">2</span>, <span class="string">"Berlin"</span>)</span><br><span class="line">paris := NewVertex(<span class="number">3</span>, <span class="string">"Paris"</span>)</span><br><span class="line">tokyo := NewVertex(<span class="number">4</span>, <span class="string">"Tokyo"</span>)</span><br><span class="line"></span><br><span class="line">g := Graph&#123;</span><br><span class="line">london,</span><br><span class="line">ny,</span><br><span class="line">berlin,</span><br><span class="line">paris,</span><br><span class="line">tokyo,</span><br><span class="line">&#125;</span><br><span class="line">_ = g</span><br><span class="line"></span><br><span class="line">london.AddNeighbour(paris)</span><br><span class="line">london.AddNeighbour(ny)</span><br><span class="line">ny.AddNeighbour(london)</span><br><span class="line">ny.AddNeighbour(paris)</span><br><span class="line">ny.AddNeighbour(tokyo)</span><br><span class="line">tokyo.AddNeighbour(paris)</span><br><span class="line">paris.AddNeighbour(tokyo)</span><br><span class="line">paris.AddNeighbour(berlin)</span><br><span class="line"></span><br><span class="line">alreadySeen := <span class="keyword">map</span>[*Vertex]<span class="keyword">bool</span>&#123;&#125;</span><br><span class="line">london.Dfs(VertexPrint, alreadySeen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> (London)</span><br><span class="line"><span class="number">3</span> (Paris)</span><br><span class="line"><span class="number">4</span> (Tokyo)</span><br><span class="line"><span class="number">2</span> (Berlin)</span><br><span class="line"><span class="number">1</span> (New York City)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::&#123;Rc, Weak&#125;;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Vertex</span></span>&lt;V&gt; &#123;</span><br><span class="line">    value: V,</span><br><span class="line">    neighbours: <span class="built_in">Vec</span>&lt;Weak&lt;RefCell&lt;Vertex&lt;V&gt;&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">type</span> <span class="title">RcVertex</span></span>&lt;V&gt; = Rc&lt;RefCell&lt;Vertex&lt;V&gt;&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Graph</span></span>&lt;V&gt; &#123;</span><br><span class="line">    vertices: <span class="built_in">Vec</span>&lt;RcVertex&lt;V&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;V&gt; Graph&lt;V&gt; &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>() -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        Graph &#123; vertices: <span class="built_in">vec!</span>[] &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">new_vertex</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, value: V) -&gt; RcVertex&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.add_vertex(Vertex &#123; value, neighbours: <span class="built_in">Vec</span>::new() &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_vertex</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, v: Vertex&lt;V&gt;) -&gt; RcVertex&lt;V&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> v = Rc::new(RefCell::new(v));</span><br><span class="line">        <span class="keyword">self</span>.vertices.push(Rc::clone(&amp;v));</span><br><span class="line">        v</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">add_edge</span></span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>, v1: &amp;RcVertex&lt;V&gt;, v2: &amp;RcVertex&lt;V&gt;) &#123;</span><br><span class="line">        v1.borrow_mut().neighbours.push(Rc::downgrade(&amp;v2));</span><br><span class="line">        v2.borrow_mut().neighbours.push(Rc::downgrade(&amp;v1));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dft</span></span>(start: RcVertex&lt;V&gt;, f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(&amp;V)) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">vec!</span>[];</span><br><span class="line">        Self::dft_helper(start, &amp;f, &amp;<span class="keyword">mut</span> s);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dft_helper</span></span>(start: RcVertex&lt;V&gt;, f: &amp;<span class="keyword">impl</span> <span class="built_in">Fn</span>(&amp;V), s: &amp;<span class="keyword">mut</span> <span class="built_in">Vec</span>&lt;*<span class="keyword">const</span> Vertex&lt;V&gt;&gt;) &#123;</span><br><span class="line">        s.push(start.as_ptr());</span><br><span class="line">        (f)(&amp;start.borrow().value);</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> &amp;start.borrow().neighbours &#123;</span><br><span class="line">            <span class="keyword">let</span> n = n.upgrade().expect(<span class="string">"Invalid neighbor"</span>);</span><br><span class="line">            <span class="keyword">if</span> s.iter().all(|&amp;p| p != n.as_ptr()) &#123;</span><br><span class="line">                Self::dft_helper(n, f, s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> g = Graph::new();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> v1 = g.new_vertex(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> v2 = g.new_vertex(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> v3 = g.new_vertex(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">let</span> v4 = g.new_vertex(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> v5 = g.new_vertex(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    g.add_edge(&amp;v1, &amp;v2);</span><br><span class="line">    g.add_edge(&amp;v1, &amp;v4);</span><br><span class="line">    g.add_edge(&amp;v1, &amp;v5);</span><br><span class="line">    g.add_edge(&amp;v2, &amp;v3);</span><br><span class="line">    g.add_edge(&amp;v3, &amp;v4);</span><br><span class="line">    g.add_edge(&amp;v4, &amp;v5);</span><br><span class="line">    </span><br><span class="line">    Graph::dft(v1, |v| <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, v));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="131-Successive-conditions"><a href="#131-Successive-conditions" class="headerlink" title="131. Successive conditions"></a>131. <font color="0c0a3e">Successive conditions</font></h3><blockquote><p>Execute f1 if condition c1 is true, or else f2 if condition c2 is true, or else f3 if condition c3 is true.<br>Don’t evaluate a condition when a previous condition was true.</p></blockquote><p><em>连续条件判等</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">conditional</span><span class="params">(x <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> c1(x):</span><br><span class="line">f1()</span><br><span class="line"><span class="keyword">case</span> c2(x):</span><br><span class="line">f2()</span><br><span class="line"><span class="keyword">case</span> c3(x):</span><br><span class="line">f3()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conditional(<span class="string">"dog Snoopy"</span>)</span><br><span class="line">conditional(<span class="string">"fruit Raspberry"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I'm a Human"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I'm a Dog"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f3</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I'm a Fruit"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c1, c2, c3 = prefixCheck(<span class="string">"human"</span>), prefixCheck(<span class="string">"dog"</span>), prefixCheck(<span class="string">"fruit"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prefixCheck</span><span class="params">(prefix <span class="keyword">string</span>)</span> <span class="title">func</span><span class="params">(<span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> strings.HasPrefix(x, prefix)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I<span class="string">'m a Dog</span></span><br><span class="line"><span class="string">I'</span>m a Fruit</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> c1 &#123; f1() &#125; <span class="keyword">else</span> <span class="keyword">if</span> c2 &#123; f2() &#125; <span class="keyword">else</span> <span class="keyword">if</span> c3 &#123; f3() &#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> <span class="literal">true</span> &#123;</span><br><span class="line">    _ <span class="keyword">if</span> c1 =&gt; f1(),</span><br><span class="line">    _ <span class="keyword">if</span> c2 =&gt; f2(),</span><br><span class="line">    _ <span class="keyword">if</span> c3 =&gt; f3(),</span><br><span class="line">    _ =&gt; (),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="132-Measure-duration-of-procedure-execution"><a href="#132-Measure-duration-of-procedure-execution" class="headerlink" title="132. Measure duration of procedure execution"></a>132. <font color="0c0a3e">Measure duration of procedure execution</font></h3><blockquote><p>Run procedure f, and return the duration of the execution of f.</p></blockquote><p><em>度量程序执行时间</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">clock</span><span class="params">(f <span class="keyword">func</span>()</span>) <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">t := time.Now()</span><br><span class="line">f()</span><br><span class="line"><span class="keyword">return</span> time.Since(t)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">re := regexp.MustCompilePOSIX(<span class="string">"|A+&#123;300&#125;"</span>)</span><br><span class="line">re.FindAllString(strings.Repeat(<span class="string">"A"</span>, <span class="number">299</span>), <span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := clock(f)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The result is always zero in the playground, which has a fixed clock!</span></span><br><span class="line"><span class="comment">// Try it on your workstation instead.</span></span><br><span class="line">fmt.Println(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0s</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::Instant;</span><br><span class="line"><span class="keyword">let</span> start = Instant::now();</span><br><span class="line">f();</span><br><span class="line"><span class="keyword">let</span> duration = start.elapsed();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="133-Case-insensitive-string-contains"><a href="#133-Case-insensitive-string-contains" class="headerlink" title="133. Case-insensitive string contains"></a>133. <font color="0c0a3e">Case-insensitive string contains</font></h3><blockquote><p>Set boolean ok to true if string word is contained in string s as a substring, even if the case doesn’t match, or to false otherwise.</p></blockquote><p><em>不区分大小写的字符串包含</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Package _strings has no case-insensitive version of _Contains, so</span></span><br><span class="line"><span class="comment">// we have to make our own.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsCaseInsensitive</span><span class="params">(s, word <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">lowerS, lowerWord := strings.ToLower(s), strings.ToLower(word)</span><br><span class="line">ok := strings.Contains(lowerS, lowerWord)</span><br><span class="line"><span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Let's dance the macarena"</span></span><br><span class="line"></span><br><span class="line">word := <span class="string">"Dance"</span></span><br><span class="line">ok := containsCaseInsensitive(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"dance"</span></span><br><span class="line">ok = containsCaseInsensitive(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"Duck"</span></span><br><span class="line">ok = containsCaseInsensitive(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> regex;</span><br><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Let's dance the macarena"</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"Dance"</span>;</span><br><span class="line">        <span class="keyword">let</span> re = Regex::new(&amp;<span class="built_in">format!</span>(<span class="string">"(?i)&#123;&#125;"</span>, regex::escape(word))).unwrap();</span><br><span class="line">        <span class="keyword">let</span> ok = re.is_match(&amp;s);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"dance"</span>;</span><br><span class="line">        <span class="keyword">let</span> re = Regex::new(&amp;<span class="built_in">format!</span>(<span class="string">"(?i)&#123;&#125;"</span>, regex::escape(word))).unwrap();</span><br><span class="line">        <span class="keyword">let</span> ok = re.is_match(&amp;s);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"Duck"</span>;</span><br><span class="line">        <span class="keyword">let</span> re = Regex::new(&amp;<span class="built_in">format!</span>(<span class="string">"(?i)&#123;&#125;"</span>, regex::escape(word))).unwrap();</span><br><span class="line">        <span class="keyword">let</span> ok = re.is_match(&amp;s);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> regex::RegexBuilder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"FooBar"</span>;</span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"foo"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> re = RegexBuilder::new(&amp;regex::escape(word))</span><br><span class="line">        .case_insensitive(<span class="literal">true</span>)</span><br><span class="line">        .build()</span><br><span class="line">        .unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> ok = re.is_match(s);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Let's dance the macarena"</span>;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"Dance"</span>;</span><br><span class="line">        <span class="keyword">let</span> ok = s.to_ascii_lowercase().contains(&amp;word.to_ascii_lowercase());</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"dance"</span>;</span><br><span class="line">        <span class="keyword">let</span> ok = s.to_ascii_lowercase().contains(&amp;word.to_ascii_lowercase());</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> word = <span class="string">"Duck"</span>;</span><br><span class="line">        <span class="keyword">let</span> ok = s.to_ascii_lowercase().contains(&amp;word.to_ascii_lowercase());</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="134-Create-a-new-list"><a href="#134-Create-a-new-list" class="headerlink" title="134. Create a new list"></a>134. <font color="0c0a3e">Create a new list</font></h3><p><em>创建一个新list</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c T = <span class="string">"This"</span>, <span class="string">"is"</span>, <span class="string">"wonderful"</span></span><br><span class="line"></span><br><span class="line">items := []T&#123;a, b, c&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br></pre></td></tr></table></figure><p><code>[This is wonderful]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b, c) = (<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[a, b, c];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22, 33]</code></p><p><br></p><h3 id="135-Remove-item-from-list-by-its-value"><a href="#135-Remove-item-from-list-by-its-value" class="headerlink" title="135. Remove item from list, by its value"></a>135. <font color="0c0a3e">Remove item from list, by its value</font></h3><blockquote><p>Remove at most 1 item from list items, having value x.<br>This will alter the original list or return a new list, depending on which is more idiomatic.<br>If there are several occurrences of x in items, remove only one of them. If x is absent, keep items unchanged.</p></blockquote><p><em>移除列表中的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">x := <span class="string">"c"</span></span><br><span class="line"><span class="keyword">for</span> i, y := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> y == x &#123;</span><br><span class="line">items = <span class="built_in">append</span>(items[:i], items[i+<span class="number">1</span>:]...)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a b c d e f]</span><br><span class="line">[a b d e f]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i, y := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> y == x &#123;</span><br><span class="line"><span class="built_in">copy</span>(items[i:], items[i+<span class="number">1</span>:])</span><br><span class="line">items[<span class="built_in">len</span>(items)<span class="number">-1</span>] = <span class="literal">nil</span></span><br><span class="line">items = items[:<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(i) = items.first(&amp;x) &#123;</span><br><span class="line">    items.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="136-Remove-all-occurrences-of-a-value-from-a-list"><a href="#136-Remove-all-occurrences-of-a-value-from-a-list" class="headerlink" title="136.  Remove all occurrences of a value from a list"></a>136. <font color="0c0a3e"> Remove all occurrences of a value from a list</font></h3><blockquote><p>Remove all occurrences of value x from list items.<br>This will alter the original list or return a new list, depending on which is more idiomatic.</p></blockquote><p><em>从列表中删除所有出现的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"r"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x T = <span class="string">"b"</span></span><br><span class="line">items2 := <span class="built_in">make</span>([]T, <span class="number">0</span>, <span class="built_in">len</span>(items))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> v != x &#123;</span><br><span class="line">items2 = <span class="built_in">append</span>(items2, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(items2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[b a b a r]</span><br><span class="line">[a a r]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"r"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">x := T(<span class="string">"b"</span>)</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> v != x &#123;</span><br><span class="line">items[j] = items[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">items = items[:j]</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[b a b a r]</span><br><span class="line">[a a r]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> items []*image</span><br><span class="line">&#123;</span><br><span class="line">red := newUniform(rgb&#123;<span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0</span>&#125;)</span><br><span class="line">white := newUniform(rgb&#123;<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>&#125;)</span><br><span class="line">items = []*image&#123;red, white, red&#125; <span class="comment">// Like the flag of Austria</span></span><br><span class="line">fmt.Println(<span class="string">"items ="</span>, items)</span><br><span class="line"></span><br><span class="line">x := red</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> v != x &#123;</span><br><span class="line">items[j] = items[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k := j; k &lt; <span class="built_in">len</span>(items); k++ &#123;</span><br><span class="line">items[k] = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">items = items[:j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// At this point, red can be garbage collected</span></span><br><span class="line"></span><br><span class="line">printAllocInfo()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"items ="</span>, items) <span class="comment">// Not the original flag anymore...</span></span><br><span class="line">fmt.Println(<span class="string">"items undelying ="</span>, items[:<span class="number">3</span>])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> image [<span class="number">1024</span>][<span class="number">1024</span>]rgb</span><br><span class="line"><span class="keyword">type</span> rgb [<span class="number">3</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newUniform</span><span class="params">(color rgb)</span> *<span class="title">image</span></span> &#123;</span><br><span class="line">im := <span class="built_in">new</span>(image)</span><br><span class="line"><span class="keyword">for</span> x := <span class="keyword">range</span> im &#123;</span><br><span class="line"><span class="keyword">for</span> y := <span class="keyword">range</span> im[x] &#123;</span><br><span class="line">im[x][y] = color</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> im</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printAllocInfo</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> stats runtime.MemStats</span><br><span class="line">runtime.GC()</span><br><span class="line">runtime.ReadMemStats(&amp;stats)</span><br><span class="line">fmt.Println(<span class="string">"Bytes allocated (total):"</span>, stats.TotalAlloc)</span><br><span class="line">fmt.Println(<span class="string">"Bytes still allocated:  "</span>, stats.Alloc)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="number">0xc000180000</span> <span class="number">0xc000480000</span> <span class="number">0xc000180000</span>]</span><br><span class="line">Bytes allocated (total): <span class="number">6416688</span></span><br><span class="line">Bytes still allocated:   <span class="number">3259024</span></span><br><span class="line">items = [<span class="number">0xc000480000</span>]</span><br><span class="line">items undelying = [<span class="number">0xc000480000</span> &lt;<span class="literal">nil</span>&gt; &lt;<span class="literal">nil</span>&gt;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    </span><br><span class="line">    items = items.into_iter().filter(|&amp;item| item != x).collect();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2, 3, 2, 3]</code></p><p><br></p><h3 id="137-Check-if-string-contains-only-digits"><a href="#137-Check-if-string-contains-only-digits" class="headerlink" title="137. Check if string contains only digits"></a>137. <font color="0c0a3e">Check if string contains only digits</font></h3><blockquote><p>Set boolean b to true if string s contains only characters in range ‘0’..’9’, false otherwise.</p></blockquote><p><em>检查字符串是否只包含数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"123"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"abc123def"</span>,</span><br><span class="line"><span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"123.456"</span>,</span><br><span class="line"><span class="string">"123 456"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">b := <span class="literal">true</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> s &#123;</span><br><span class="line"><span class="keyword">if</span> c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span> &#123;</span><br><span class="line">b = <span class="literal">false</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s, <span class="string">"=&gt;"</span>, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> =&gt; <span class="literal">true</span></span><br><span class="line"> =&gt; <span class="literal">true</span></span><br><span class="line">abc123def =&gt; <span class="literal">false</span></span><br><span class="line">abc =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">123.456</span> =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">123</span> <span class="number">456</span> =&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"123"</span>,</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"abc123def"</span>,</span><br><span class="line"><span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"123.456"</span>,</span><br><span class="line"><span class="string">"123 456"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">isNotDigit := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span> &#125;</span><br><span class="line">b := strings.IndexFunc(s, isNotDigit) == <span class="number">-1</span></span><br><span class="line">fmt.Println(s, <span class="string">"=&gt;"</span>, b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span> =&gt; <span class="literal">true</span></span><br><span class="line"> =&gt; <span class="literal">true</span></span><br><span class="line">abc123def =&gt; <span class="literal">false</span></span><br><span class="line">abc =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">123.456</span> =&gt; <span class="literal">false</span></span><br><span class="line"><span class="number">123</span> <span class="number">456</span> =&gt; <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"1023"</span>;</span><br><span class="line">    <span class="keyword">let</span> chars_are_numeric: <span class="built_in">Vec</span>&lt;<span class="built_in">bool</span>&gt; = s.chars().map(|c|c.is_numeric()).collect();</span><br><span class="line">    <span class="keyword">let</span> b = !chars_are_numeric.contains(&amp;<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="string">"0129"</span>.chars().all(<span class="built_in">char</span>::is_numeric);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><p><br></p><h3 id="138-Create-temp-file"><a href="#138-Create-temp-file" class="headerlink" title="138. Create temp file"></a>138. <font color="0c0a3e">Create temp file</font></h3><blockquote><p>Create a new temporary file on filesystem.</p></blockquote><p><em>创建一个新的临时文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">content := []<span class="keyword">byte</span>(<span class="string">"Big bag of misc data"</span>)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"Opening new temp file"</span>)</span><br><span class="line">tmpfile, err := ioutil.TempFile(<span class="string">""</span>, <span class="string">"example"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">tmpfilename := tmpfile.Name()</span><br><span class="line"><span class="keyword">defer</span> os.Remove(tmpfilename) <span class="comment">// clean up</span></span><br><span class="line">log.Println(<span class="string">"Opened new file"</span>, tmpfilename)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"Writing [["</span>, <span class="keyword">string</span>(content), <span class="string">"]]"</span>)</span><br><span class="line"><span class="keyword">if</span> _, err := tmpfile.Write(content); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := tmpfile.Close(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Closed"</span>, tmpfilename)</span><br><span class="line"></span><br><span class="line">log.Println(<span class="string">"Opening"</span>, tmpfilename)</span><br><span class="line">buffer, err := ioutil.ReadFile(tmpfilename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Read[["</span>, <span class="keyword">string</span>(buffer), <span class="string">"]]"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Opening <span class="built_in">new</span> temp file</span><br><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Opened <span class="built_in">new</span> file /tmp/example067319278</span><br><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Writing [[ Big bag of misc data ]]</span><br><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Closed /tmp/example067319278</span><br><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Opening /tmp/example067319278</span><br><span class="line"><span class="number">2009</span>/<span class="number">11</span>/<span class="number">10</span> <span class="number">23</span>:<span class="number">00</span>:<span class="number">00</span> Read[[ Big bag of misc data ]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> tempdir::TempDir;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">let</span> temp_dir = TempDir::new(<span class="string">"prefix"</span>)?;</span><br><span class="line"><span class="keyword">let</span> temp_file = File::open(temp_dir.path().join(<span class="string">"file_name"</span>))?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="139-Create-temp-directory"><a href="#139-Create-temp-directory" class="headerlink" title="139. Create temp directory"></a>139. <font color="0c0a3e">Create temp directory</font></h3><blockquote><p>Create a new temporary folder on filesystem, for writing.</p></blockquote><p><em>创建一个临时目录</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">content := []<span class="keyword">byte</span>(<span class="string">"temporary file's content"</span>)</span><br><span class="line">dir, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">defer</span> os.RemoveAll(dir) <span class="comment">// clean up</span></span><br><span class="line"></span><br><span class="line">inspect(dir)</span><br><span class="line"></span><br><span class="line">tmpfn := filepath.Join(dir, <span class="string">"tmpfile"</span>)</span><br><span class="line">err = ioutil.WriteFile(tmpfn, content, <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inspect(dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inspect</span><span class="params">(dirpath <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">files, err := ioutil.ReadDir(dirpath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dirpath, <span class="string">"contains"</span>, <span class="built_in">len</span>(files), <span class="string">"files"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="number">067319278</span> contains <span class="number">0</span> files</span><br><span class="line">/tmp/<span class="number">067319278</span> contains <span class="number">1</span> files</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> tempdir;</span><br><span class="line"><span class="keyword">use</span> tempdir::TempDir;</span><br><span class="line"><span class="keyword">let</span> tmp = TempDir::new(<span class="string">"prefix"</span>)?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="140-Delete-map-entry"><a href="#140-Delete-map-entry" class="headerlink" title="140. Delete map entry"></a>140. <font color="0c0a3e">Delete map entry</font></h3><p><em>从map中删除某个key</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"uno"</span>:  <span class="number">1</span>,</span><br><span class="line"><span class="string">"dos"</span>:  <span class="number">2</span>,</span><br><span class="line"><span class="string">"tres"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"dos"</span>)</span><br><span class="line"><span class="built_in">delete</span>(m, <span class="string">"cinco"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map[tres:3 uno:1]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashMap::new();</span><br><span class="line">    m.insert(<span class="number">5</span>, <span class="string">"a"</span>);</span><br><span class="line">    m.insert(<span class="number">17</span>, <span class="string">"b"</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line"></span><br><span class="line">    m.remove(&amp;<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">17</span>: <span class="string">"b"</span>, <span class="number">5</span>: <span class="string">"a"</span>&#125;</span><br><span class="line">&#123;<span class="number">17</span>: <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;121-UDP-listen-and-read&quot;&gt;&lt;a href=&quot;#121-UDP-listen-and-read&quot; class=&quot;headerlink&quot; title=&quot;121. UDP listen and read&quot;&gt;&lt;/a&gt;121.
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(6)</title>
    <link href="http://www.dashen.tech/2021/09/07/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-6/"/>
    <id>http://www.dashen.tech/2021/09/07/Rust-vs-Go-常用语法对比-6/</id>
    <published>2021-09-07T13:31:07.000Z</published>
    <updated>2021-09-21T02:56:10.434Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="101-Load-from-HTTP-GET-request-into-a-string"><a href="#101-Load-from-HTTP-GET-request-into-a-string" class="headerlink" title="101. Load from HTTP GET request into a string"></a>101. <font color="b33f62">Load from HTTP GET request into a string</font></h3><blockquote><p>Make an HTTP request with method GET to URL u, then store the body of the response in string s.</p></blockquote><p><em>发起http请求</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello?name=Inigo+Montoya"</span></span><br><span class="line"></span><br><span class="line">res, err := http.Get(u)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err := ioutil.ReadAll(res.Body)</span><br><span class="line">res.Body.Close()</span><br><span class="line">check(err)</span><br><span class="line">s := <span class="keyword">string</span>(buffer)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"GET  response:"</span>, res.StatusCode, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello %s"</span>, r.FormValue(<span class="string">"name"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size="2" color="orange">res has type *http.Response.<br>buffer has type []byte.<br>It is idiomatic and strongly recommended to check errors at each step.<br></font><p><code>GET  response: 200 Hello Inigo Montoya</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> reqwest;</span><br><span class="line"><span class="keyword">use</span> reqwest::Client;</span><br><span class="line"><span class="keyword">let</span> client = Client::new();</span><br><span class="line"><span class="keyword">let</span> s = client.get(u).send().and_then(|res| res.text())?;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">ureq = <span class="string">"1.0"</span></span><br><span class="line"><span class="keyword">let</span> s = ureq::get(u).call().into_string()?;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">error-chain = <span class="string">"0.12.4"</span></span><br><span class="line">reqwest = &#123; version = <span class="string">"0.11.2"</span>, features = [<span class="string">"blocking"</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> error_chain::error_chain;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> response = reqwest::blocking::get(u)?;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::new();</span><br><span class="line">response.read_to_string(&amp;<span class="keyword">mut</span> s)?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="102-Load-from-HTTP-GET-request-into-a-file"><a href="#102-Load-from-HTTP-GET-request-into-a-file" class="headerlink" title="102. Load from HTTP GET request into a file"></a>102. <font color="7b1e7a">Load from HTTP GET request into a file</font></h3><blockquote><p>Make an HTTP request with method GET to URL u, then store the body of the response in file result.txt. Try to save the data as it arrives if possible, without having all its content in memory at once.</p></blockquote><p><em>发起http请求</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := saveGetResponse()</span><br><span class="line">check(err)</span><br><span class="line">err = readFile()</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">saveGetResponse</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello?name=Inigo+Montoya"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Making GET request"</span>)</span><br><span class="line">resp, err := http.Get(u)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"><span class="keyword">if</span> resp.StatusCode != <span class="number">200</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Status: %v"</span>, resp.Status)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Saving data to file"</span>)</span><br><span class="line">out, err := os.Create(<span class="string">"/tmp/result.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> out.Close()</span><br><span class="line">_, err = io.Copy(out, resp.Body)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFile</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Reading file"</span>)</span><br><span class="line">buffer, err := ioutil.ReadFile(<span class="string">"/tmp/result.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"Saved data is %q\n"</span>, <span class="keyword">string</span>(buffer))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello %s"</span>, r.FormValue(<span class="string">"name"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><font size="2" color="orange">resp has type <code>*</code>http.Response.<br>It is idiomatic and strongly recommended to check errors at each step, except for the calls to Close.</font><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Making GET request</span><br><span class="line">Saving data to file</span><br><span class="line">Reading file</span><br><span class="line">Saved data is <span class="string">"Hello Inigo Montoya"</span></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> reqwest;</span><br><span class="line"><span class="keyword">use</span> reqwest::Client;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">let</span> client = Client::new();</span><br><span class="line"><span class="keyword">match</span> client.get(&amp;u).send() &#123;</span><br><span class="line">    <span class="literal">Ok</span>(res) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> file = File::create(<span class="string">"result.txt"</span>)?;</span><br><span class="line">        ::std::io::copy(res, file)?;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">Err</span>(e) =&gt; eprintln!(<span class="string">"failed to send request: &#123;&#125;"</span>, e),</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="105-Current-executable-name"><a href="#105-Current-executable-name" class="headerlink" title="105. Current executable name"></a>105. <font color="f3c677">Current executable name</font></h3><blockquote><p>Assign to string s the name of the currently executing program (but not its full path).</p></blockquote><p><em>当前可执行文件名称</em></p><p><em>将当前正在执行的程序的名称分配给字符串s(但不是它的完整路径)。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">path := os.Args[<span class="number">0</span>]</span><br><span class="line">s = filepath.Base(path)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>play</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_exec_name</span></span>() -&gt; <span class="built_in">Option</span>&lt;<span class="built_in">String</span>&gt; &#123;</span><br><span class="line">    std::env::current_exe()</span><br><span class="line">        .ok()</span><br><span class="line">        .and_then(|pb| pb.file_name().map(|s| s.to_os_string()))</span><br><span class="line">        .and_then(|s| s.into_string().ok())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; () &#123;</span><br><span class="line">    <span class="keyword">let</span> s = get_exec_name().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>playground</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = std::env::current_exe()</span><br><span class="line">        .expect(<span class="string">"Can't get the exec path"</span>)</span><br><span class="line">        .file_name()</span><br><span class="line">        .expect(<span class="string">"Can't get the exec name"</span>)</span><br><span class="line">        .to_string_lossy()</span><br><span class="line">        .into_owned();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>playground</code></p><p><br></p><h3 id="106-Get-program-working-directory"><a href="#106-Get-program-working-directory" class="headerlink" title="106. Get program working directory"></a>106. <font color="7bdff2">Get program working directory</font></h3><blockquote><p>Assign to string dir the path of the working directory.<br>(This is not necessarily the folder containing the executable itself)</p></blockquote><p><em>获取程序的工作路径</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">dir, err := os.Getwd()</span><br><span class="line">fmt.Println(dir, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/ &lt;nil&gt;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> dir = env::current_dir().unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, dir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;/playground&quot;</code></p><p><br></p><h3 id="107-Get-folder-containing-current-program"><a href="#107-Get-folder-containing-current-program" class="headerlink" title="107. Get folder containing current program"></a>107. <font color="b2f7ef">Get folder containing current program</font></h3><blockquote><p>Assign to string dir the path of the folder containing the currently running executable.<br>(This is not necessarily the working directory, though.)</p></blockquote><p><em>获取包含当前程序的文件夹</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> dir <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">programPath := os.Args[<span class="number">0</span>]</span><br><span class="line">absolutePath, err := filepath.Abs(programPath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">dir = filepath.Dir(absolutePath)</span><br><span class="line"></span><br><span class="line">fmt.Println(dir)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmpfs</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dir = std::env::current_exe()?</span><br><span class="line">    .canonicalize()</span><br><span class="line">    .expect(<span class="string">"the current exe should exist"</span>)</span><br><span class="line">    .parent()</span><br><span class="line">    .expect(<span class="string">"the current exe should be a file"</span>)</span><br><span class="line">    .to_string_lossy()</span><br><span class="line">    .to_owned();</span><br></pre></td></tr></table></figure><p><em>Rust doesn’t represent paths as Strings, so we need to convert the Path returned from Path::parent. This code chooses to do this lossily, replacing characters it doesn’t recognize with �</em></p><p><br></p><h3 id="109-Number-of-bytes-of-a-type"><a href="#109-Number-of-bytes-of-a-type" class="headerlink" title="109. Number of bytes of a type"></a>109. <font color="f7d6e0">Number of bytes of a type</font></h3><blockquote><p>Set n to the number of bytes of a variable t (of type T).</p></blockquote><p><em>获取某个类型的字节数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> t T</span><br><span class="line">tType := reflect.TypeOf(t)</span><br><span class="line">n := tType.Size()</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"A"</span>, tType, <span class="string">"object is"</span>, n, <span class="string">"bytes."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">Age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T is a type alias, to stick to the idiom statement.</span></span><br><span class="line"><span class="comment">// T has the same memory footprint per value as Person.</span></span><br><span class="line"><span class="keyword">type</span> T Person</span><br></pre></td></tr></table></figure><p><code>A main.T object is 24 bytes.</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T has (8 + 4) == 12 bytes of data</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span>(<span class="built_in">f64</span>, <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = ::std::mem::size_of::&lt;T&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; bytes"</span>, n);</span><br><span class="line">    <span class="comment">// T has size 16, which is "the offset in bytes between successive elements in an array with item type T"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>16 bytes</code></p><p><br></p><h3 id="110-Check-if-string-is-blank"><a href="#110-Check-if-string-is-blank" class="headerlink" title="110. Check if string is blank"></a>110. <font color="f2b5d4">Check if string is blank</font></h3><blockquote><p>Set boolean blank to true if string s is empty, or null, or contains only whitespace ; false otherwise.</p></blockquote><p><em>检查字符串是否空白</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"a"</span>,</span><br><span class="line"><span class="string">" "</span>,</span><br><span class="line"><span class="string">"\t \n"</span>,</span><br><span class="line"><span class="string">"_"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">blank := strings.TrimSpace(s) == <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> blank &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%q is blank\n"</span>, s)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%q is not blank\n"</span>, s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> is blank</span><br><span class="line"><span class="string">"a"</span> is not blank</span><br><span class="line"><span class="string">" "</span> is blank</span><br><span class="line"><span class="string">"\t \n"</span> is blank</span><br><span class="line"><span class="string">"_"</span> is not blank</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = <span class="built_in">vec!</span>[<span class="string">""</span>, <span class="string">" "</span>, <span class="string">"  "</span>, <span class="string">"\t"</span>, <span class="string">"\n"</span>, <span class="string">"a"</span>, <span class="string">" b "</span>];</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> list &#123;</span><br><span class="line">        <span class="keyword">let</span> blank = s.trim().is_empty();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> blank &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;\tis blank"</span>, s)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;\tis not blank"</span>, s)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span>is blank</span><br><span class="line"><span class="string">" "</span>is blank</span><br><span class="line"><span class="string">"  "</span>is blank</span><br><span class="line"><span class="string">"\t"</span>is blank</span><br><span class="line"><span class="string">"\n"</span>is blank</span><br><span class="line"><span class="string">"a"</span>is not blank</span><br><span class="line"><span class="string">" b "</span>is not blank</span><br></pre></td></tr></table></figure><p><br></p><h3 id="111-Launch-other-program"><a href="#111-Launch-other-program" class="headerlink" title="111. Launch other program"></a>111. <font color="247ba0">Launch other program</font></h3><blockquote><p>From current process, run program x with command-line parameters “a”, “b”.</p></blockquote><p><em>运行其他程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os/exec"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := exec.Command(<span class="string">"x"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>).Run()</span><br><span class="line">fmt.Println(err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exec: &quot;x&quot;: executable file not found in $PATH</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> child = Command::new(<span class="string">"ls"</span>)</span><br><span class="line">        .args(&amp;[<span class="string">"/etc"</span>])</span><br><span class="line">        .spawn()</span><br><span class="line">        .expect(<span class="string">"failed to execute process"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> output = child.wait_with_output().expect(<span class="string">"Failed to wait on child"</span>);</span><br><span class="line">    <span class="keyword">let</span> output = <span class="built_in">String</span>::from_utf8(output.stdout).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">X11</span><br><span class="line">adduser.conf</span><br><span class="line">alternatives</span><br><span class="line">apt</span><br><span class="line">bash.bashrc</span><br><span class="line">bash_completion.d</span><br><span class="line">bindresvport.blacklist</span><br><span class="line">ca-certificates</span><br><span class="line">ca-certificates.conf</span><br><span class="line">cron.d</span><br><span class="line">cron.daily</span><br><span class="line">debconf.conf</span><br><span class="line">debian_version</span><br><span class="line">default</span><br><span class="line">deluser.conf</span><br><span class="line">dpkg</span><br><span class="line">e2scrub.conf</span><br><span class="line">emacs</span><br><span class="line">environment</span><br><span class="line">ethertypes</span><br><span class="line">fstab</span><br><span class="line">gai.conf</span><br><span class="line">group</span><br><span class="line">group-</span><br><span class="line">gshadow</span><br><span class="line">gshadow-</span><br><span class="line">gss</span><br><span class="line">host.conf</span><br><span class="line">hostname</span><br><span class="line">hosts</span><br><span class="line">init.d</span><br><span class="line">inputrc</span><br><span class="line">issue</span><br><span class="line">issue.net</span><br><span class="line">kernel</span><br><span class="line">ld.so.cache</span><br><span class="line">ld.so.conf</span><br><span class="line">ld.so.conf.d</span><br><span class="line">ldap</span><br><span class="line">legal</span><br><span class="line">libaudit.conf</span><br><span class="line">localtime</span><br><span class="line">logcheck</span><br><span class="line">login.defs</span><br><span class="line">logrotate.d</span><br><span class="line">lsb-release</span><br><span class="line">machine-id</span><br><span class="line">magic</span><br><span class="line">magic.mime</span><br><span class="line">mailcap</span><br><span class="line">mailcap.order</span><br><span class="line">mime.types</span><br><span class="line">mke2fs.conf</span><br><span class="line">mtab</span><br><span class="line">networks</span><br><span class="line">nsswitch.conf</span><br><span class="line">opt</span><br><span class="line">os-release</span><br><span class="line">pam.conf</span><br><span class="line">pam.d</span><br><span class="line">passwd</span><br><span class="line">passwd-</span><br><span class="line">perl</span><br><span class="line">profile</span><br><span class="line">profile.d</span><br><span class="line">protocols</span><br><span class="line">python2.<span class="number">7</span></span><br><span class="line">rc0.d</span><br><span class="line">rc1.d</span><br><span class="line">rc2.d</span><br><span class="line">rc3.d</span><br><span class="line">rc4.d</span><br><span class="line">rc5.d</span><br><span class="line">rc6.d</span><br><span class="line">rcS.d</span><br><span class="line">resolv.conf</span><br><span class="line">rmt</span><br><span class="line">rpc</span><br><span class="line">security</span><br><span class="line">selinux</span><br><span class="line">services</span><br><span class="line">shadow</span><br><span class="line">shadow-</span><br><span class="line">shells</span><br><span class="line">skel</span><br><span class="line">ssh</span><br><span class="line">ssl</span><br><span class="line">subgid</span><br><span class="line">subgid-</span><br><span class="line">subuid</span><br><span class="line">subuid-</span><br><span class="line">sysctl.conf</span><br><span class="line">sysctl.d</span><br><span class="line">systemd</span><br><span class="line">terminfo</span><br><span class="line">timezone</span><br><span class="line">update-motd.d</span><br><span class="line">xattr.conf</span><br><span class="line">xdg</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> output = Command::new(<span class="string">"ls"</span>)</span><br><span class="line">        .args(&amp;[<span class="string">"/etc"</span>])</span><br><span class="line">        .output()</span><br><span class="line">        .expect(<span class="string">"failed to execute process"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> output = <span class="built_in">String</span>::from_utf8(output.stdout).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> status = Command::new(<span class="string">"ls"</span>)</span><br><span class="line">        .args(&amp;[<span class="string">"/etc"</span>])</span><br><span class="line">        .status()</span><br><span class="line">        .expect(<span class="string">"failed to execute process"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// exit code is outputted after _ls_ runs</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, status);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="112-Iterate-over-map-entries-ordered-by-keys"><a href="#112-Iterate-over-map-entries-ordered-by-keys" class="headerlink" title="112. Iterate over map entries, ordered by keys"></a>112. <font color="70c1b3">Iterate over map entries, ordered by keys</font></h3><blockquote><p>Print each key k with its value x from an associative array mymap, in ascending order of k.</p></blockquote><p><em>遍历map，按key排序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"four"</span>:  <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">keys := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="built_in">len</span>(mymap))</span><br><span class="line"><span class="keyword">for</span> k := <span class="keyword">range</span> mymap &#123;</span><br><span class="line">keys = <span class="built_in">append</span>(keys, k)</span><br><span class="line">&#125;</span><br><span class="line">sort.Strings(keys)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, k := <span class="keyword">range</span> keys &#123;</span><br><span class="line">x := mymap[k]</span><br><span class="line">fmt.Println(<span class="string">"Key ="</span>, k, <span class="string">", Value ="</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Key = four , Value = <span class="number">4</span></span><br><span class="line">Key = one , Value = <span class="number">1</span></span><br><span class="line">Key = three , Value = <span class="number">3</span></span><br><span class="line">Key = two , Value = <span class="number">2</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap = BTreeMap::new();</span><br><span class="line">    mymap.insert(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">    mymap.insert(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">    mymap.insert(<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line">    mymap.insert(<span class="string">"four"</span>, <span class="number">4</span>);</span><br><span class="line">    mymap.insert(<span class="string">"five"</span>, <span class="number">5</span>);</span><br><span class="line">    mymap.insert(<span class="string">"six"</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Iterate over map entries, ordered by keys, which is NOT the numerical order</span></span><br><span class="line">    <span class="keyword">for</span> (k, x) <span class="keyword">in</span> mymap &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, k, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(five, <span class="number">5</span>)</span><br><span class="line">(four, <span class="number">4</span>)</span><br><span class="line">(one, <span class="number">1</span>)</span><br><span class="line">(six, <span class="number">6</span>)</span><br><span class="line">(three, <span class="number">3</span>)</span><br><span class="line">(two, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="113-Iterate-over-map-entries-ordered-by-values"><a href="#113-Iterate-over-map-entries-ordered-by-values" class="headerlink" title="113. Iterate over map entries, ordered by values"></a>113. <font color="b2dbbf">Iterate over map entries, ordered by values</font></h3><blockquote><p>Print each key k with its value x from an associative array mymap, in ascending order of x.<br>Note that multiple entries may exist for the same value x.</p></blockquote><p><em>遍历map，按值排序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> &#123;</span><br><span class="line">key   <span class="keyword">string</span></span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> entries []entry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list entries)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(list) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list entries)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> list[i].value &lt; list[j].value &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(list entries)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; list[i], list[j] = list[j], list[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"four"</span>:  <span class="number">4</span>,</span><br><span class="line"><span class="string">"dos"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"deux"</span>:  <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">entries := <span class="built_in">make</span>(entries, <span class="number">0</span>, <span class="built_in">len</span>(mymap))</span><br><span class="line"><span class="keyword">for</span> k, x := <span class="keyword">range</span> mymap &#123;</span><br><span class="line">entries = <span class="built_in">append</span>(entries, entry&#123;key: k, value: x&#125;)</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(entries)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> entries &#123;</span><br><span class="line">fmt.Println(<span class="string">"Key ="</span>, e.key, <span class="string">", Value ="</span>, e.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Key = one , Value = <span class="number">1</span></span><br><span class="line">Key = dos , Value = <span class="number">2</span></span><br><span class="line">Key = deux , Value = <span class="number">2</span></span><br><span class="line">Key = two , Value = <span class="number">2</span></span><br><span class="line">Key = three , Value = <span class="number">3</span></span><br><span class="line">Key = four , Value = <span class="number">4</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"four"</span>:  <span class="number">4</span>,</span><br><span class="line"><span class="string">"dos"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"deux"</span>:  <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> &#123;</span><br><span class="line">key   <span class="keyword">string</span></span><br><span class="line">value <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">entries := <span class="built_in">make</span>([]entry, <span class="number">0</span>, <span class="built_in">len</span>(mymap))</span><br><span class="line"><span class="keyword">for</span> k, x := <span class="keyword">range</span> mymap &#123;</span><br><span class="line">entries = <span class="built_in">append</span>(entries, entry&#123;key: k, value: x&#125;)</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(entries, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> entries[i].value &lt; entries[j].value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> entries &#123;</span><br><span class="line">fmt.Println(<span class="string">"Key ="</span>, e.key, <span class="string">", Value ="</span>, e.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Key = one , Value = <span class="number">1</span></span><br><span class="line">Key = two , Value = <span class="number">2</span></span><br><span class="line">Key = dos , Value = <span class="number">2</span></span><br><span class="line">Key = deux , Value = <span class="number">2</span></span><br><span class="line">Key = three , Value = <span class="number">3</span></span><br><span class="line">Key = four , Value = <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap = HashMap::new();</span><br><span class="line">    mymap.insert(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    mymap.insert(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    mymap.insert(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    mymap.insert(<span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k, x) <span class="keyword">in</span> mymap.iter().sorted_by_key(|x| x.<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"[&#123;&#125;,&#123;&#125;]"</span>, k, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap = HashMap::new();</span><br><span class="line">    mymap.insert(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    mymap.insert(<span class="number">2</span>, <span class="number">6</span>);</span><br><span class="line">    mymap.insert(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">    mymap.insert(<span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items: <span class="built_in">Vec</span>&lt;_&gt; = mymap.iter().collect();</span><br><span class="line">    items.sort_by_key(|item| item.<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (k, x) <span class="keyword">in</span> items &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"[&#123;&#125;,&#123;&#125;]"</span>, k, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">4</span>,<span class="number">1</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="114-Test-deep-equality"><a href="#114-Test-deep-equality" class="headerlink" title="114. Test deep equality"></a>114. <font color="f3ffbd">Test deep equality</font></h3><blockquote><p>Set boolean b to true if objects x and y contain the same values, recursively comparing all referenced elements in x and y.<br>Tell if the code correctly handles recursive types.</p></blockquote><p><em>深度判等</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := Foo&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">list := []Foo&#123;</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Bye"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">false</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">3.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">5</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Batman"</span>&#125;&#125;,</span><br><span class="line">&#123;<span class="number">9</span>, <span class="string">"Hello"</span>, []<span class="keyword">bool</span>&#123;<span class="literal">false</span>, <span class="literal">true</span>&#125;, <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span>&#123;<span class="number">1</span>: <span class="number">1.0</span>, <span class="number">2</span>: <span class="number">2.0</span>&#125;, &amp;Bar&#123;<span class="string">"Babar"</span>&#125;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, y := <span class="keyword">range</span> list &#123;</span><br><span class="line">b := reflect.DeepEqual(x, y)</span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(<span class="string">"x deep equals list["</span>, i, <span class="string">"]"</span>)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"x doesn't deep equal list["</span>, i, <span class="string">"]"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">str     <span class="keyword">string</span></span><br><span class="line">bools   []<span class="keyword">bool</span></span><br><span class="line">mapping <span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">float64</span></span><br><span class="line">bar     *Bar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bar <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x doesn<span class="string">'t deep equal list[ 0 ]</span></span><br><span class="line"><span class="string">x doesn'</span>t deep equal list[ <span class="number">1</span> ]</span><br><span class="line">x doesn<span class="string">'t deep equal list[ 2 ]</span></span><br><span class="line"><span class="string">x doesn'</span>t deep equal list[ <span class="number">3</span> ]</span><br><span class="line">x doesn<span class="string">'t deep equal list[ 4 ]</span></span><br><span class="line"><span class="string">x deep equals list[ 5 ]</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b = x == y;</span><br></pre></td></tr></table></figure><p><em>The == operator can only be used by having a type implement PartialEq.</em></p><p><br></p><h3 id="115-Compare-dates"><a href="#115-Compare-dates" class="headerlink" title="115. Compare dates"></a>115. <font color="ff1654">Compare dates</font></h3><blockquote><p>Set boolean b to true if date d1 is strictly before date d2 ; false otherwise.</p></blockquote><p><em>日期比较</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d1 := time.Now()</span><br><span class="line">d2 := time.Date(<span class="number">2020</span>, time.November, <span class="number">10</span>, <span class="number">23</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, time.UTC)</span><br><span class="line"></span><br><span class="line">b := d1.Before(d2)</span><br><span class="line"></span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> chrono;</span><br><span class="line"><span class="keyword">use</span> chrono::prelude::*;</span><br><span class="line"><span class="keyword">let</span> b = d1 &lt; d2;</span><br></pre></td></tr></table></figure><p><a href="https://docs.rs/chrono/0.4.3/chrono/struct.Date.html" target="_blank" rel="noopener">doc – Struct chrono::Date</a></p><p><br></p><h3 id="116-Remove-occurrences-of-word-from-string"><a href="#116-Remove-occurrences-of-word-from-string" class="headerlink" title="116. Remove occurrences of word from string"></a>116. <font color="565264">Remove occurrences of word from string</font></h3><blockquote><p>Remove all occurrences of string w from string s1, and store the result in s2.</p></blockquote><p><em>去除指定字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="string">"foobar"</span></span><br><span class="line"><span class="keyword">var</span> w = <span class="string">"foo"</span></span><br><span class="line">s2 := strings.Replace(s1, w, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">fmt.Println(s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bar</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="string">"foobar"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"foo"</span>;</span><br><span class="line">    <span class="keyword">let</span> s2 = s1.replace(w, <span class="string">""</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bar</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="string">"foobar"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"foo"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">str</span>::replace(s1, w, <span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>bar</code></p><p><br></p><h3 id="117-Get-list-size"><a href="#117-Get-list-size" class="headerlink" title="117. Get list size"></a>117. <font color="706677">Get list size</font></h3><p><em>获取list的大小</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// x is a slice</span></span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(x)</span><br><span class="line">fmt.Println(n)</span><br><span class="line"></span><br><span class="line"><span class="comment">// y is an array</span></span><br><span class="line">y := [<span class="number">4</span>]<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">n = <span class="built_in">len</span>(y)</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = x.len();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x has &#123;&#125; elements"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>x has 3 elements</code></p><p><br></p><h3 id="118-List-to-set"><a href="#118-List-to-set" class="headerlink" title="118. List to set"></a>118. <font color="a6808c">List to set</font></h3><blockquote><p>Create set y from list x.<br>x may contain duplicates. y is unordered and has no repeated values.</p></blockquote><p><em>从list到set</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"x ="</span>, x)</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">struct</span>&#123;&#125;, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">y[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"y ="</span>, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [b a b c]</span><br><span class="line">y = <span class="keyword">map</span>[a:&#123;&#125; b:&#123;&#125; c:&#123;&#125;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x: &#123;:?&#125;"</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y: HashSet&lt;_&gt; = x.into_iter().collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"y: &#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x: [<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line">y: &#123;<span class="number">1</span>, <span class="number">7</span>, <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="119-Deduplicate-list"><a href="#119-Deduplicate-list" class="headerlink" title="119.  Deduplicate list"></a>119. <font color="ccb7ae"> Deduplicate list</font></h3><blockquote><p>Remove duplicates from list x.<br>Explain if original order is preserved.</p></blockquote><p><em>list去重</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">x := []T&#123;<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"x ="</span>, x)</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">struct</span>&#123;&#125;, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">y[v] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">x2 := <span class="built_in">make</span>([]T, <span class="number">0</span>, <span class="built_in">len</span>(y))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> _, ok := y[v]; ok &#123;</span><br><span class="line">x2 = <span class="built_in">append</span>(x2, v)</span><br><span class="line"><span class="built_in">delete</span>(y, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = x2</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"x ="</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [b a b c]</span><br><span class="line">x = [b a c]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">x := []T&#123;<span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"x ="</span>, x)</span><br><span class="line"></span><br><span class="line">seen := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> !seen[v] &#123;</span><br><span class="line">x[j] = v</span><br><span class="line">j++</span><br><span class="line">seen[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"x ="</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = [b a b b c b a]</span><br><span class="line">x = [b a c]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T *<span class="keyword">int64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c, d <span class="keyword">int64</span> = <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">11</span></span><br><span class="line">x := []T&#123;&amp;b, &amp;a, &amp;b, &amp;b, &amp;c, &amp;b, &amp;a, &amp;d&#125;</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">seen := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> !seen[v] &#123;</span><br><span class="line">x[j] = v</span><br><span class="line">j++</span><br><span class="line">seen[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := j; i &lt; <span class="built_in">len</span>(x); i++ &#123;</span><br><span class="line"><span class="comment">// Avoid memory leak</span></span><br><span class="line">x[i] = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now x has only distinct pointers (even if some point to int64 values that are the same)</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">print</span><span class="params">(a []T)</span></span> &#123;</span><br><span class="line">glue := <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> a &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s%d"</span>, glue, *p)</span><br><span class="line">glue = <span class="string">", "</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">22</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">11</span></span><br><span class="line"><span class="number">22</span>, <span class="number">11</span>, <span class="number">33</span>, <span class="number">11</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">    x.sort();</span><br><span class="line">    x.dedup();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4]</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> dedup: <span class="built_in">Vec</span>&lt;_&gt; = x.iter().unique().collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, dedup);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4]</code></p><p><br></p><h3 id="120-Read-integer-from-stdin"><a href="#120-Read-integer-from-stdin" class="headerlink" title="120. Read integer from stdin"></a>120. <font color="d6cfcb">Read integer from stdin</font></h3><blockquote><p>Read an integer value from the standard input into variable n</p></blockquote><p><em>从标准输入中读取整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This string simulates the keyboard entry.</span></span><br><span class="line"><span class="keyword">var</span> userInput <span class="keyword">string</span> = <span class="string">`42 017`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">_, err := fmt.Scan(&amp;i)</span><br><span class="line">fmt.Println(i, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The second value starts with 0, thus is interpreted as octal!</span></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span></span><br><span class="line">_, err = fmt.Scan(&amp;j)</span><br><span class="line">fmt.Println(j, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Go Playground doesn't actually read os.Stdin, so this</span></span><br><span class="line"><span class="comment">// workaround writes some data on virtual FS in a file, and then</span></span><br><span class="line"><span class="comment">// sets this file as the new Stdin.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that the init func is run before main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/stdin"</span>, []<span class="keyword">byte</span>(userInput), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fileIn, err := os.Open(<span class="string">"/tmp/stdin"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">os.Stdin = fileIn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span> &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">15</span> &lt;<span class="literal">nil</span>&gt;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// This string simulates the keyboard entry.</span></span><br><span class="line"><span class="keyword">var</span> userInput <span class="keyword">string</span> = <span class="string">`42 017`</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span></span><br><span class="line">_, err := fmt.Scanf(<span class="string">"%d"</span>, &amp;i)</span><br><span class="line">fmt.Println(i, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span></span><br><span class="line">_, err = fmt.Scanf(<span class="string">"%d"</span>, &amp;j)</span><br><span class="line">fmt.Println(j, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Go Playground doesn't actually read os.Stdin, so this</span></span><br><span class="line"><span class="comment">// workaround writes some data on virtual FS in a file, and then</span></span><br><span class="line"><span class="comment">// sets this file as the new Stdin.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Note that the init func is run before main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/stdin"</span>, []<span class="keyword">byte</span>(userInput), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fileIn, err := os.Open(<span class="string">"/tmp/stdin"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">os.Stdin = fileIn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span> &lt;<span class="literal">nil</span>&gt;</span><br><span class="line"><span class="number">17</span> &lt;<span class="literal">nil</span>&gt;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">get_input</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> buffer = <span class="built_in">String</span>::new();</span><br><span class="line">    std::io::stdin().read_line(&amp;<span class="keyword">mut</span> buffer).expect(<span class="string">"Failed"</span>);</span><br><span class="line">    buffer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> n = get_input().trim().parse::&lt;<span class="built_in">i64</span>&gt;().unwrap();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> input = <span class="built_in">String</span>::new();</span><br><span class="line">io::stdin().read_line(&amp;<span class="keyword">mut</span> input).unwrap();</span><br><span class="line"><span class="keyword">let</span> n: <span class="built_in">i32</span> = input.trim().parse().unwrap();s</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::BufRead;</span><br><span class="line"><span class="keyword">let</span> n: <span class="built_in">i32</span> = std::io::stdin()</span><br><span class="line">    .lock()</span><br><span class="line">    .lines()</span><br><span class="line">    .next()</span><br><span class="line">    .expect(<span class="string">"stdin should be available"</span>)</span><br><span class="line">    .expect(<span class="string">"couldn't read from stdin"</span>)</span><br><span class="line">    .trim()</span><br><span class="line">    .parse()</span><br><span class="line">    .expect(<span class="string">"input was not an integer"</span>);</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;101-Load-from-HTTP-GET-request-into-a-string&quot;&gt;&lt;a href=&quot;#101-Load-from-HTTP-GET-request-into-a-string&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(5)</title>
    <link href="http://www.dashen.tech/2021/09/06/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-5/"/>
    <id>http://www.dashen.tech/2021/09/06/Rust-vs-Go-常用语法对比-5/</id>
    <published>2021-09-06T15:51:58.000Z</published>
    <updated>2021-09-21T02:56:03.536Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="81-Round-floating-point-number-to-integer"><a href="#81-Round-floating-point-number-to-integer" class="headerlink" title="81. Round floating point number to integer"></a>81. <font color="fb6107">Round floating point number to integer</font></h3><blockquote><p>Declare integer y and initialize it with the rounded value of floating point number x .<br>Ties (when the fractional part of x is exactly .5) must be rounded up (to positive infinity).</p></blockquote><p><em>按规则取整</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">round</span><span class="params">(x <span class="keyword">float64</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">y := <span class="keyword">int</span>(math.Floor(x + <span class="number">0.5</span>))</span><br><span class="line"><span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> []<span class="keyword">float64</span>&#123;<span class="number">-1.1</span>, <span class="number">-0.9</span>, <span class="number">-0.5</span>, <span class="number">-0.1</span>, <span class="number">0.</span>, <span class="number">0.1</span>, <span class="number">0.5</span>, <span class="number">0.9</span>, <span class="number">1.1</span>&#125; &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%5.1f %5d\n"</span>, x, round(x))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1.1</span>    <span class="number">-1</span></span><br><span class="line"><span class="number">-0.9</span>    <span class="number">-1</span></span><br><span class="line"><span class="number">-0.5</span>     <span class="number">0</span></span><br><span class="line"><span class="number">-0.1</span>     <span class="number">0</span></span><br><span class="line"> <span class="number">0.0</span>     <span class="number">0</span></span><br><span class="line"> <span class="number">0.1</span>     <span class="number">0</span></span><br><span class="line"> <span class="number">0.5</span>     <span class="number">1</span></span><br><span class="line"> <span class="number">0.9</span>     <span class="number">1</span></span><br><span class="line"> <span class="number">1.1</span>     <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x : <span class="built_in">f64</span> = <span class="number">2.71828</span>;</span><br><span class="line">    <span class="keyword">let</span> y = x.round() <span class="keyword">as</span> <span class="built_in">i64</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; &#123;&#125;"</span>, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2.71828 3</code></p><p><br></p><h3 id="82-Count-substring-occurrences"><a href="#82-Count-substring-occurrences" class="headerlink" title="82. Count substring occurrences"></a>82. <font color="f3de2c">Count substring occurrences</font></h3><p><em>统计子字符串出现次数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Romaromamam"</span></span><br><span class="line">t := <span class="string">"mam"</span></span><br><span class="line"></span><br><span class="line">x := strings.Count(s, t)</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"lorem ipsum lorem ipsum lorem ipsum lorem ipsum"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="string">"ipsum"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> c = s.matches(t).count();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; occurrences"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Disjoint matches: overlapping occurrences are not counted.</strong></p><p><code>4 occurrences</code></p><p><br></p><h3 id="83-Regex-with-character-repetition"><a href="#83-Regex-with-character-repetition" class="headerlink" title="83. Regex with character repetition"></a>83. <font color="7cb518">Regex with character repetition</font></h3><blockquote><p>Declare regular expression r matching strings “http”, “htttp”, “httttp”, etc.</p></blockquote><p><em>正则表达式匹配</em>重复字符</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := regexp.MustCompile(<span class="string">"htt+p"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"hp"</span>,</span><br><span class="line"><span class="string">"htp"</span>,</span><br><span class="line"><span class="string">"http"</span>,</span><br><span class="line"><span class="string">"htttp"</span>,</span><br><span class="line"><span class="string">"httttp"</span>,</span><br><span class="line"><span class="string">"htttttp"</span>,</span><br><span class="line"><span class="string">"htttttp"</span>,</span><br><span class="line"><span class="string">"word htttp in a sentence"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">fmt.Println(s, <span class="string">"=&gt;"</span>, r.MatchString(s))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hp =&gt; <span class="literal">false</span></span><br><span class="line">htp =&gt; <span class="literal">false</span></span><br><span class="line">http =&gt; <span class="literal">true</span></span><br><span class="line">htttp =&gt; <span class="literal">true</span></span><br><span class="line">httttp =&gt; <span class="literal">true</span></span><br><span class="line">htttttp =&gt; <span class="literal">true</span></span><br><span class="line">htttttp =&gt; <span class="literal">true</span></span><br><span class="line">word htttp in a sentence =&gt; <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> regex;</span><br><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> r = Regex::new(<span class="string">r"htt+p"</span>).unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">assert!</span>(r.is_match(<span class="string">"http"</span>));</span><br><span class="line">    <span class="built_in">assert!</span>(r.is_match(<span class="string">"htttp"</span>));</span><br><span class="line">    <span class="built_in">assert!</span>(r.is_match(<span class="string">"httttp"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="84-Count-bits-set-in-integer-binary-representation"><a href="#84-Count-bits-set-in-integer-binary-representation" class="headerlink" title="84. Count bits set in integer binary representation"></a>84. <font color="5c8001">Count bits set in integer binary representation</font></h3><font size="1" color="orange"><br>Count number c of 1s in the integer i in base 2.<br><br>E.g. i=6 → c=2<br><br></font><p><em>计算十进制整型的二进制表示中 1的个数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PopCountUInt64</span><span class="params">(i <span class="keyword">uint64</span>)</span> <span class="params">(c <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// bit population count, see</span></span><br><span class="line"><span class="comment">// http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel</span></span><br><span class="line">i -= (i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x5555555555555555</span></span><br><span class="line">i = (i&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x3333333333333333</span> + i&amp;<span class="number">0x3333333333333333</span></span><br><span class="line">i += i &gt;&gt; <span class="number">4</span></span><br><span class="line">i &amp;= <span class="number">0x0f0f0f0f0f0f0f0f</span></span><br><span class="line">i *= <span class="number">0x0101010101010101</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(i &gt;&gt; <span class="number">56</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PopCountUInt32</span><span class="params">(i <span class="keyword">uint32</span>)</span> <span class="params">(n <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// bit population count, see</span></span><br><span class="line"><span class="comment">// http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel</span></span><br><span class="line">i -= (i &gt;&gt; <span class="number">1</span>) &amp; <span class="number">0x55555555</span></span><br><span class="line">i = (i&gt;&gt;<span class="number">2</span>)&amp;<span class="number">0x33333333</span> + i&amp;<span class="number">0x33333333</span></span><br><span class="line">i += i &gt;&gt; <span class="number">4</span></span><br><span class="line">i &amp;= <span class="number">0x0f0f0f0f</span></span><br><span class="line">i *= <span class="number">0x01010101</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">int</span>(i &gt;&gt; <span class="number">24</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint64</span>(<span class="number">0</span>); i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line">c := PopCountUInt64(i)</span><br><span class="line">fmt.Printf(<span class="string">"%4d %04[1]b %d\n"</span>, i, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint32</span>(<span class="number">0</span>); i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line">c := PopCountUInt32(i)</span><br><span class="line">fmt.Printf(<span class="string">"%4d %04[1]b %d\n"</span>, i, c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> <span class="number">0000</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0001</span> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0010</span> <span class="number">1</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0011</span> <span class="number">2</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0100</span> <span class="number">1</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0101</span> <span class="number">2</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0110</span> <span class="number">2</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0111</span> <span class="number">3</span></span><br><span class="line"> <span class="number">8</span> <span class="number">1000</span> <span class="number">1</span></span><br><span class="line"> <span class="number">9</span> <span class="number">1001</span> <span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1010</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">1011</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">1100</span> <span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">1101</span> <span class="number">3</span></span><br><span class="line"><span class="number">14</span> <span class="number">1110</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">1111</span> <span class="number">4</span></span><br><span class="line"> <span class="number">0</span> <span class="number">0000</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0001</span> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0010</span> <span class="number">1</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0011</span> <span class="number">2</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0100</span> <span class="number">1</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0101</span> <span class="number">2</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0110</span> <span class="number">2</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0111</span> <span class="number">3</span></span><br><span class="line"> <span class="number">8</span> <span class="number">1000</span> <span class="number">1</span></span><br><span class="line"> <span class="number">9</span> <span class="number">1001</span> <span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1010</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">1011</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">1100</span> <span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">1101</span> <span class="number">3</span></span><br><span class="line"><span class="number">14</span> <span class="number">1110</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">1111</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><p><em>This was useful only before go 1.9.<br>See math/bits.OnesCount instead</em></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/bits"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">uint</span>(<span class="number">0</span>); i &lt; <span class="number">16</span>; i++ &#123;</span><br><span class="line">c := bits.OnesCount(i)</span><br><span class="line">fmt.Printf(<span class="string">"%4d %04[1]b %d\n"</span>, i, c)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">0</span> <span class="number">0000</span> <span class="number">0</span></span><br><span class="line"> <span class="number">1</span> <span class="number">0001</span> <span class="number">1</span></span><br><span class="line"> <span class="number">2</span> <span class="number">0010</span> <span class="number">1</span></span><br><span class="line"> <span class="number">3</span> <span class="number">0011</span> <span class="number">2</span></span><br><span class="line"> <span class="number">4</span> <span class="number">0100</span> <span class="number">1</span></span><br><span class="line"> <span class="number">5</span> <span class="number">0101</span> <span class="number">2</span></span><br><span class="line"> <span class="number">6</span> <span class="number">0110</span> <span class="number">2</span></span><br><span class="line"> <span class="number">7</span> <span class="number">0111</span> <span class="number">3</span></span><br><span class="line"> <span class="number">8</span> <span class="number">1000</span> <span class="number">1</span></span><br><span class="line"> <span class="number">9</span> <span class="number">1001</span> <span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">1010</span> <span class="number">2</span></span><br><span class="line"><span class="number">11</span> <span class="number">1011</span> <span class="number">3</span></span><br><span class="line"><span class="number">12</span> <span class="number">1100</span> <span class="number">2</span></span><br><span class="line"><span class="number">13</span> <span class="number">1101</span> <span class="number">3</span></span><br><span class="line"><span class="number">14</span> <span class="number">1110</span> <span class="number">3</span></span><br><span class="line"><span class="number">15</span> <span class="number">1111</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="number">6usize</span>.count_ones())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2</code></p><p><br></p><h3 id="85-Check-if-integer-addition-will-overflow"><a href="#85-Check-if-integer-addition-will-overflow" class="headerlink" title="85. Check if integer addition will overflow"></a>85. <font color="fbb02d">Check if integer addition will overflow</font></h3><p><em>检查两个整型相加是否溢出</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">willAddOverflow</span><span class="params">(a, b <span class="keyword">int64</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; math.MaxInt64-b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">fmt.Println(willAddOverflow(<span class="number">11111111111111111</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>false</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">adding_will_overflow</span></span>(x: <span class="built_in">usize</span>, y: <span class="built_in">usize</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    x.checked_add(y).is_none()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345678</span>, <span class="number">9012345</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = adding_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; + &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345678901</span>, <span class="number">9012345678</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = adding_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; + &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345678901234</span>, <span class="number">9012345678901</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = adding_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; + &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">23456789012345678</span>, <span class="number">90123456789012345</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = adding_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; + &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">12345678901234567890</span>, <span class="number">9012345678901234567</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = adding_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; + &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2345678</span> + <span class="number">9012345</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">2345678901</span> + <span class="number">9012345678</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">2345678901234</span> + <span class="number">9012345678901</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">23456789012345678</span> + <span class="number">90123456789012345</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">12345678901234567890</span> + <span class="number">9012345678901234567</span> overflows</span><br></pre></td></tr></table></figure><p><br></p><h3 id="86-Check-if-integer-multiplication-will-overflow"><a href="#86-Check-if-integer-multiplication-will-overflow" class="headerlink" title="86. Check if integer multiplication will overflow"></a>86. <font color="bfbdc1">Check if integer multiplication will overflow</font></h3><p><em>检查整型相乘是否溢出</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiplyWillOverflow</span><span class="params">(x, y <span class="keyword">uint64</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> x &lt;= <span class="number">1</span> || y &lt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">d := x * y</span><br><span class="line"><span class="keyword">return</span> d/y != x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">uint64</span> = <span class="number">2345</span>, <span class="number">6789</span></span><br><span class="line"><span class="keyword">if</span> multiplyWillOverflow(x, y) &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"overflows"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"doesn't overflow"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">uint64</span> = <span class="number">2345678</span>, <span class="number">9012345</span></span><br><span class="line"><span class="keyword">if</span> multiplyWillOverflow(x, y) &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"overflows"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"doesn't overflow"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> x, y <span class="keyword">uint64</span> = <span class="number">2345678901</span>, <span class="number">9012345678</span></span><br><span class="line"><span class="keyword">if</span> multiplyWillOverflow(x, y) &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"overflows"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(x, <span class="string">"*"</span>, y, <span class="string">"doesn't overflow"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2345</span> * <span class="number">6789</span> doesn<span class="string">'t overflow</span></span><br><span class="line"><span class="string">2345678 * 9012345 doesn'</span>t overflow</span><br><span class="line"><span class="number">2345678901</span> * <span class="number">9012345678</span> overflows</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345</span>, <span class="number">6789</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = multiply_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; * &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345678</span>, <span class="number">9012345</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = multiply_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; * &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> (x, y) = (<span class="number">2345678901</span>, <span class="number">9012345678</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> overflow = multiply_will_overflow(x, y);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(</span><br><span class="line">            <span class="string">"&#123;&#125; * &#123;&#125; &#123;&#125;"</span>,</span><br><span class="line">            x,</span><br><span class="line">            y,</span><br><span class="line">            <span class="keyword">if</span> overflow &#123;</span><br><span class="line">                <span class="string">"overflows"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="string">"doesn't overflow"</span></span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">multiply_will_overflow</span></span>(x: <span class="built_in">i64</span>, y: <span class="built_in">i64</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    x.checked_mul(y).is_none()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2345</span> * <span class="number">6789</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">2345678</span> * <span class="number">9012345</span> doesn<span class="symbol">'t</span> overflow</span><br><span class="line"><span class="number">2345678901</span> * <span class="number">9012345678</span> overflows</span><br></pre></td></tr></table></figure><p><br></p><h3 id="87-Stop-program"><a href="#87-Stop-program" class="headerlink" title="87. Stop program"></a>87. <font color="37323e">Stop program</font></h3><blockquote><p>Exit immediatly.<br> If some extra cleanup work is executed by the program runtime (not by the OS itself), describe it.</p></blockquote><p><em>停止程序,立即退出。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2222</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    std::process::exit(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"42"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="88-Allocate-1M-bytes"><a href="#88-Allocate-1M-bytes" class="headerlink" title="88. Allocate 1M bytes"></a>88. <font color="deb841">Allocate 1M bytes</font></h3><p><em>分配1M内存</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, b := <span class="keyword">range</span> buf &#123;</span><br><span class="line"><span class="keyword">if</span> b != <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found unexpected value"</span>, b, <span class="string">"at position"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Buffer was correctly initialized with zero values."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Buffer was correctly initialized with zero values.</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> buf: <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt; = <span class="built_in">Vec</span>::with_capacity(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, buf.capacity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1048576</code></p><p><br></p><h3 id="89-Handle-invalid-argument"><a href="#89-Handle-invalid-argument" class="headerlink" title="89. Handle invalid argument"></a>89. <font color="580aff">Handle invalid argument</font></h3><p><em>处理无效参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NewSquareMatrix creates a N-by-N matrix</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewSquareMatrix</span><span class="params">(N <span class="keyword">int</span>)</span> <span class="params">([][]<span class="keyword">float64</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> N &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"Invalid size %d: order cannot be negative"</span>, N)</span><br><span class="line">&#125;</span><br><span class="line">matrix := <span class="built_in">make</span>([][]<span class="keyword">float64</span>, N)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> matrix &#123;</span><br><span class="line">matrix[i] = <span class="built_in">make</span>([]<span class="keyword">float64</span>, N)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> matrix, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">N1 := <span class="number">3</span></span><br><span class="line">matrix1, err1 := NewSquareMatrix(N1)</span><br><span class="line"><span class="keyword">if</span> err1 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(matrix1)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">N2 := <span class="number">-2</span></span><br><span class="line">matrix2, err2 := NewSquareMatrix(N2)</span><br><span class="line"><span class="keyword">if</span> err2 == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(matrix2)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(err2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line">Invalid size <span class="number">-2</span>: order cannot be negative</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug, PartialEq, Eq)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CustomError</span></span> &#123; InvalidAnswer &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_stuff</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">i32</span>, CustomError&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> x != <span class="number">42</span> &#123;</span><br><span class="line">%<span class="number">2</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="90-Read-only-outside"><a href="#90-Read-only-outside" class="headerlink" title="90. Read-only outside"></a>90. <font color="de9e36">Read-only outside</font></h3><p><em>外部只读</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> &#123;</span><br><span class="line">x <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *Foo)</span> <span class="title">X</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> f.x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x is private, because it is not capitalized.</span><br><span class="line">(*Foo).X is a public getter (a read accessor).</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">usize</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Foo &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(x: <span class="built_in">usize</span>) -&gt; <span class="keyword">Self</span> &#123;</span><br><span class="line">        Foo &#123; x &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">x</span></span>&lt;<span class="symbol">'a</span>&gt;(&amp;<span class="symbol">'a</span> <span class="keyword">self</span>) -&gt; &amp;<span class="symbol">'a</span> <span class="built_in">usize</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="91-Load-JSON-file-into-struct"><a href="#91-Load-JSON-file-into-struct" class="headerlink" title="91. Load JSON file into struct"></a>91. <font color="031d44">Load JSON file into struct</font></h3><p><em>json转结构体</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"io/ioutil"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readJSONFile</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Person</span><br><span class="line"></span><br><span class="line">buffer, err := ioutil.ReadFile(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = json.Unmarshal(buffer, &amp;x)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := readJSONFile()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">Age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">"/tmp/data.json"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(filename, []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"FirstName":"Napoléon",</span></span><br><span class="line"><span class="string">"Age": 51 </span></span><br><span class="line"><span class="string">&#125;`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{Napoléon 51}</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/json"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readJSONFile</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x Person</span><br><span class="line"></span><br><span class="line">r, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">decoder := json.NewDecoder(r)</span><br><span class="line">err = decoder.Decode(&amp;x)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := readJSONFile()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">Age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">"/tmp/data.json"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(filename, []<span class="keyword">byte</span>(<span class="string">`</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">"FirstName":"Napoléon",</span></span><br><span class="line"><span class="string">"Age": 51 </span></span><br><span class="line"><span class="string">&#125;`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{Napoléon 51}</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> serde_derive;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_json;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">let</span> x = ::serde_json::from_reader(File::open(<span class="string">"data.json"</span>)?)?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="92-Save-object-into-JSON-file"><a href="#92-Save-object-into-JSON-file" class="headerlink" title="92. Save object into JSON file"></a>92. <font color="04395e">Save object into JSON file</font></h3><p><em>将json对象写入文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"io/ioutil"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"encoding/json"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">writeJSONFile</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">x := Person&#123;</span><br><span class="line">FirstName: <span class="string">"Napoléon"</span>,</span><br><span class="line">Age:       <span class="number">51</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">buffer, err := json.MarshalIndent(x, <span class="string">""</span>, <span class="string">"  "</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ioutil.WriteFile(filename, buffer, <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := writeJSONFile()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">Age       <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filename = <span class="string">"/tmp/data.json"</span></span><br></pre></td></tr></table></figure><p><em>json.MarshalIndent is more human-readable than json.Marshal.</em></p><p><code>Done.</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> serde_json;</span><br><span class="line"><span class="meta">#[macro_use]</span> <span class="keyword">extern</span> <span class="keyword">crate</span> serde_derive;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line">::serde_json::to_writer(&amp;File::create(<span class="string">"data.json"</span>)?, &amp;x)?</span><br></pre></td></tr></table></figure><p><br></p><h3 id="93-Pass-a-runnable-procedure-as-parameter"><a href="#93-Pass-a-runnable-procedure-as-parameter" class="headerlink" title="93. Pass a runnable procedure as parameter"></a>93. <font color="70a288">Pass a runnable procedure as parameter</font></h3><blockquote><p>Implement procedure control which receives one parameter f, and runs f.</p></blockquote><p><em>以函数作为参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">control(greet)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">control</span><span class="params">(f <span class="keyword">func</span>()</span>)</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Before f"</span>)</span><br><span class="line">f()</span><br><span class="line">fmt.Println(<span class="string">"After f"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">greet</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, developers"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Go supports first class functions, higher-order functions, user-defined function types, function literals, and closures.</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Before f</span><br><span class="line">Hello, developers</span><br><span class="line">After f</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">control</span></span>(f: <span class="keyword">impl</span> <span class="built_in">Fn</span>()) &#123;</span><br><span class="line">    f();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">hello</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello,"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    control(hello);</span><br><span class="line">    control(|| &#123; <span class="built_in">println!</span>(<span class="string">"Is there anybody in there?"</span>); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hello,</span><br><span class="line">Is there anybody <span class="keyword">in</span> there?</span><br></pre></td></tr></table></figure><p><br></p><h3 id="94-Print-type-of-variable"><a href="#94-Print-type-of-variable" class="headerlink" title="94. Print type of variable"></a>94. <font color="dab785">Print type of variable</font></h3><p><em>打印变量的类型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="string">"Hello"</span></span><br><span class="line">fmt.Println(reflect.TypeOf(x))</span><br><span class="line"></span><br><span class="line">x = <span class="number">4</span></span><br><span class="line">fmt.Println(reflect.TypeOf(x))</span><br><span class="line"></span><br><span class="line">x = os.NewFile(<span class="number">0777</span>, <span class="string">"foobar.txt"</span>)</span><br><span class="line">fmt.Println(reflect.TypeOf(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">*os.File</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">x = <span class="string">"Hello"</span></span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, x)</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">x = <span class="number">4</span></span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, x)</span><br><span class="line">fmt.Println()</span><br><span class="line"></span><br><span class="line">x = os.NewFile(<span class="number">0777</span>, <span class="string">"foobar.txt"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, x)</span><br><span class="line">fmt.Println()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">*os.File</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![feature(core_intrinsics)]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">type_of</span></span>&lt;T&gt;(_: &amp;T) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">"&#123;&#125;"</span>, std::intrinsics::type_name::&lt;T&gt;())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">i32</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, type_of(&amp;x));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>i32</code></p><p><br></p><h3 id="95-Get-file-size"><a href="#95-Get-file-size" class="headerlink" title="95. Get file size"></a>95. <font color="d5896f">Get file size</font></h3><p><em>获取文件的大小</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := printSize(<span class="string">"file.txt"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSize</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">info, err := os.Stat(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">x := info.Size()</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// The file will only contains the characters "Hello", no newlines.</span></span><br><span class="line">buffer := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"file.txt"</span>, buffer, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>5</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">filesize</span></span>(path: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">u64</span>, std::io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> x = fs::metadata(path)?.len();</span><br><span class="line">    <span class="literal">Ok</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/etc/hosts"</span>;</span><br><span class="line">    <span class="keyword">let</span> x = filesize(path);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;:?&#125; bytes"</span>, path, x.unwrap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/etc/hosts: 150 bytes</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">filesize</span></span>(path: &amp;std::path::Path) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">u64</span>, std::io::Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> x = path.metadata()?.len();</span><br><span class="line">    <span class="literal">Ok</span>(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = Path::new(<span class="string">"/etc/hosts"</span>);</span><br><span class="line">    <span class="keyword">let</span> x = filesize(path);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;: &#123;:?&#125; bytes"</span>, path, x.unwrap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;/etc/hosts&quot;: 150 bytes</code></p><p><br></p><h3 id="96-Check-string-prefix"><a href="#96-Check-string-prefix" class="headerlink" title="96. Check string prefix"></a>96. <font color="e8d6cb">Check string prefix</font></h3><blockquote><p>Set boolean b to true if string s starts with prefix prefix, false otherwise.</p></blockquote><p><em>检查两个字符串前缀是否一致</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(s, prefix <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">b := strings.HasPrefix(s, prefix)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(s, <span class="string">"starts with"</span>, prefix)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(s, <span class="string">"doesn't start with"</span>, prefix)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">check(<span class="string">"bar"</span>, <span class="string">"foo"</span>)</span><br><span class="line">check(<span class="string">"foobar"</span>, <span class="string">"foo"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bar doesn<span class="string">'t start with foo</span></span><br><span class="line"><span class="string">foobar starts with foo</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"bananas"</span>;</span><br><span class="line">    <span class="keyword">let</span> prefix = <span class="string">"bana"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = s.starts_with(prefix);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><p><br></p><h3 id="97-Check-string-suffix"><a href="#97-Check-string-suffix" class="headerlink" title="97. Check string suffix"></a>97. <font color="d0ada7">Check string suffix</font></h3><blockquote><p>Set boolean b to true if string s ends with string suffix, false otherwise.</p></blockquote><p><em>检查字符串后缀</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(s, suffix <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">b := strings.HasSuffix(s, suffix)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> b &#123;</span><br><span class="line">fmt.Println(s, <span class="string">"ends with"</span>, suffix)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(s, <span class="string">"doesn't end with"</span>, suffix)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">check(<span class="string">"foo"</span>, <span class="string">"bar"</span>)</span><br><span class="line">check(<span class="string">"foobar"</span>, <span class="string">"bar"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo doesn<span class="string">'t end with bar</span></span><br><span class="line"><span class="string">foobar ends with bar</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"bananas"</span>;</span><br><span class="line">    <span class="keyword">let</span> suffix = <span class="string">"nas"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = s.ends_with(suffix);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>true</code></p><p><br></p><h3 id="98-Epoch-seconds-to-date-object"><a href="#98-Epoch-seconds-to-date-object" class="headerlink" title="98. Epoch seconds to date object"></a>98. <font color="ad6a6c">Epoch seconds to date object</font></h3><blockquote><p>Convert a timestamp ts (number of seconds in epoch-time) to a date with time d. E.g. 0 -&gt; 1970-01-01 00:00:00</p></blockquote><p><em>时间戳转日期</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ts := <span class="keyword">int64</span>(<span class="number">1451606400</span>)</span><br><span class="line">d := time.Unix(ts, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(d)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2016-01-01 00:00:00 +0000 UTC</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> chrono;</span><br><span class="line"><span class="keyword">use</span> chrono::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> ts = <span class="number">1451606400</span>;</span><br><span class="line">    <span class="keyword">let</span> d = NaiveDateTime::from_timestamp(ts, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2016-01-01 00:00:00</code></p><p><br></p><h3 id="99-Format-date-YYYY-MM-DD"><a href="#99-Format-date-YYYY-MM-DD" class="headerlink" title="99. Format date YYYY-MM-DD"></a>99. <font color="5d2e46">Format date YYYY-MM-DD</font></h3><blockquote><p>Assign to string x the value of fields (year, month, day) of date d, in format YYYY-MM-DD.</p></blockquote><p><em>时间格式转换</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := time.Now()</span><br><span class="line">x := d.Format(<span class="string">"2006-01-02"</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The output may be "2009-11-10" because the Playground's clock is fixed in the past.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2009-11-10</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> chrono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> chrono::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, Utc::today().format(<span class="string">"%Y-%m-%d"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2021-07-17</code></p><p><br></p><h3 id="100-Sort-by-a-comparator"><a href="#100-Sort-by-a-comparator" class="headerlink" title="100. Sort by a comparator"></a>100. <font color="b58db6">Sort by a comparator</font></h3><blockquote><p>Sort elements of array-like collection items, using a comparator c.</p></blockquote><p><em>根据某个字段排序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c returns true if x is "inferior to" y (in a custom way)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">(x, y Item)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.p &lt; y.p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ItemCSorter []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemCSorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemCSorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> c(s[i], s[j]) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemCSorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortItems</span><span class="params">(items []Item)</span></span> &#123;</span><br><span class="line">sorter := ItemCSorter(items)</span><br><span class="line">sort.Sort(sorter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line">sortItems(items)</span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>c has type func(Item, Item) bool.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ItemsSorter <span class="keyword">struct</span> &#123;</span><br><span class="line">items []Item</span><br><span class="line">c     <span class="function"><span class="keyword">func</span><span class="params">(x, y Item)</span> <span class="title">bool</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemsSorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s.items) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemsSorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s.c(s.items[i], s.items[j]) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemsSorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s.items[i], s.items[j] = s.items[j], s.items[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortItems</span><span class="params">(items []Item, c <span class="keyword">func</span>(x, y Item)</span> <span class="title">bool</span>)</span> &#123;</span><br><span class="line">sorter := ItemsSorter&#123;</span><br><span class="line">items,</span><br><span class="line">c,</span><br><span class="line">&#125;</span><br><span class="line">sort.Sort(sorter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line"></span><br><span class="line">c := <span class="function"><span class="keyword">func</span><span class="params">(x, y Item)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.p &lt; y.p</span><br><span class="line">&#125;</span><br><span class="line">sortItems(items, c)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItemsSorter contains c, which can be any comparator decided at runtime.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// c returns true if x is "inferior to" y (in a custom way)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">c</span><span class="params">(x, y Item)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x.p &lt; y.p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line"></span><br><span class="line">sort.Slice(items, <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c(items[i], items[j])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Since Go 1.8, a single func parameter is sufficient to sort a slice.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    items.sort_by(<span class="built_in">i32</span>::cmp);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 5, 7]</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;81-Round-floating-point-number-to-integer&quot;&gt;&lt;a href=&quot;#81-Round-floating-point-number-to-integer&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(4)</title>
    <link href="http://www.dashen.tech/2021/09/05/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-4/"/>
    <id>http://www.dashen.tech/2021/09/05/Rust-vs-Go-常用语法对比-4/</id>
    <published>2021-09-05T13:40:04.000Z</published>
    <updated>2021-09-21T02:55:55.474Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="61-Get-current-date"><a href="#61-Get-current-date" class="headerlink" title="61. Get current date"></a>61. <font color="ff0000">Get current date</font></h3><p><em>获取当前时间</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := time.Now()</span><br><span class="line">fmt.Println(<span class="string">"Now is"</span>, d)</span><br><span class="line"><span class="comment">// The Playground has a special sandbox, so you may get a Time value fixed in the past.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Now is 2009-11-10 23:00:00 +0000 UTC m=+0.000000001</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> time;</span><br><span class="line"><span class="keyword">let</span> d = time::now();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::SystemTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = SystemTime::now();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SystemTime { tv_sec: 1526318418, tv_nsec: 699329521 }</code></p><p><br></p><h3 id="62-Find-substring-position"><a href="#62-Find-substring-position" class="headerlink" title="62. Find substring position"></a>62. <font color="ff8700">Find substring position</font></h3><p><em>字符串查找</em></p><p>查找子字符串位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="string">"été chaud"</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">y := <span class="string">"chaud"</span></span><br><span class="line">i := strings.Index(x, y)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">y := <span class="string">"froid"</span></span><br><span class="line">i := strings.Index(x, y)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>i is the byte index of y in x, not the character (rune) index.<br>i will be -1 if y is not found in x.</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"été chaud"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"chaud"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = x.find(y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"froid"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = x.find(y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Some</span>(<span class="number">6</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="63-Replace-fragment-of-a-string"><a href="#63-Replace-fragment-of-a-string" class="headerlink" title="63. Replace fragment of a string"></a>63. <font color="ffd300">Replace fragment of a string</font></h3><p><em>替换字符串片段</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="string">"oink oink oink"</span></span><br><span class="line">y := <span class="string">"oink"</span></span><br><span class="line">z := <span class="string">"moo"</span></span><br><span class="line">x2 := strings.Replace(x, y, z, <span class="number">-1</span>)</span><br><span class="line">fmt.Println(x2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>moo moo moo</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"lorem ipsum dolor lorem ipsum"</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"lorem"</span>;</span><br><span class="line">    <span class="keyword">let</span> z = <span class="string">"LOREM"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x2 = x.replace(&amp;y, &amp;z);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LOREM ipsum dolor LOREM ipsum</code></p><p><br></p><h3 id="64-Big-integer-value-3-power-247"><a href="#64-Big-integer-value-3-power-247" class="headerlink" title="64. Big integer : value 3 power 247"></a>64. <font color="deff0a">Big integer : value 3 power 247</font></h3><p><em>超大整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="built_in">new</span>(big.Int)</span><br><span class="line">x.Exp(big.NewInt(<span class="number">3</span>), big.NewInt(<span class="number">247</span>), <span class="literal">nil</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>7062361041362837614435796717454722507454089864783271756927542774477268334591598635421519542453366332460075473278915787</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"><span class="keyword">use</span> num::bigint::ToBigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>.to_bigint().unwrap();</span><br><span class="line">    <span class="keyword">let</span> x = num::pow(a, <span class="number">247</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>7062361041362837614435796717454722507454089864783271756927542774477268334591598635421519542453366332460075473278915787</code></p><p><br></p><h3 id="65-Format-decimal-number"><a href="#65-Format-decimal-number" class="headerlink" title="65. Format decimal number"></a>65. <font color="a1ff0a">Format decimal number</font></h3><p><em>格式化十进制数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">0.15625</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%.1f%%"</span>, <span class="number">100.0</span>*x)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>15.6%</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0.15625f64</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:.1&#125;%"</span>, <span class="number">100.0</span> * x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>15.6%</code></p><p><br></p><h3 id="66-Big-integer-exponentiation"><a href="#66-Big-integer-exponentiation" class="headerlink" title="66. Big integer exponentiation"></a>66. <font color="0aff99">Big integer exponentiation</font></h3><p><em>大整数幂运算</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exp</span><span class="params">(x *big.Int, n <span class="keyword">int</span>)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">nb := big.NewInt(<span class="keyword">int64</span>(n))</span><br><span class="line"><span class="keyword">var</span> z big.Int</span><br><span class="line">z.Exp(x, nb, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">3</span>)</span><br><span class="line">n := <span class="number">5</span></span><br><span class="line">z := exp(x, n)</span><br><span class="line">fmt.Println(z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>243</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = BigInt::parse_bytes(<span class="string">b"600000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">42</span>%</span><br></pre></td></tr></table></figure><p><br></p><h3 id="67-Binomial-coefficient-“n-choose-k”"><a href="#67-Binomial-coefficient-“n-choose-k”" class="headerlink" title="67. Binomial coefficient “n choose k”"></a>67. <font color="0aefff">Binomial coefficient “n choose k”</font></h3><blockquote><p>Calculate binom(n, k) = n! / (k! * (n-k)!). Use an integer type able to handle huge numbers.</p></blockquote><p><em>二项式系数“n选择k”</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">z := <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line">z.Binomial(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(z)</span><br><span class="line"></span><br><span class="line">z.Binomial(<span class="number">133</span>, <span class="number">71</span>)</span><br><span class="line">fmt.Println(z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">555687036928510235891585199545206017600</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num::bigint::ToBigInt;</span><br><span class="line"><span class="keyword">use</span> num::traits::One;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">binom</span></span>(n: <span class="built_in">u64</span>, k: <span class="built_in">u64</span>) -&gt; BigInt &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> res = BigInt::one();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..k &#123;</span><br><span class="line">        res = (res * (n - i).to_bigint().unwrap()) /</span><br><span class="line">              (i + <span class="number">1</span>).to_bigint().unwrap();</span><br><span class="line">    &#125;</span><br><span class="line">    res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">133</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">71</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, binom(n, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>555687036928510235891585199545206017600</code></p><p><br></p><h3 id="68-Create-a-bitset"><a href="#68-Create-a-bitset" class="headerlink" title="68. Create a bitset"></a>68. <font color="147df5">Create a bitset</font></h3><p><em>创建位集合</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x *big.Int = <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line">x.SetBit(x, <span class="number">42</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x.Bit(y))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="number">0</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="number">1</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line"></span><br><span class="line">x[<span class="number">42</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x[y])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="literal">false</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">x := NewBitset(n)</span><br><span class="line"></span><br><span class="line">x.SetBit(<span class="number">13</span>)</span><br><span class="line">x.SetBit(<span class="number">42</span>)</span><br><span class="line">x.ClearBit(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x.GetBit(y))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bitset []<span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBitset</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">Bitset</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make</span>(Bitset, (n+<span class="number">63</span>)/<span class="number">64</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">GetBit</span><span class="params">(index <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line"><span class="keyword">return</span> (b[pos] &amp; (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)) != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">SetBit</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line">b[pos] |= (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">ClearBit</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line">b[pos] ^= (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="literal">false</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="literal">false</span>; n];</span><br><span class="line"></span><br><span class="line">    x[<span class="number">3</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]</code></p><p><br></p><h3 id="69-Seed-random-generator"><a href="#69-Seed-random-generator" class="headerlink" title="69. Seed random generator"></a>69. <font color="580aff">Seed random generator</font></h3><blockquote><p>Use seed s to initialize a random generator.</p></blockquote><blockquote><p>If s is constant, the generator output will be the same each time the program runs. If s is based on the current value of the system clock, the generator output will be different each time.</p></blockquote><p><em>随机种子生成器</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">int64</span> = <span class="number">42</span></span><br><span class="line">rand.Seed(s)</span><br><span class="line">fmt.Println(rand.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3440579354231278675</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">int64</span> = <span class="number">42</span></span><br><span class="line">r := rand.New(rand.NewSource(s))</span><br><span class="line">fmt.Println(r.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3440579354231278675</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;Rng, SeedableRng, rngs::StdRng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::seed_from_u64(s);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rng.gen::&lt;<span class="built_in">f32</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0.35038823</code></p><p><br></p><h3 id="70-Use-clock-as-random-generator-seed"><a href="#70-Use-clock-as-random-generator-seed" class="headerlink" title="70. Use clock as random generator seed"></a>70. <font color="be0aff">Use clock as random generator seed</font></h3><blockquote><p>Get the current datetime and provide it as a seed to a random generator. The generator sequence will be different at each run.</p></blockquote><p><em>使用时钟作为随机生成器的种子</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="comment">// Well, the playground date is actually fixed in the past, and the</span></span><br><span class="line"><span class="comment">// output is cached.</span></span><br><span class="line"><span class="comment">// But if you run this on your workstation, the output will vary.</span></span><br><span class="line">fmt.Println(rand.Intn(<span class="number">999</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>524</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line"><span class="comment">// Well, the playground date is actually fixed in the past, and the</span></span><br><span class="line"><span class="comment">// output is cached.</span></span><br><span class="line"><span class="comment">// But if you run this on your workstation, the output will vary.</span></span><br><span class="line">fmt.Println(r.Intn(<span class="number">999</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>524</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;Rng, SeedableRng, rngs::StdRng&#125;;</span><br><span class="line"><span class="keyword">use</span> std::time::SystemTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = SystemTime::now()</span><br><span class="line">        .duration_since(SystemTime::UNIX_EPOCH)</span><br><span class="line">        .expect(<span class="string">"Duration since UNIX_EPOCH failed"</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::seed_from_u64(d.as_secs());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rng.gen::&lt;<span class="built_in">f32</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0.7326781</code></p><p><br></p><h3 id="71-Echo-program-implementation"><a href="#71-Echo-program-implementation" class="headerlink" title="71. Echo program implementation"></a>71. <font color="072ac8">Echo program implementation</font></h3><blockquote><p>Basic implementation of the Echo program: Print all arguments except the program name, separated by space, followed by newline.<br>The idiom demonstrates how to skip the first argument if necessary, concatenate arguments as strings, append newline and print it to stdout.</p></blockquote><p><em>实现 Echo 程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Join(os.Args[<span class="number">1</span>:], <span class="string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, env::args().skip(<span class="number">1</span>).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;().join(<span class="string">" "</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, std::env::args().skip(<span class="number">1</span>).format(<span class="string">" "</span>));</span><br></pre></td></tr></table></figure><p><br></p><h3 id="74-Compute-GCD"><a href="#74-Compute-GCD" class="headerlink" title="74. Compute GCD"></a>74. <font color="60b6fb">Compute GCD</font></h3><blockquote><pre><code>Compute the greatest common divisor x of big integers a and b. Use an integer type able to handle huge numbers.</code></pre></blockquote><p><em>计算大整数a和b的最大公约数x。使用能够处理大数的整数类型。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b, x := <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int)</span><br><span class="line">a.SetString(<span class="string">"6000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">b.SetString(<span class="string">"9000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">x.GCD(<span class="literal">nil</span>, <span class="literal">nil</span>, a, b)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3000000000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::Integer;</span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = BigInt::parse_bytes(<span class="string">b"6000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> b = BigInt::parse_bytes(<span class="string">b"9000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> x = a.gcd(&amp;b);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3000000000000</code></p><p><br></p><h3 id="75-Compute-LCM"><a href="#75-Compute-LCM" class="headerlink" title="75. Compute LCM"></a>75. <font color="a2d6f9">Compute LCM</font></h3><p><em>计算大整数a和b的最小公倍数x。使用能够处理大数的整数类型。</em></p><blockquote><p>   Compute the least common multiple x of big integers a and b. Use an integer type able to handle huge numbers.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b, gcd, x := <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int)</span><br><span class="line">a.SetString(<span class="string">"6000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">b.SetString(<span class="string">"9000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">gcd.GCD(<span class="literal">nil</span>, <span class="literal">nil</span>, a, b)</span><br><span class="line">x.Div(a, gcd).Mul(x, b)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>18000000000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num::Integer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = BigInt::parse_bytes(<span class="string">b"6000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> b = BigInt::parse_bytes(<span class="string">b"9000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> x = a.lcm(&amp;b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x = &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>x = 18000000000000</code></p><p><br></p><h3 id="76-Binary-digits-from-an-integer"><a href="#76-Binary-digits-from-an-integer" class="headerlink" title="76. Binary digits from an integer"></a>76. <font color="cfe57d">Binary digits from an integer</font></h3><blockquote><p>Create the string s of integer x written in base 2. <br> E.g. 13 -&gt; “1101”</p></blockquote><p><em>将十进制整数转换为二进制数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">int64</span>(<span class="number">13</span>)</span><br><span class="line">s := strconv.FormatInt(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">13</span>)</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%b"</span>, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:b&#125;"</span>, x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><p><br></p><h3 id="77-SComplex-number"><a href="#77-SComplex-number" class="headerlink" title="77. SComplex number"></a>77. <font color="fcf300">SComplex number</font></h3><blockquote><p>Declare a complex x and initialize it with value (3i - 2). Then multiply it by i.</p></blockquote><p><em>复数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">3i</span> - <span class="number">2</span></span><br><span class="line">x *= <span class="number">1i</span></span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Print(reflect.TypeOf(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">-3</span><span class="number">-2i</span>)</span><br><span class="line"><span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"><span class="keyword">use</span> num::Complex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = Complex::new(-<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    x *= Complex::i();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-3-2i</code></p><p><br></p><h3 id="78-“do-while”-loop"><a href="#78-“do-while”-loop" class="headerlink" title="78. “do while” loop"></a>78. <font color="ffc600">“do while” loop</font></h3><blockquote><pre><code>Execute a block once, then execute it again as long as boolean condition c is true.</code></pre></blockquote><p><em>循环执行</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">x := rollDice()</span><br><span class="line">fmt.Println(<span class="string">"Got"</span>, x)</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollDice</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + rand.Intn(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Go has no do while loop, use the for loop, instead.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">4</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">1</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">3</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> done := <span class="literal">false</span>; !done; &#123;</span><br><span class="line">x := rollDice()</span><br><span class="line">fmt.Println(<span class="string">"Got"</span>, x)</span><br><span class="line">done = x == <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollDice</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + rand.Intn(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">4</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">1</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    doStuff();</span><br><span class="line">    <span class="keyword">if</span> !c &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Rust has no do-while loop with syntax sugar. Use loop and break.</strong></p><p><br></p><h3 id="79-Convert-integer-to-floating-point-number"><a href="#79-Convert-integer-to-floating-point-number" class="headerlink" title="79. Convert integer to floating point number"></a>79. <font color="fedd00">Convert integer to floating point number</font></h3><blockquote><pre><code>Declare floating point number y and initialize it with the value of integer x .</code></pre></blockquote><p><em>整型转浮点型</em></p><p><em>声明浮点数y并用整数x的值初始化它。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">5</span></span><br><span class="line">y := <span class="keyword">float64</span>(x)</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">fmt.Printf(<span class="string">"%.2f\n"</span>, y)</span><br><span class="line">fmt.Println(reflect.TypeOf(y))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5.00</span></span><br><span class="line"><span class="keyword">float64</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> f = i <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"int &#123;:?&#125;, float &#123;:?&#125;"</span>, i, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int <span class="number">5</span>, float <span class="number">5.0</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="80-Truncate-floating-point-number-to-integer"><a href="#80-Truncate-floating-point-number-to-integer" class="headerlink" title="80.  Truncate floating point number to integer"></a>80. <font color="ffcb17"> Truncate floating point number to integer</font></h3><blockquote><p>Declare integer y and initialize it with the value of floating point number x . Ignore non-integer digits of x .<br>Make sure to truncate towards zero: a negative x must yield the closest greater integer (not lesser).</p></blockquote><p><em>浮点型转整型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">-6.4</span></span><br><span class="line">b := <span class="number">6.4</span></span><br><span class="line">c := <span class="number">6.6</span></span><br><span class="line">fmt.Println(<span class="keyword">int</span>(a))</span><br><span class="line">fmt.Println(<span class="keyword">int</span>(b))</span><br><span class="line">fmt.Println(<span class="keyword">int</span>(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">41.59999999f64</span>;</span><br><span class="line">    <span class="keyword">let</span> y = x <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>41</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;61-Get-current-date&quot;&gt;&lt;a href=&quot;#61-Get-current-date&quot; class=&quot;headerlink&quot; title=&quot;61. Get current date&quot;&gt;&lt;/a&gt;61. &lt;font color=
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(3)</title>
    <link href="http://www.dashen.tech/2021/09/04/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-3/"/>
    <id>http://www.dashen.tech/2021/09/04/Rust-vs-Go-常用语法对比-3/</id>
    <published>2021-09-04T12:51:13.000Z</published>
    <updated>2021-09-21T02:55:47.770Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="41-Reverse-a-string"><a href="#41-Reverse-a-string" class="headerlink" title="41. Reverse a string"></a>41. <font color="54478c">Reverse a string</font></h3><p><em>反转字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">runes := []<span class="keyword">rune</span>(s)</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(runes)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">runes[i], runes[j] = runes[j], runes[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(runes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">input := <span class="string">"The quick brown 狐 jumped over the lazy 犬"</span></span><br><span class="line">fmt.Println(Reverse(input))</span><br><span class="line"><span class="comment">// Original string unaltered</span></span><br><span class="line">fmt.Println(input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">犬 yzal eht revo depmuj 狐 nworb kciuq ehT</span><br><span class="line">The quick brown 狐 jumped over the lazy 犬</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = s.chars().rev().collect::&lt;<span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"lorém ipsüm dolör sit amor ❤ "</span>;</span><br><span class="line">    <span class="keyword">let</span> t: <span class="built_in">String</span> = s.chars().rev().collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>❤ roma tis rölod müspi mérol</code></p><p><br></p><h3 id="42-Continue-outer-loop"><a href="#42-Continue-outer-loop" class="headerlink" title="42. Continue outer loop"></a>42. <font color="2c699a">Continue outer loop</font></h3><blockquote><p>Print each item v of list a which in not contained in list b.<br>For this, write an outer loop to iterate on a and an inner loop to iterate on b.</p></blockquote><p><em>打印列表a中不包含在列表b中的每个项目v。<br>为此，编写一个外部循环来迭代a，编写一个内部循环来迭代b。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSubtraction</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">mainloop:</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">for</span> _, w := <span class="keyword">range</span> b &#123;</span><br><span class="line"><span class="keyword">if</span> v == w &#123;</span><br><span class="line"><span class="keyword">continue</span> mainloop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">printSubtraction(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mainloop is a label used to refer to the outer loop.</strong></p><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line">    <span class="keyword">let</span> b = [     <span class="string">'b'</span>,      <span class="string">'d'</span>     ];</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">'outer</span>: <span class="keyword">for</span> va <span class="keyword">in</span> &amp;a &#123;</span><br><span class="line">        <span class="keyword">for</span> vb <span class="keyword">in</span> &amp;b &#123;</span><br><span class="line">            <span class="keyword">if</span> va == vb &#123;</span><br><span class="line">                <span class="keyword">continue</span> <span class="symbol">'outer</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, va);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>‘outer is a label used to refer to the outer loop. Labels in Rust start with a ‘.</strong></p><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">c</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p><br></p><h3 id="43-Break-outer-loop"><a href="#43-Break-outer-loop" class="headerlink" title="43. Break outer loop"></a>43. <font color="048ba8">Break outer loop</font></h3><blockquote><p>Look for a negative value v in 2D integer matrix m. Print it and stop searching.</p></blockquote><p><em>在2D整数矩阵m中寻找一个负值v，打印出来，停止搜索。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [][]<span class="keyword">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>, <span class="number">0</span>, <span class="number">30</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">-20</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-60</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mainloop:</span><br><span class="line"><span class="keyword">for</span> i, line := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"Searching in line"</span>, i)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> line &#123;</span><br><span class="line"><span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found "</span>, v)</span><br><span class="line"><span class="keyword">break</span> mainloop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mainloop is a label used to refer to the outer loop.</strong></p><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Searching in line <span class="number">0</span></span><br><span class="line">Searching in line <span class="number">1</span></span><br><span class="line">Searching in line <span class="number">2</span></span><br><span class="line">Found  <span class="number">-20</span></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">0</span>, <span class="number">30</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">5</span>, -<span class="number">20</span>, <span class="number">55</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">0</span>, -<span class="number">60</span>],</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">'outer</span>: <span class="keyword">for</span> v <span class="keyword">in</span> m &#123;</span><br><span class="line">        <span class="symbol">'inner</span>: <span class="keyword">for</span> i <span class="keyword">in</span> v &#123;</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"Found &#123;&#125;"</span>, i);</span><br><span class="line">                <span class="keyword">break</span> <span class="symbol">'outer</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Loop label syntax is similar to lifetimes.</strong></p><p>输出</p><p><code>Found -20</code></p><p><br></p><h3 id="44-Insert-element-in-list"><a href="#44-Insert-element-in-list" class="headerlink" title="44. Insert element in list"></a>44. <font color="0db39e">Insert element in list</font></h3><blockquote><p>Insert element x at position i in list s. Further elements must be shifted to the right.</p></blockquote><p><em>在列表s的位置I插入元素x。其他元素必须向右移动。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// insert one at index one</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">copy</span>(s[<span class="number">2</span>:], s[<span class="number">1</span>:])</span><br><span class="line">s[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> vec = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    vec.insert(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(vec, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    vec.insert(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(vec, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="45-Pause-execution-for-5-seconds"><a href="#45-Pause-execution-for-5-seconds" class="headerlink" title="45. Pause execution for 5 seconds"></a>45. <font color="16db93">Pause execution for 5 seconds</font></h3><p><em>在继续下一个指令之前，在当前线程中休眠5秒钟。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;thread, time&#125;;</span><br><span class="line">thread::sleep(time::Duration::from_secs(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><br></p><h3 id="46-Extract-beginning-of-string-prefix"><a href="#46-Extract-beginning-of-string-prefix" class="headerlink" title="46. Extract beginning of string (prefix)"></a>46. <font color="83e377">Extract beginning of string (prefix)</font></h3><blockquote><p>Create string t consisting of the 5 first characters of string s.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>创建由字符串s的前5个字符组成的字符串t。<br>确保正确处理多字节字符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Привет"</span></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Приве</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"été 😁 torride"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> t = s.char_indices().nth(<span class="number">5</span>).map_or(s, |(i, _)| &amp;s[..i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>été 😁</code></p><p><br></p><h3 id="47-Extract-string-suffix"><a href="#47-Extract-string-suffix" class="headerlink" title="47. Extract string suffix"></a>47. <font color="b9e769">Extract string suffix</font></h3><blockquote><p>Create string t consisting in the 5 last characters of string s.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>创建由字符串s的最后5个字符组成的字符串t。<br>确保正确处理多字节字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello, world! 문자"</span></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[<span class="built_in">len</span>([]<span class="keyword">rune</span>(s))<span class="number">-5</span>:])</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>d! 문자</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"tükörfúrógép"</span>;</span><br><span class="line">    <span class="keyword">let</span> last5ch = s.chars().count() - <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> s2: <span class="built_in">String</span> = s.chars().skip(last5ch).collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>rógép</code></p><p><br></p><h3 id="48-Multi-line-string-literal"><a href="#48-Multi-line-string-literal" class="headerlink" title="48. Multi-line string literal"></a>48. <font color="efea5a">Multi-line string literal</font></h3><blockquote><p>Assign to variable s a string literal consisting in several lines of text, including newlines.</p></blockquote><p><em>给变量s赋值一个由几行文本组成的字符串，包括换行符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`Huey</span></span><br><span class="line"><span class="string">Dewey</span></span><br><span class="line"><span class="string">Louie`</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Huey</span><br><span class="line">Dewey</span><br><span class="line">Louie</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"line 1</span></span><br><span class="line"><span class="string">line 2</span></span><br><span class="line"><span class="string">line 3"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line <span class="number">1</span></span><br><span class="line">line <span class="number">2</span></span><br><span class="line">line <span class="number">3</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = r#<span class="string">"Huey</span></span><br><span class="line"><span class="string">Dewey</span></span><br><span class="line"><span class="string">Louie"</span>#;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Huey</span><br><span class="line">Dewey</span><br><span class="line">Louie</span><br></pre></td></tr></table></figure><p><br></p><h3 id="49-Split-a-space-separated-string"><a href="#49-Split-a-space-separated-string" class="headerlink" title="49. Split a space-separated string"></a>49. <font color="f1c453">Split a space-separated string</font></h3><p><em>拆分用空格分隔的字符串</em></p><blockquote><p>Build list chunks consisting in substrings of input string s, separated by one or more space characters.</p></blockquote><p><em>构建由输入字符串的子字符串组成的列表块，由一个或多个空格字符分隔。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Un dos tres"</span></span><br><span class="line">chunks := strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">" Un dos tres "</span></span><br><span class="line">chunks = strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Un  dos"</span></span><br><span class="line">chunks = strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[ Un dos tres ]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[Un  dos]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello world"</span></span><br><span class="line">chunks := strings.Fields(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hello world]</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Un dos tres"</span></span><br><span class="line">chunks := strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">" Un dos tres "</span></span><br><span class="line">chunks = strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Un  dos"</span></span><br><span class="line">chunks = strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[Un dos]</span><br></pre></td></tr></table></figure><p>strings.Fields 就只能干这个事儿</p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split_whitespace().collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split_ascii_whitespace().collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split(<span class="string">' '</span>).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">""</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="50-Make-an-infinite-loop"><a href="#50-Make-an-infinite-loop" class="headerlink" title="50. Make an infinite loop"></a>50. <font color="f29e4c">Make an infinite loop</font></h3><p><em>写一个无限循环</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">k := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, playground"</span>)</span><br><span class="line">k++</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="51-Check-if-map-contains-key"><a href="#51-Check-if-map-contains-key" class="headerlink" title="51. Check if map contains key"></a>51. <font color="e2e2df">Check if map contains key</font></h3><blockquote><p>Determine whether map m contains an entry for key k</p></blockquote><p><em>检查map是否有某个key</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"uno"</span>:  <span class="number">1</span>,</span><br><span class="line"><span class="string">"dos"</span>:  <span class="number">2</span>,</span><br><span class="line"><span class="string">"tres"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k := <span class="string">"cinco"</span></span><br><span class="line">_, ok := m[k]</span><br><span class="line">fmt.Printf(<span class="string">"m contains key %q: %v\n"</span>, k, ok)</span><br><span class="line"></span><br><span class="line">k = <span class="string">"tres"</span></span><br><span class="line">_, ok = m[k]</span><br><span class="line">fmt.Printf(<span class="string">"m contains key %q: %v\n"</span>, k, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m contains key <span class="string">"cinco"</span>: <span class="literal">false</span></span><br><span class="line">m contains key <span class="string">"tres"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashMap::new();</span><br><span class="line">    m.insert(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">    m.insert(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hit = m.contains_key(&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, hit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="52-Check-if-map-contains-value"><a href="#52-Check-if-map-contains-value" class="headerlink" title="52. Check if map contains value"></a>52. <font color="d2d2cf">Check if map contains value</font></h3><p><em>检查map中是否有某个值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsValue</span><span class="params">(m <span class="keyword">map</span>[K]T, v T)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">if</span> x == v &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arbitrary types for K, T.</span></span><br><span class="line"><span class="keyword">type</span> K <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[K]T&#123;</span><br><span class="line"><span class="string">"uno"</span>:  <span class="number">1</span>,</span><br><span class="line"><span class="string">"dos"</span>:  <span class="number">2</span>,</span><br><span class="line"><span class="string">"tres"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v T = <span class="number">5</span></span><br><span class="line">ok := containsValue(m, v)</span><br><span class="line">fmt.Printf(<span class="string">"m contains value %d: %v\n"</span>, v, ok)</span><br><span class="line"></span><br><span class="line">v = <span class="number">3</span></span><br><span class="line">ok = containsValue(m, v)</span><br><span class="line">fmt.Printf(<span class="string">"m contains value %d: %v\n"</span>, v, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m contains value <span class="number">5</span>: <span class="literal">false</span></span><br><span class="line">m contains value <span class="number">3</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = BTreeMap::new();</span><br><span class="line">    m.insert(<span class="number">11</span>, <span class="string">"one"</span>);</span><br><span class="line">    m.insert(<span class="number">22</span>, <span class="string">"twenty-two"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="string">"eight"</span>;</span><br><span class="line">        <span class="keyword">let</span> does_contain = m.values().any(|&amp;val| *val == *v);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, does_contain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="string">"twenty-two"</span>;</span><br><span class="line">        <span class="keyword">let</span> does_contain = m.values().any(|&amp;val| *val == *v);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, does_contain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="53-Join-a-list-of-strings"><a href="#53-Join-a-list-of-strings" class="headerlink" title="53. Join a list of strings"></a>53. <font color="e2cfc4">Join a list of strings</font></h3><p><em>字符串连接</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"xxx"</span>, <span class="string">"bbb"</span>, <span class="string">"aaa"</span>&#125;</span><br><span class="line">y := strings.Join(x, <span class="string">"&amp;"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>xxx&amp;bbb&amp;aaa</code></p><p>关于 <a href="https://pkg.go.dev/strings#Join" target="_blank" rel="noopener">strings.Joins</a></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="string">"Lorem"</span>, <span class="string">"ipsum"</span>, <span class="string">"dolor"</span>, <span class="string">"sit"</span>, <span class="string">"amet"</span>];</span><br><span class="line">    <span class="keyword">let</span> y = x.join(<span class="string">", "</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem, ipsum, dolor, sit, amet</span><br></pre></td></tr></table></figure><p><br></p><h3 id="54-Compute-sum-of-integers"><a href="#54-Compute-sum-of-integers" class="headerlink" title="54. Compute sum of integers"></a>54. <font color="f7d9c4">Compute sum of integers</font></h3><p><em>计算整数之和</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">s += v</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>6</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; = (<span class="number">0</span>..=<span class="number">10_000</span>).collect();</span><br><span class="line">    </span><br><span class="line">    eprintln!(<span class="string">"Sum of 0-10,000 = &#123;&#125;"</span>, x.iter().sum::&lt;<span class="built_in">usize</span>&gt;())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>Sum of 0-10,000 = 50005000</code></p><p><br></p><h3 id="55-Convert-integer-to-string"><a href="#55-Convert-integer-to-string" class="headerlink" title="55. Convert integer to string"></a>55. <font color="faedcb">Convert integer to string</font></h3><p><em>将整数转换为字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1234</span></span><br><span class="line">s := strconv.Itoa(i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1234</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">1234</span></span><br><span class="line">s := strconv.FormatInt(i, <span class="number">10</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1234</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1234</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%d"</span>, i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span> = <span class="number">5678</span></span><br><span class="line">s = fmt.Sprintf(<span class="string">"%d"</span>, j)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k *big.Int = big.NewInt(<span class="number">90123456</span>)</span><br><span class="line">s = fmt.Sprintf(<span class="string">"%d"</span>, k)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br><span class="line"><span class="number">90123456</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> s = i.to_string();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>123</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>123</code></p><p><br></p><h3 id="56-Launch-1000-parallel-tasks-and-wait-for-completion"><a href="#56-Launch-1000-parallel-tasks-and-wait-for-completion" class="headerlink" title="56. Launch 1000 parallel tasks and wait for completion"></a>56. <font color="c9e4de">Launch 1000 parallel tasks and wait for completion</font></h3><blockquote><p>Fork-join : launch the concurrent execution of procedure f with parameter i from 1 to 1000.<br>Tasks are independent and f(i) doesn’t return any value.<br>Tasks need not run all at the same time, so you may use a pool.<br>Wait for the completion of the 1000 tasks and then print “Finished”.</p></blockquote><p><em>创建1000个并行任务，并等待其完成</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">d := rand.Int() % <span class="number">10000</span></span><br><span class="line">time.Sleep(time.Duration(d))</span><br><span class="line">fmt.Printf(<span class="string">"Hello %v\n"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">f(i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="number">741</span></span><br><span class="line">Hello <span class="number">651</span></span><br><span class="line">Hello <span class="number">49</span></span><br><span class="line">...（共计<span class="number">1000</span>个）</span><br><span class="line">Hello xxx</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> threads: <span class="built_in">Vec</span>&lt;_&gt; = (<span class="number">0</span>..<span class="number">10</span>).map(|i| thread::spawn(<span class="keyword">move</span> || f(i))).collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads &#123;</span><br><span class="line">    t.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="57-Filter-list"><a href="#57-Filter-list" class="headerlink" title="57. Filter list"></a>57. <font color="c6def1">Filter list</font></h3><blockquote><p>Create list y containing items from list x satisfying predicate p. Respect original ordering. Don’t modify x in-place.</p></blockquote><p><em>过滤list中的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="number">0</span>, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="number">0</span>, n)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y: <span class="built_in">Vec</span>&lt;_&gt; = x.iter()</span><br><span class="line">        .filter(|&amp;x| x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        .collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="58-Extract-file-content-to-a-string"><a href="#58-Extract-file-content-to-a-string" class="headerlink" title="58. Extract file content to a string"></a>58. <font color="dbcdf0">Extract file content to a string</font></h3><p><em>提取字符串的文件内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"io/ioutil"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := <span class="string">"data.txt"</span></span><br><span class="line">b, err := ioutil.ReadFile(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">lines := <span class="keyword">string</span>(b)</span><br><span class="line"></span><br><span class="line">fmt.Println(lines)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create file in fake FS of the Playground. init is executed before main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"data.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`Un</span></span><br><span class="line"><span class="string">Dos</span></span><br><span class="line"><span class="string">Tres`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Un</span><br><span class="line">Dos</span><br><span class="line">Tres</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; <span class="built_in">Result</span>&lt;(), ()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="string">"Cargo.toml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> file = File::open(f).expect(<span class="string">"Can't open file."</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> lines = <span class="built_in">String</span>::new();</span><br><span class="line">    file.read_to_string(&amp;<span class="keyword">mut</span> lines)</span><br><span class="line">        .expect(<span class="string">"Can't read file contents."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, lines);</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="string">"Cargo.toml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lines = fs::read_to_string(f).expect(<span class="string">"Can't read file."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, lines);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="59-Write-to-standard-error-stream"><a href="#59-Write-to-standard-error-stream" class="headerlink" title="59. Write to standard error stream"></a>59. <font color="f2c6de">Write to standard error stream</font></h3><blockquote><p>Print the message “x is negative” to standard error (stderr), with integer x value substitution (e.g. “-2 is negative”).</p></blockquote><p><em>写入标准错误流</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">-2</span></span><br><span class="line">fmt.Fprintln(os.Stderr, x, <span class="string">"is negative"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> is negative</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = -<span class="number">3</span>;</span><br><span class="line">    eprintln!(<span class="string">"&#123;&#125; is negative"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span> is negative</span><br></pre></td></tr></table></figure><p><br></p><h3 id="60-Read-command-line-argument"><a href="#60-Read-command-line-argument" class="headerlink" title="60. Read command line argument"></a>60. <font color="f9c6c9">Read command line argument</font></h3><p><em>读取命令行参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line">x := os.Args[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> first_arg = env::args().skip(<span class="number">1</span>).next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fallback = <span class="string">""</span>.to_owned();</span><br><span class="line">    <span class="keyword">let</span> x = first_arg.unwrap_or(fallback);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>&quot;&quot;</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;41-Reverse-a-string&quot;&gt;&lt;a href=&quot;#41-Reverse-a-string&quot; class=&quot;headerlink&quot; title=&quot;41. Reverse a string&quot;&gt;&lt;/a&gt;41. &lt;font color=
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(2)</title>
    <link href="http://www.dashen.tech/2021/09/03/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-2/"/>
    <id>http://www.dashen.tech/2021/09/03/Rust-vs-Go-常用语法对比-2/</id>
    <published>2021-09-02T17:35:16.000Z</published>
    <updated>2021-09-21T02:55:40.137Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="21-Swap-values"><a href="#21-Swap-values" class="headerlink" title="21. Swap values"></a>21. <font color="70d6ff">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">b := <span class="number">10</span></span><br><span class="line">a, b = b, a</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (a, b) = (b, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a: &#123;a&#125;, b: &#123;b&#125;"</span>, a=a, b=b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>a: 10, b: 3</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">12</span>, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;, b = &#123;&#125;"</span>, a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (a, b) = (b, a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;, b = &#123;&#125;"</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span>, b = <span class="number">42</span></span><br><span class="line">a = <span class="number">42</span>, b = <span class="number">12</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="22-Convert-string-to-integer"><a href="#22-Convert-string-to-integer" class="headerlink" title="22. Convert string to integer"></a>22. <font color="ff70a6">Convert string to integer</font></h3><p><em>将字符串转换为整型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line">i, err  := strconv.Atoi(s)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// create a string</span></span><br><span class="line">s := <span class="string">"123"</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert string to int</span></span><br><span class="line">i, err := strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">type</span>: <span class="keyword">string</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">type</span>: <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"123"</span></span><br><span class="line">fmt.Println(<span class="string">"s is"</span>, reflect.TypeOf(s), s)</span><br><span class="line"></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i is"</span>, reflect.TypeOf(i), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s is <span class="keyword">string</span> <span class="number">123</span></span><br><span class="line">i is <span class="keyword">int64</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// This prints 123</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = s.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This panics</span></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = s.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i: <span class="built_in">i32</span> = s.parse().unwrap_or(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = s.parse().unwrap_or(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="keyword">match</span> s.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(i) =&gt; i,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = <span class="keyword">match</span> s.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(i) =&gt; i,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="23-Convert-real-number-to-string-with-2-decimal-places"><a href="#23-Convert-real-number-to-string-with-2-decimal-places" class="headerlink" title="23. Convert real number to string with 2 decimal places"></a>23. <font color="ff9770">Convert real number to string with 2 decimal places</font></h3><blockquote><p>Given a real number x, create its string representation s with 2 decimal digits following the dot.</p></blockquote><p><em>给定一个实数，小数点后保留两位小数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">3.14159</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%.2f"</span>, x)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>3.14</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">42.1337</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:.2&#125;"</span>, x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>42.13</code></p><p><br></p><h3 id="24-Assign-to-string-the-japanese-word-ネコ"><a href="#24-Assign-to-string-the-japanese-word-ネコ" class="headerlink" title="24. Assign to string the japanese word ネコ"></a>24. <font color="ffd670">Assign to string the japanese word ネコ</font></h3><blockquote><p>Declare a new string s and initialize it with the literal value “ネコ” (which means “cat” in japanese)</p></blockquote><p><em>声明一个新的字符串s，并用文字值“ネコ”初始化它(在日语中是“cat”的意思)</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"ネコ"</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"ネコ"</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="25-Send-a-value-to-another-thread"><a href="#25-Send-a-value-to-another-thread" class="headerlink" title="25. Send a value to another thread"></a>25. <font color="e9ff70">Send a value to another thread</font></h3><blockquote><p>Share the string value “Alan” with an existing running process which will then display “Hello, Alan”</p></blockquote><p><em>将字符串值“Alan”与现有的正在运行的进程共享，该进程将显示“你好，Alan”</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- <span class="string">"Alan"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := &lt;-ch</span><br><span class="line">fmt.Printf(<span class="string">"Hello, %v\n"</span>, v)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ch &lt;- <span class="string">"Alan"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure the non-main goroutine had the chance to finish.</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hello, Alan</code></p><p><em>The receiver goroutine blocks reading the string channel ch.<br>The current goroutine sends the value to ch.<br>A goroutine is like a thread, but more lightweight.</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc::channel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (send, recv) = channel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> handle = thread::spawn(<span class="keyword">move</span> || <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> msg = recv.recv().unwrap();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello, &#123;:?&#125;"</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    send.send(<span class="string">"Alan"</span>).unwrap();</span><br><span class="line">    </span><br><span class="line">    handle.join().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 <code>Hello, &quot;Alan&quot;</code></p><p><br></p><h3 id="26-Create-a-2-dimensional-array"><a href="#26-Create-a-2-dimensional-array" class="headerlink" title="26. Create a 2-dimensional array"></a>26. <font color="386641">Create a 2-dimensional array</font></h3><blockquote><p>Declare and initialize a matrix x having m rows and n columns, containing real numbers.</p></blockquote><p><strong>创建一个二维数组</strong></p><p><em>声明并初始化一个有m行n列的矩阵x，包含实数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m, n = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> x [m][n]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> m, n = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> x [m][n]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[[0 0 0 0] [0 0 8 0] [0 0 0 0]]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := make2D(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make2D</span><span class="params">(m, n <span class="keyword">int</span>)</span> [][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = buf[:n:n]</span><br><span class="line">buf = buf[n:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[[0 0 0] [0 8 0]]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="number">0.0f64</span>; N]; M];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> x = [[<span class="number">0.0</span>; N] ; M];</span><br><span class="line"></span><br><span class="line">  x[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">5.0</span>;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">5.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="27-Create-a-3-dimensional-array"><a href="#27-Create-a-3-dimensional-array" class="headerlink" title="27. Create a 3-dimensional array"></a>27. <font color="6a994e">Create a 3-dimensional array</font></h3><blockquote><p>Declare and initialize a 3D array x, having dimensions boundaries m, n, p, and containing real numbers.</p></blockquote><p><strong>创建一个三维数组</strong></p><p><em>声明并初始化一个三维数组x，它有m，n，p维边界，并且包含实数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m, n, p = <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> x [m][n][p]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> m, n, p = <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> x [m][n][p]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Value of x</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type of x</span></span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]] [[<span class="number">0</span> <span class="number">0</span> <span class="number">9</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]]</span><br><span class="line">[<span class="number">2</span>][<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make3D</span><span class="params">(m, n, p <span class="keyword">int</span>)</span> [][][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n*p)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = <span class="built_in">make</span>([][]<span class="keyword">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> x[i] &#123;</span><br><span class="line">x[i][j] = buf[:p:p]</span><br><span class="line">buf = buf[p:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := make3D(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make3D</span><span class="params">(m, n, p <span class="keyword">int</span>)</span> [][][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n*p)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = <span class="built_in">make</span>([][]<span class="keyword">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> x[i] &#123;</span><br><span class="line">x[i][j] = buf[:p:p]</span><br><span class="line">buf = buf[p:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]] [[<span class="number">0</span> <span class="number">0</span> <span class="number">9</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="number">0.0f64</span>; p]; n]; m];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> P: <span class="built_in">usize</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = [[[<span class="number">0.0f64</span>; P]; N]; M];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="28-Sort-by-a-property"><a href="#28-Sort-by-a-property" class="headerlink" title="28. Sort by a property"></a>28. <font color="a7c957">Sort by a property</font></h3><blockquote><p>Sort elements of array-like collection items in ascending order of x.p, where p is a field of the type Item of the objects in items.</p></blockquote><p><em>按x-&gt;p的升序对类似数组的集合项的元素进行排序，其中p是项中对象的项类型的字段。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ItemPSorter []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i].p &lt; s[j].p &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortItems</span><span class="params">(items []Item)</span></span> &#123;</span><br><span class="line">sorter := ItemPSorter(items)</span><br><span class="line">sort.Sort(sorter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line">sortItems(items)</span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line"></span><br><span class="line">less := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> items[i].p &lt; items[j].p</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(items, less)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    p: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;];</span><br><span class="line"></span><br><span class="line">    items.sort_by(|a, b| a.p.cmp(&amp;b.p));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    p: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;];</span><br><span class="line"></span><br><span class="line">    items.sort_by_key(|x| x.p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="29-Remove-item-from-list-by-its-index"><a href="#29-Remove-item-from-list-by-its-index" class="headerlink" title="29. Remove item from list, by its index"></a>29. <font color="f2e8cf">Remove item from list, by its index</font></h3><blockquote><p>Remove i-th item from list items.<br>This will alter the original list or return a new list, depending on which is more idiomatic.<br>Note that in most languages, the smallest valid value for i is 0.</p></blockquote><p><em>从列表项中删除第I项。<br>这将改变原来的列表或返回一个新的列表，这取决于哪个更习惯。<br>请注意，在大多数语言中，I的最小有效值是0。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">i := <span class="number">2</span></span><br><span class="line">items = <span class="built_in">append</span>(items[:i], items[i+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a b c d e f]</span><br><span class="line">[a b d e f]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(items[i:], items[i+<span class="number">1</span>:])</span><br><span class="line">items[<span class="built_in">len</span>(items)<span class="number">-1</span>] = <span class="literal">nil</span></span><br><span class="line">items = items[:<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="built_in">assert_eq!</span>(v.remove(<span class="number">1</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(v, [<span class="number">1</span>, <span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="30-Parallelize-execution-of-1000-independent-tasks"><a href="#30-Parallelize-execution-of-1000-independent-tasks" class="headerlink" title="30.     Parallelize execution of 1000 independent tasks"></a>30. <font color="bc4749">    Parallelize execution of 1000 independent tasks</font></h3><blockquote><p>Launch the concurrent execution of procedure f with parameter i from 1 to 1000.<br>Tasks are independent and f(i) doesn’t return any value.<br>Tasks need not run all at the same time, so you may use a pool.</p></blockquote><p><em>用参数I从1到1000启动程序f的并发执行。<br>任务是独立的，f(i)不返回值。<br>任务不需要同时运行，所以可以使用pools</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">          f(j)</span><br><span class="line">          wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">d := rand.Int() % <span class="number">10000</span></span><br><span class="line">time.Sleep(time.Duration(d))</span><br><span class="line">fmt.Printf(<span class="string">"Hello %v\n"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> f(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">4</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> threads: <span class="built_in">Vec</span>&lt;_&gt; = (<span class="number">0</span>..<span class="number">1000</span>).map(|i| thread::spawn(<span class="keyword">move</span> || f(i))).collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads &#123;</span><br><span class="line">        thread.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rayon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> rayon::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    (<span class="number">0</span>..<span class="number">1000</span>).into_par_iter().for_each(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="31-Recursive-factorial-simple"><a href="#31-Recursive-factorial-simple" class="headerlink" title="31. Recursive factorial (simple)"></a>31. <font color="001524">Recursive factorial (simple)</font></h3><blockquote><p>Create recursive function f which returns the factorial of non-negative integer i, calculated from f(i-1)</p></blockquote><p><em>创建递归函数f，该函数返回从f(i-1)计算的非负整数I的阶乘</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i * f(i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i * f(i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"f(%d) = %d\n"</span>, i, f(i))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span></span><br><span class="line">f(<span class="number">3</span>) = <span class="number">6</span></span><br><span class="line">f(<span class="number">4</span>) = <span class="number">24</span></span><br><span class="line">f(<span class="number">5</span>) = <span class="number">120</span></span><br><span class="line">f(<span class="number">6</span>) = <span class="number">720</span></span><br><span class="line">f(<span class="number">7</span>) = <span class="number">5040</span></span><br><span class="line">f(<span class="number">8</span>) = <span class="number">40320</span></span><br><span class="line">f(<span class="number">9</span>) = <span class="number">362880</span></span><br><span class="line">f(<span class="number">10</span>) = <span class="number">3628800</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(n: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        n * f(n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, f(<span class="number">4</span> <span class="keyword">as</span> <span class="built_in">u32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>24</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">factorial</span></span>(num: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> num &#123;</span><br><span class="line">        <span class="number">0</span> | <span class="number">1</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        _ =&gt; factorial(num - <span class="number">1</span>) * num,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span> </span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="32-Integer-exponentiation-by-squaring"><a href="#32-Integer-exponentiation-by-squaring" class="headerlink" title="32. Integer exponentiation by squaring"></a>32. <font color="15616d">Integer exponentiation by squaring</font></h3><blockquote><p>Create function exp which calculates (fast) the value x power n.<br>x and n are non-negative integers.</p></blockquote><p><em>创建函数exp，计算(快速)x次方n的值。<br>x和n是非负整数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exp</span><span class="params">(x, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">case</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> exp(x*x, n/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> x * exp(x*x, (n<span class="number">-1</span>)/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(exp(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>243</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">exp</span></span>(x: <span class="built_in">u64</span>, n: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; x,</span><br><span class="line">        i <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> =&gt; exp(x * x, n / <span class="number">2</span>),</span><br><span class="line">        _ =&gt; x * exp(x * x, (n - <span class="number">1</span>) / <span class="number">2</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, exp(x, n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>65536</code></p><p><br></p><h3 id="33-Atomically-read-and-update-variable"><a href="#33-Atomically-read-and-update-variable" class="headerlink" title="33. Atomically read and update variable"></a>33. <font color="ffecd1">Atomically read and update variable</font></h3><blockquote><p>Assign variable x the new value f(x), making sure that no other thread may modify x between the read and the write.</p></blockquote><p><em>为变量x分配新值f(x)，确保在读和写之间没有其他线程可以修改x。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lock sync.RWMutex</span><br><span class="line">x := <span class="number">3</span></span><br><span class="line"></span><br><span class="line">lock.Lock()</span><br><span class="line">x = f(x)</span><br><span class="line">lock.Unlock()</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>6</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = Mutex::new(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = x.lock().unwrap();</span><br><span class="line">    *x = f(*x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, *x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1</code></p><p><br></p><h3 id="34-Create-a-set-of-objects"><a href="#34-Create-a-set-of-objects" class="headerlink" title="34. Create a set of objects"></a>34. <font color="ff7d00">Create a set of objects</font></h3><blockquote><p>Declare and initialize a set x containing objects of type T.</p></blockquote><p><em>声明并初始化一个包含t类型对象的集合x。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"C"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"D"</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t, _ := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Printf(<span class="string">"x contains element %v \n"</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x contains element D </span><br><span class="line">x contains element A </span><br><span class="line">x contains element B</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">struct</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"B"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"B"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"C"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"D"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t, _ := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Printf(<span class="string">"x contains element %v \n"</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x contains element B </span><br><span class="line">x contains element D </span><br><span class="line">x contains element A</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashSet::new();</span><br><span class="line">    m.insert(<span class="string">"a"</span>);</span><br><span class="line">    m.insert(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="35-First-class-function-compose"><a href="#35-First-class-function-compose" class="headerlink" title="35. First-class function : compose"></a>35. <font color="78290f"><a href="https://programming-idioms.org/idiom/35/first-class-function-compose" target="_blank" rel="noopener">First-class function : compose</a></font></h3><blockquote><p>Implement a function compose (A -&gt; C) with parameters f (A -&gt; B) and g (B -&gt; C), which returns composition function g ∘ f</p></blockquote><p><em>用参数f (A -&gt; B)和g (B -&gt; C)实现一个函数compose (A -&gt; C)，返回composition函数g ∘ f</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(f <span class="keyword">func</span>(A)</span> <span class="title">B</span>, <span class="title">g</span> <span class="title">func</span><span class="params">(B)</span> <span class="title">C</span>) <span class="title">func</span><span class="params">(A)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x A)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> g(f(x))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">squareFromStr := compose(str2int, square)</span><br><span class="line">fmt.Println(squareFromStr(<span class="string">"12"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">str2int</span><span class="params">(a A)</span> <span class="title">B</span></span> &#123;</span><br><span class="line">b, _ := strconv.ParseInt(<span class="keyword">string</span>(a), <span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line"><span class="keyword">return</span> B(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(b B)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> C(b * b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>144</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;<span class="symbol">'a</span>, A, B, C, G, F&gt;(f: F, g: G) -&gt; <span class="built_in">Box</span>&lt;<span class="built_in">Fn</span>(A) -&gt; C + <span class="symbol">'a</span>&gt;</span><br><span class="line"><span class="keyword">where</span> F: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(A) -&gt; B, G: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(B) -&gt; C</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Box</span>::new(<span class="keyword">move</span> |x| g(f(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;A, B, C&gt;(f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; B, g: <span class="keyword">impl</span> <span class="built_in">Fn</span>(B) -&gt; C) -&gt; <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; C &#123;</span><br><span class="line"><span class="keyword">move</span> |x| g(f(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = |x: <span class="built_in">u32</span>| (x * <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> g = |x: <span class="built_in">i32</span>| (x + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">f32</span>;</span><br><span class="line">    <span class="keyword">let</span> c = compose(f, g);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>5</code></p><p><br></p><h3 id="36-First-class-function-generic-composition"><a href="#36-First-class-function-generic-composition" class="headerlink" title="36. First-class function : generic composition"></a>36. <font color="ff9f1c">First-class function : generic composition</font></h3><blockquote><p>Implement a function compose which returns composition function g ∘ f for any functions f and g having exactly 1 parameter.</p></blockquote><p><em>实现一个函数组合，该函数组合为任何恰好有1个参数的函数f和g返回组合函数g ∘ f。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">composeIntFuncs</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">g</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> g(f(x))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">double := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">&#125;</span><br><span class="line">addTwo := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">h := composeIntFuncs(double, addTwo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i, h(i), addTwo(double(i)))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">12</span> <span class="number">12</span></span><br><span class="line"><span class="number">6</span> <span class="number">14</span> <span class="number">14</span></span><br><span class="line"><span class="number">7</span> <span class="number">16</span> <span class="number">16</span></span><br><span class="line"><span class="number">8</span> <span class="number">18</span> <span class="number">18</span></span><br><span class="line"><span class="number">9</span> <span class="number">20</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;<span class="symbol">'a</span>, A, B, C, G, F&gt;(f: F, g: G) -&gt; <span class="built_in">Box</span>&lt;<span class="built_in">Fn</span>(A) -&gt; C + <span class="symbol">'a</span>&gt;</span><br><span class="line"><span class="keyword">where</span> F: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(A) -&gt; B, G: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(B) -&gt; C</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Box</span>::new(<span class="keyword">move</span> |x| g(f(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;A, B, C&gt;(f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; B, g: <span class="keyword">impl</span> <span class="built_in">Fn</span>(B) -&gt; C) -&gt; <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; C &#123;</span><br><span class="line"><span class="keyword">move</span> |x| g(f(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = |x: <span class="built_in">u32</span>| (x * <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> g = |x: <span class="built_in">i32</span>| (x + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">f32</span>;</span><br><span class="line">    <span class="keyword">let</span> c = compose(f, g);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>5</code></p><p><br></p><h3 id="37-Currying"><a href="#37-Currying" class="headerlink" title="37. Currying"></a>37. <font color="ffbf69">Currying</font></h3><blockquote><p>Transform a function that takes multiple arguments into a function for which some of the arguments are preset.</p></blockquote><p><em>将一个接受多个参数的函数转换为一个预设了某些参数的函数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">LastName  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"&lt;"</span> + e.FirstName + <span class="string">" "</span> + e.LastName + <span class="string">"&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Payroll <span class="keyword">struct</span> &#123;</span><br><span class="line">Company   Company</span><br><span class="line">Boss      *Employee</span><br><span class="line">Employee  *Employee</span><br><span class="line">StartDate time.Time</span><br><span class="line">EndDate   time.Time</span><br><span class="line">Amount    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a blank payroll for a specific employee with specific boss in specific company</span></span><br><span class="line"><span class="keyword">type</span> PayFactory <span class="function"><span class="keyword">func</span><span class="params">(Company, *Employee, *Employee)</span> <span class="title">Payroll</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a blank payroll for a specific employee</span></span><br><span class="line"><span class="keyword">type</span> CustomPayFactory <span class="function"><span class="keyword">func</span><span class="params">(*Employee)</span> <span class="title">Payroll</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CurryPayFactory</span><span class="params">(pf PayFactory, company Company, boss *Employee)</span> <span class="title">CustomPayFactory</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span> <span class="title">Payroll</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> pf(company, boss, e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPay</span><span class="params">(company Company, boss *Employee, employee *Employee)</span> <span class="title">Payroll</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Payroll&#123;</span><br><span class="line">Company:  company,</span><br><span class="line">Boss:     boss,</span><br><span class="line">Employee: employee,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">me := Employee&#123;<span class="string">"Jack"</span>, <span class="string">"Power"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I happen to be head of the HR department of Richissim Inc.</span></span><br><span class="line"><span class="keyword">var</span> myLittlePayFactory CustomPayFactory = CurryPayFactory(NewPay, <span class="string">"Richissim"</span>, &amp;me)</span><br><span class="line"></span><br><span class="line">fmt.Println(myLittlePayFactory(&amp;Employee&#123;<span class="string">"Jean"</span>, <span class="string">"Dupont"</span>&#125;))</span><br><span class="line">fmt.Println(myLittlePayFactory(&amp;Employee&#123;<span class="string">"Antoine"</span>, <span class="string">"Pol"</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;Richissim &lt;Jack Power&gt; &lt;Jean Dupont&gt; <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0</span>&#125;</span><br><span class="line">&#123;Richissim &lt;Jack Power&gt; &lt;Antoine Pol&gt; <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(a: <span class="built_in">u32</span>, b: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> add5 = <span class="keyword">move</span> |x| add(<span class="number">5</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = add5(<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>17</code></p><p><br></p><h3 id="38-Extract-a-substring"><a href="#38-Extract-a-substring" class="headerlink" title="38. Extract a substring"></a>38. <font color="cbf3f0">Extract a substring</font></h3><blockquote><p>Find substring t consisting in characters i (included) to j (excluded) of string s.<br>Character indices start at 0 unless specified otherwise.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>查找由字符串s的字符I(包括)到j(不包括)组成的子字符串t。<br>除非另有说明，字符索引从0开始。<br>确保正确处理多字节字符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello, utf-8 문자들"</span></span><br><span class="line">i, j := <span class="number">7</span>, <span class="number">15</span></span><br><span class="line"></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[i:j])</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>utf-8 문자</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> unicode_segmentation;</span><br><span class="line"><span class="keyword">use</span> unicode_segmentation::UnicodeSegmentation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Lorem Ipsüm Dolor"</span>;</span><br><span class="line">    <span class="keyword">let</span> (i, j) = (<span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">let</span> t = s.graphemes(<span class="literal">true</span>).skip(i).take(j - i).collect::&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>Ipsüm</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> substring::Substring;</span><br><span class="line"><span class="keyword">let</span> t = s.substring(i, j);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="39-Check-if-string-contains-a-word"><a href="#39-Check-if-string-contains-a-word" class="headerlink" title="39. Check if string contains a word"></a>39. <font color="2ec4b6">Check if string contains a word</font></h3><blockquote><p>Set boolean ok to true if string word is contained in string s as a substring, or to false otherwise.</p></blockquote><p><em>如果字符串单词作为子字符串包含在字符串s中，则将布尔ok设置为true，否则设置为false。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Let's dance the macarena"</span></span><br><span class="line"></span><br><span class="line">word := <span class="string">"dance"</span></span><br><span class="line">ok := strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"car"</span></span><br><span class="line">ok = strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"duck"</span></span><br><span class="line">ok = strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Let's dance the macarena"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"dance"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"car"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"duck"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;21-Swap-values&quot;&gt;&lt;a href=&quot;#21-Swap-values&quot; class=&quot;headerlink&quot; title=&quot;21. Swap values&quot;&gt;&lt;/a&gt;21. &lt;font color=&quot;70d6ff&quot;&gt;Swap v
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比</title>
    <link href="http://www.dashen.tech/2021/09/02/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.dashen.tech/2021/09/02/Rust-vs-Go-常用语法对比/</id>
    <published>2021-09-02T13:02:52.000Z</published>
    <updated>2021-09-21T02:55:29.069Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://programming-idioms.org/about#about-block-cheatsheets" target="_blank" rel="noopener">这个网站</a> 可以列出某门编程语言的常用语法，也可以对比两种语言的基本语法差别。</p><p>在此对比<a href="https://programming-idioms.org/cheatsheet/Go/Rust" target="_blank" rel="noopener">Go和Rust</a></p><p><br></p><h3 id="1-Print-Hello-World"><a href="#1-Print-Hello-World" class="headerlink" title="1. Print Hello World"></a>1. <font color="d9ed92">Print Hello World</font></h3><p><em>打印Hello World</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Rust 输出文字的方式主要有两种：<strong>println!()</strong> 和 <strong>print!()</strong>。这两个”函数”都是向命令行输出字符串的方法，区别仅在于前者会在输出的最后附加输出一个换行符。当用这两个”函数”输出信息的时候，第一个参数是格式字符串，后面是一串可变参数，对应着格式字符串中的”占位符”，这一点与 C 语言/ Go语言 中的 printf 函数很相似。但是，Rust 中格式字符串中的占位符不是”% + 字母”的形式，而是一对 {}。</p></blockquote><p><br></p><h3 id="2-Print-Hello-10-times"><a href="#2-Print-Hello-10-times" class="headerlink" title="2. Print Hello 10 times"></a>2. <font color="b5e48c">Print Hello 10 times</font></h3><p><em>打印10次Hello World</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"Hello\n"</span>.repeat(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-Create-a-procedure"><a href="#3-Create-a-procedure" class="headerlink" title="3. Create a procedure"></a>3. <font color="99d98c">Create a procedure</font></h3><blockquote><p>Like a function which doesn’t return any value, thus has only side effects (e.g. Print to standard output)</p></blockquote><p><em>创建一个方法，没有返回值，打印一些内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">finish</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"My job here is done. Good bye "</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">finish(<span class="string">"Tony"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    finish(<span class="string">"Buddy"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">finish</span></span>(name : &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"My job here is done. Goodbye &#123;&#125;"</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="4-Create-a-function-which-returns-the-square-of-an-integer"><a href="#4-Create-a-function-which-returns-the-square-of-an-integer" class="headerlink" title="4. Create a function which returns the square of an integer"></a>4. <font color="76c893">Create a function which returns the square of an integer</font></h3><p><em>创建一个函数,返回一个整数的平方</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x*x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    x * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sq = square(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, sq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="5-Create-a-2D-Point-data-structure"><a href="#5-Create-a-2D-Point-data-structure" class="headerlink" title="5. Create a 2D Point data structure"></a>5. <font color="52b69a">Create a 2D Point data structure</font></h3><blockquote><p>Declare a container type for two floating-point numbers x and y</p></blockquote><p><em>声明一个容器类型,有x、y两个浮点数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := Point&#123;&#125;</span><br><span class="line">p2 := Point&#123;<span class="number">2.1</span>, <span class="number">2.2</span>&#125;</span><br><span class="line">p3 := Point&#123;</span><br><span class="line">y: <span class="number">3.1</span>,</span><br><span class="line">x: <span class="number">3.2</span>,</span><br><span class="line">&#125;</span><br><span class="line">p4 := &amp;Point&#123;</span><br><span class="line">x: <span class="number">4.1</span>,</span><br><span class="line">y: <span class="number">4.2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(p1)</span><br><span class="line">fmt.Println(p2)</span><br><span class="line">fmt.Println(p3)</span><br><span class="line">fmt.Println(p4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">0</span> <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="number">2.1</span> <span class="number">2.2</span>&#125;</span><br><span class="line">&#123;<span class="number">3.2</span> <span class="number">3.1</span>&#125;</span><br><span class="line">&amp;&#123;<span class="number">4.1</span> <span class="number">4.2</span>&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">f64</span>,</span><br><span class="line">    y: <span class="built_in">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">'_</span>&gt;) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, <span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = Point &#123; x: <span class="number">2.0</span>, y: -<span class="number">3.5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">f64</span>, <span class="built_in">f64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">'_</span>&gt;) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, <span class="keyword">self</span>.<span class="number">0</span>, <span class="keyword">self</span>.<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = Point(<span class="number">2.0</span>, -<span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="6-Iterate-over-list-values"><a href="#6-Iterate-over-list-values" class="headerlink" title="6. Iterate over list values"></a>6. <font color="34a0a4">Iterate over list values</font></h3><blockquote><p>Do something with each item x of an array-like collection items, regardless indexes.</p></blockquote><p><em>遍历列表的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">    doSomething(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">doSomething(x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> items &#123;</span><br><span class="line">        do_something(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_something</span></span>(n: <span class="built_in">i64</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Number &#123;&#125;"</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    items.into_iter().for_each(|x| do_something(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_something</span></span>(n: <span class="built_in">i64</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Number &#123;&#125;"</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="7-Iterate-over-list-indexes-and-values"><a href="#7-Iterate-over-list-indexes-and-values" class="headerlink" title="7. Iterate over list indexes and values"></a>7. <font color="168aad">Iterate over list indexes and values</font></h3><p><em>遍历列表的索引和值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"oranges"</span>,</span><br><span class="line"><span class="string">"apples"</span>,</span><br><span class="line"><span class="string">"bananas"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Item %d = %v \n"</span>, i, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Item <span class="number">0</span> = oranges </span><br><span class="line">Item <span class="number">1</span> = apples </span><br><span class="line">Item <span class="number">2</span> = bananas</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    <span class="keyword">for</span> (i, x) <span class="keyword">in</span> items.iter().enumerate() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Item &#123;&#125; = &#123;&#125;"</span>, i, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    items.iter().enumerate().for_each(|(i, x)| &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Item &#123;&#125; = &#123;&#125;"</span>, i, x);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="8-Initialize-a-new-map-associative-array"><a href="#8-Initialize-a-new-map-associative-array" class="headerlink" title="8. Initialize a new map (associative array)"></a>8. <font color="1a759f">Initialize a new map (associative array)</font></h3><blockquote><p>Create a new map object x, and provide some (key, value) pairs as initial content.</p></blockquote><p><em>创建一个新的map,提供一些键值对 作为初始内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = BTreeMap::new();</span><br><span class="line">    x.insert(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">    x.insert(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"one"</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">"two"</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [</span><br><span class="line">        (<span class="string">"one"</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="string">"two"</span>, <span class="number">2</span>),</span><br><span class="line">    ].iter().cloned().collect();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"two"</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">"one"</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>分 BTreeMap 和 HashMap，且都需要use进来</p><p><br></p><h3 id="9-Create-a-Binary-Tree-data-structure"><a href="#9-Create-a-Binary-Tree-data-structure" class="headerlink" title="9. Create a Binary Tree data structure"></a>9. <font color="1e6091">Create a Binary Tree data structure</font></h3><blockquote><p>The structure must be recursive because left child and right child are binary trees too. A node has access to children nodes, but not to its parent.</p></blockquote><p><em>创建一个二叉树</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinTree <span class="keyword">struct</span> &#123;</span><br><span class="line">Value valueType</span><br><span class="line">Left *BinTree</span><br><span class="line">Right *BinTree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BinTree <span class="keyword">struct</span> &#123;</span><br><span class="line">Value <span class="keyword">int</span></span><br><span class="line">Left  *BinTree</span><br><span class="line">Right *BinTree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorder</span><span class="params">(root *BinTree)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inorder(root.Left)</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>, root.Value)</span><br><span class="line">inorder(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := &amp;BinTree&#123;<span class="number">1</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left = &amp;BinTree&#123;<span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right = &amp;BinTree&#123;<span class="number">3</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Left = &amp;BinTree&#123;<span class="number">4</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Right = &amp;BinTree&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right.Right = &amp;BinTree&#123;<span class="number">6</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Left.Left = &amp;BinTree&#123;<span class="number">7</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">inorder(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinTree</span></span>&lt;T&gt; &#123;</span><br><span class="line">    value: T,</span><br><span class="line">    left: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;BinTree&lt;T&gt;&gt;&gt;,</span><br><span class="line">    right: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;BinTree&lt;T&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="10-Shuffle-a-list"><a href="#10-Shuffle-a-list" class="headerlink" title="10. Shuffle a list"></a>10. <font color="184e77">Shuffle a list</font></h3><blockquote><p>Generate a random permutation of the elements of list x</p></blockquote><p><em>随机排序一个list</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">j := rand.Intn(i + <span class="number">1</span>)</span><br><span class="line">x[i], x[j] = x[j], x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f e c g h a d b]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(x))</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm &#123;</span><br><span class="line">y[v] = x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f h c g b a d e]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(x))</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm &#123;</span><br><span class="line">y[v] = x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f h c g b a d e]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(x) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">j := rand.Intn(i + <span class="number">1</span>)</span><br><span class="line">x[i], x[j] = x[j], x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[g d a h e f c b]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;Rng, StdRng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::new().unwrap();</span><br><span class="line">rng.shuffle(&amp;<span class="keyword">mut</span> x);</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::seq::SliceRandom;</span><br><span class="line"><span class="keyword">use</span> rand::thread_rng;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Unshuffled: &#123;:?&#125;"</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = thread_rng();</span><br><span class="line">    x.shuffle(&amp;<span class="keyword">mut</span> rng);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Shuffled:   &#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="11-Pick-a-random-element-from-a-list"><a href="#11-Pick-a-random-element-from-a-list" class="headerlink" title="11. Pick a random element from a list"></a>11. <font color="f72585">Pick a random element from a list</font></h3><p><em>从列表中选择一个随机元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = []<span class="keyword">string</span>&#123;<span class="string">"bleen"</span>, <span class="string">"fuligin"</span>, <span class="string">"garrow"</span>, <span class="string">"grue"</span>, <span class="string">"hooloovoo"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(x[rand.Intn(<span class="built_in">len</span>(x))])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>fuligin</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickT</span><span class="params">(x []T)</span> <span class="title">T</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x[rand.Intn(<span class="built_in">len</span>(x))]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> list = []T&#123;<span class="string">"bleen"</span>, <span class="string">"fuligin"</span>, <span class="string">"garrow"</span>, <span class="string">"grue"</span>, <span class="string">"hooloovoo"</span>&#125;</span><br><span class="line">fmt.Println(pickT(list))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>fuligin</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;<span class="keyword">self</span>, Rng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> choice = x[rand::thread_rng().gen_range(<span class="number">0</span>..x.len())];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I picked &#123;&#125;!"</span>, choice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::seq::SliceRandom;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    <span class="keyword">let</span> choice = x.choose(&amp;<span class="keyword">mut</span> rng).unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I picked &#123;&#125;!"</span>, choice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="12-Check-if-list-contains-a-value"><a href="#12-Check-if-list-contains-a-value" class="headerlink" title="12. Check if list contains a value"></a>12. <font color="b5179e">Check if list contains a value</font></h3><blockquote><p>Check if list contains a value x.<br>list is an iterable finite container.</p></blockquote><p><em>检查列表中是否包含一个值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(list []T, x T)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="keyword">if</span> item == x &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []T&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">fmt.Println(Contains(list, <span class="string">"b"</span>))</span><br><span class="line">fmt.Println(Contains(list, <span class="string">"z"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list.contains(&amp;num) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list.contains(&amp;num) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> list.iter().any(|v| v == &amp;x) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (&amp;list).into_iter().any(|v| v == &amp;x) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="13-Iterate-over-map-keys-and-values"><a href="#13-Iterate-over-map-keys-and-values" class="headerlink" title="13. Iterate over map keys and values"></a>13. <font color="7209b7">Iterate over map keys and values</font></h3><blockquote><p>Access each key k with its value x from an associative array mymap, and print them</p></blockquote><p><em>遍历关联数组中的每一对 k-v， 并打印出它们</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"four"</span>:  <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, x := <span class="keyword">range</span> mymap &#123;</span><br><span class="line">fmt.Println(<span class="string">"Key ="</span>, k, <span class="string">", Value ="</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Key = two , Value = <span class="number">2</span></span><br><span class="line">Key = three , Value = <span class="number">3</span></span><br><span class="line">Key = four , Value = <span class="number">4</span></span><br><span class="line">Key = one , Value = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap = BTreeMap::new();</span><br><span class="line">    mymap.insert(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">    mymap.insert(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">    mymap.insert(<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line">    mymap.insert(<span class="string">"four"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k, x) <span class="keyword">in</span> &amp;mymap &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Key=&#123;key&#125;, Value=&#123;val&#125;"</span>, key = k, val = x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="14-Pick-uniformly-a-random-floating-point-number-in-a-b"><a href="#14-Pick-uniformly-a-random-floating-point-number-in-a-b" class="headerlink" title="14. Pick uniformly a random floating point number in [a..b)"></a>14. <font color="560bad">Pick uniformly a random floating point number in [a..b)</font></h3><blockquote><p>Pick a random number greater than or equals to a, strictly inferior to b. Precondition : a &lt; b.</p></blockquote><p><em>选出一个随机的浮点数，大于或等于a，严格小于b，且a&lt; b</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := pick(<span class="number">-2.0</span>, <span class="number">6.5</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pick</span><span class="params">(a, b <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + (rand.Float64() * (b - a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>3.1396124478267664</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;thread_rng, Rng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">1.0</span>, <span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">let</span> c = thread_rng().gen_range(a..b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="15-Pick-uniformly-a-random-integer-in-a-b"><a href="#15-Pick-uniformly-a-random-integer-in-a-b" class="headerlink" title="15. Pick uniformly a random integer in [a..b]"></a>15. <font color="3f37c9">Pick uniformly a random integer in [a..b]</font></h3><blockquote><p>Pick a random integer greater than or equals to a, inferior or equals to b. Precondition : a &lt; b.</p></blockquote><p><em>选出一个随机的整数，大于或等于a，小于或等于b，且a&lt; b</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := pick(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note that in the Go Playground, time and random don't change very often.</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pick</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + rand.Intn(b-a+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>4</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">pick</span></span>(a: <span class="built_in">i32</span>, b: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> between = Range::new(a, b);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    between.ind_sample(&amp;<span class="keyword">mut</span> rng)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::distributions::Distribution;</span><br><span class="line"><span class="keyword">use</span> rand::distributions::Uniform;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = Uniform::new_inclusive(a, b).sample(&amp;<span class="keyword">mut</span> rand::thread_rng());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="17-Create-a-Tree-data-structure"><a href="#17-Create-a-Tree-data-structure" class="headerlink" title="17. Create a Tree data structure"></a>17. <font color="4361ee">Create a Tree data structure</font></h3><blockquote><p>The structure must be recursive. A node may have zero or more children. A node has access to children nodes, but not to its parent.</p></blockquote><p><em>创建树数据结构,<br>该结构必须是递归的。一个节点可以有零个或多个子节点,节点可以访问子节点，但不能访问其父节点</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key keyType</span><br><span class="line">Deco valueType</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key      key</span><br><span class="line">Deco     value</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tree)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := <span class="string">"("</span></span><br><span class="line">str += <span class="keyword">string</span>(t.Deco)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t.Children) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str + <span class="string">")"</span></span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">" ("</span></span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> t.Children &#123;</span><br><span class="line">str += child.String()</span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">"))"</span></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Tree)</span> <span class="title">AddChild</span><span class="params">(x key, v value)</span> *<span class="title">Tree</span></span> &#123;</span><br><span class="line">child := &amp;Tree&#123;Key: x, Deco: v&#125;</span><br><span class="line">this.Children = <span class="built_in">append</span>(this.Children, child)</span><br><span class="line"><span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := &amp;Tree&#123;Key: <span class="string">"Granpa"</span>, Deco: <span class="string">"Abraham"</span>&#125;</span><br><span class="line">subtree := tree.AddChild(<span class="string">"Dad"</span>, <span class="string">"Homer"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 1"</span>, <span class="string">"Bart"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 2"</span>, <span class="string">"Lisa"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 3"</span>, <span class="string">"Maggie"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(tree)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>(Abraham ((Homer ((Bart)(Lisa)(Maggie)))))</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span>&lt;T&gt; &#123;</span><br><span class="line">    value: T,</span><br><span class="line">    children: <span class="built_in">Vec</span>&lt;Node&lt;T&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: F) &#123;</span><br><span class="line">       <span class="keyword">self</span>.dfs_helper(&amp;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dfs_helper</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: &amp;F) &#123;</span><br><span class="line">        (f)(&amp;<span class="keyword">self</span>.value);</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> &amp;<span class="keyword">self</span>.children &#123;</span><br><span class="line">            child.dfs_helper(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: Node&lt;<span class="built_in">i32</span>&gt; = Node &#123;</span><br><span class="line">        children: <span class="built_in">vec!</span>[</span><br><span class="line">            Node &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[</span><br><span class="line">                    Node &#123;</span><br><span class="line">                        children: <span class="built_in">vec!</span>[],</span><br><span class="line">                        value: <span class="number">14</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                value: <span class="number">28</span></span><br><span class="line">            &#125;,</span><br><span class="line">            Node &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[],</span><br><span class="line">                value: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        value: <span class="number">50</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    t.dfs(|node| &#123; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, node); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="18-Depth-first-traversing-of-a-tree"><a href="#18-Depth-first-traversing-of-a-tree" class="headerlink" title="18. Depth-first traversing of a tree"></a>18. <font color="4895ef">Depth-first traversing of a tree</font></h3><blockquote><p>Call a function f on every node of a tree, in depth-first prefix order</p></blockquote><p><em>树的深度优先遍历。按照深度优先的前缀顺序，在树的每个节点上调用函数f</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tree)</span> <span class="title">Dfs</span><span class="params">(f <span class="keyword">func</span>(*Tree)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f(t)</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> t.Children &#123;</span><br><span class="line">child.Dfs(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key      key</span><br><span class="line">Deco     value</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Tree)</span> <span class="title">AddChild</span><span class="params">(x key, v value)</span></span> &#123;</span><br><span class="line">child := &amp;Tree&#123;Key: x, Deco: v&#125;</span><br><span class="line">this.Children = <span class="built_in">append</span>(this.Children, child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NodePrint</span><span class="params">(node *Tree)</span></span> &#123;</span><br><span class="line">Printf(<span class="string">"%v (%v)\n"</span>, node.Deco, node.Key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := &amp;Tree&#123;Key: <span class="string">"Granpa"</span>, Deco: <span class="string">"Abraham"</span>&#125;</span><br><span class="line">tree.AddChild(<span class="string">"Dad"</span>, <span class="string">"Homer"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 1"</span>, <span class="string">"Bart"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 2"</span>, <span class="string">"Lisa"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 3"</span>, <span class="string">"Maggie"</span>)</span><br><span class="line"></span><br><span class="line">tree.Dfs(NodePrint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Abraham (Granpa)</span><br><span class="line">Homer (Dad)</span><br><span class="line">Bart (Kid <span class="number">1</span>)</span><br><span class="line">Lisa (Kid <span class="number">2</span>)</span><br><span class="line">Maggie (Kid <span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span>&lt;T&gt; &#123;</span><br><span class="line">    children: <span class="built_in">Vec</span>&lt;Tree&lt;T&gt;&gt;,</span><br><span class="line">    value: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Tree&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(value: T) -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        Tree&#123;</span><br><span class="line">            children: <span class="built_in">vec!</span>[],</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: F) &#123;</span><br><span class="line">       <span class="keyword">self</span>.dfs_helper(&amp;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dfs_helper</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: &amp;F) &#123;</span><br><span class="line">        (f)(&amp;<span class="keyword">self</span>.value);</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> &amp;<span class="keyword">self</span>.children &#123;</span><br><span class="line">            child.dfs_helper(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: Tree&lt;<span class="built_in">i32</span>&gt; = Tree &#123;</span><br><span class="line">        children: <span class="built_in">vec!</span>[</span><br><span class="line">            Tree &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[</span><br><span class="line">                    Tree &#123;</span><br><span class="line">                        children: <span class="built_in">vec!</span>[],</span><br><span class="line">                        value: <span class="number">14</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                value: <span class="number">28</span></span><br><span class="line">            &#125;,</span><br><span class="line">            Tree &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[],</span><br><span class="line">                value: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        value: <span class="number">50</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    t.dfs(|node| &#123; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, node); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="19-Reverse-a-list"><a href="#19-Reverse-a-list" class="headerlink" title="19. Reverse a list"></a>19. <font color="4895ef">Reverse a list</font></h3><blockquote><p>Reverse the order of the elements of list x.<br>This may reverse “in-place” and destroy the original ordering.</p></blockquote><p><em>反转链表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[4 1 3 6 2 5]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="string">"Hello"</span>, <span class="string">"World"</span>];</span><br><span class="line">    <span class="keyword">let</span> y: <span class="built_in">Vec</span>&lt;_&gt; = x.iter().rev().collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"World"</span>, <span class="string">"Hello"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    x.reverse();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="20-Return-two-values"><a href="#20-Return-two-values" class="headerlink" title="20. Return two values"></a>20. <font color="14213d">Return two values</font></h3><blockquote><p>Implement a function search which looks for item x in a 2D matrix m.<br>Return indices i, j of the matching cell.<br>Think of the most idiomatic way in the language to return the two values at the same time.</p></blockquote><p><em>实现在2D矩阵m中寻找元素x，返回匹配单元格的索引 i，j</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(m [][]<span class="keyword">int</span>, x <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">bool</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">for</span> j, v := <span class="keyword">range</span> m[i] &#123;</span><br><span class="line"><span class="keyword">if</span> v == x &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, i, j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">matrix := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">1</span>; x &lt;= <span class="number">11</span>; x += <span class="number">2</span> &#123;</span><br><span class="line">found, i, j := search(matrix, x)</span><br><span class="line"><span class="keyword">if</span> found &#123;</span><br><span class="line">fmt.Printf(<span class="string">"matrix[%v][%v] == %v \n"</span>, i, j, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Value %v not found. \n"</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> </span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">2</span>] == <span class="number">3</span> </span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">5</span> </span><br><span class="line">matrix[<span class="number">2</span>][<span class="number">0</span>] == <span class="number">7</span> </span><br><span class="line">matrix[<span class="number">2</span>][<span class="number">2</span>] == <span class="number">9</span> </span><br><span class="line">Value <span class="number">11</span> not found.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">search</span></span>&lt;T: <span class="built_in">Eq</span>&gt;(m: &amp;<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;T&gt;&gt;, x: &amp;T) -&gt; <span class="built_in">Option</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (i, row) <span class="keyword">in</span> m.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">for</span> (j, column) <span class="keyword">in</span> row.iter().enumerate() &#123;</span><br><span class="line">            <span class="keyword">if</span> *column == *x &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Some</span>((i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">11</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">22</span>, <span class="number">33</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">44</span>, <span class="number">55</span>],</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> hit = search(&amp;a, &amp;<span class="number">33</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, hit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Some</span>((<span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://programming-idioms.org/about#about-block-cheatsheets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个网站&lt;/a&gt; 可以列出某门编程语言的常用语法，也可以对比两种语言的
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>字符串匹配的Rabin–Karp算法</title>
    <link href="http://www.dashen.tech/2021/08/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84Rabin%E2%80%93Karp%E7%AE%97%E6%B3%95/"/>
    <id>http://www.dashen.tech/2021/08/11/字符串匹配的Rabin–Karp算法/</id>
    <published>2021-08-11T14:51:28.000Z</published>
    <updated>2021-09-30T09:01:30.282Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><p><a href="https://dashen.tech/2015/03/01/leetcode-28-%E5%AE%9E%E7%8E%B0strStr/" target="_blank" rel="noopener">leetcode-28 实现strStr()</a></p><p>更熟悉的字符串匹配算法可能是<a href="https://dashen.tech/2018/05/13/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84KMP%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">KMP算法</a>, 但在Golang中,使用的是<a href="https://zh.wikipedia.org/wiki/%E6%8B%89%E5%AE%BE-%E5%8D%A1%E6%99%AE%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Rabin–Karp算法</a></p><hr><p><br></p><p>一般中文译作 <strong>拉宾-卡普算法</strong>,由<a href="https://dashen.tech/2020/05/07/%E5%A4%A9%E7%A5%9E%E8%8D%9F%E8%90%83/#Michael-Rabin" target="_blank" rel="noopener">迈克尔·拉宾</a>与<a href="https://dashen.tech/2020/05/07/%E5%A4%A9%E7%A5%9E%E8%8D%9F%E8%90%83/#Richard-Karp" target="_blank" rel="noopener">理查德·卡普</a>于1987年提出</p><blockquote><p>要在一段文本中找出单个模式串的一个匹配，此算法具有线性时间的平均复杂度，其运行时间与待匹配文本和模式串的长度成线性关系。虽然平均情况下，此算法表现优异，但最坏情况下，其复杂度为文本长与模式串长的乘积</p></blockquote><p>尽可能多的利用上一步的结果，这是优化时间复杂度的一大核心</p><p><br></p><h3 id="对于数字类型的字符串，可有如下匹配方法："><a href="#对于数字类型的字符串，可有如下匹配方法：" class="headerlink" title="对于数字类型的字符串，可有如下匹配方法："></a>对于数字类型的字符串，可有如下匹配方法：</h3><p><br></p><p><img src="/2021/08/11/字符串匹配的Rabin–Karp算法/rk.png" width="100%" height="50%"></p><p><br></p><h3 id="将该方法扩展到非数字类型的字符串："><a href="#将该方法扩展到非数字类型的字符串：" class="headerlink" title="将该方法扩展到非数字类型的字符串："></a>将该方法扩展到非数字类型的字符串：</h3><p><br></p><p><img src="/2021/08/11/字符串匹配的Rabin–Karp算法/val.png" width="100%" height="50%"></p><font size="1"><br>以上这张图片的LaTex：<br><br><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="formula">$$<span class="tag">\<span class="name">begin</span><span class="string">&#123;gather&#125;</span></span></span></span><br><span class="line"><span class="formula">  </span></span><br><span class="line"><span class="formula">对于长度为n的字符串 x_&#123;0&#125; x_&#123;1&#125; x_&#123;2&#125; ... x_&#123;n-1&#125;,<span class="tag">\<span class="name">\</span></span>其对应的“值”val为<span class="tag">\<span class="name">\</span></span></span></span><br><span class="line"><span class="formula"></span></span><br><span class="line"><span class="formula">val = x_&#123;0&#125; <span class="tag">\<span class="name">times</span></span> r^&#123;n-1&#125; + x_&#123;1&#125;<span class="tag">\<span class="name">times</span></span> r^&#123;n-2&#125; + ... +  x_&#123;n-1&#125;<span class="tag">\<span class="name">times</span></span> r^&#123;0&#125;</span></span><br><span class="line"><span class="formula"> </span></span><br><span class="line"><span class="formula"> <span class="tag">\<span class="name">\</span></span>其中r为进制数<span class="tag">\<span class="name">end</span><span class="string">&#123;gather&#125;</span></span>$</span></span><br></pre></td></tr></table></figure><br><br></font><p><img src="/2021/08/11/字符串匹配的Rabin–Karp算法/ascii.png" width="100%" height="50%"></p><p><img src="/2021/08/11/字符串匹配的Rabin–Karp算法/rk-str.png" width="100%" height="50%"></p><font size="1" color="grey"><br><br>ASCII：英语字符与二进制位之间的关系<br>(其他语言？？)<br><br><a href="https://zh.wikipedia.org/wiki/Unicode" target="_blank" rel="noopener">Unicode</a>：将世界上所有的符号都纳入其中，<br>每个符号都对应一个独一无二的编码，最多可以容纳1114112个字符(2021年9月公布的14.0.0，已经收录超过14万个字符)<br>(有个问题是浪费空间。。)  也译作统一码/万国码/国际码<br><br>UTF-8: 使用最广的一种 Unicode 的实现方式<br>(最大特点是 变长的编码方式)<br><br><a href="https://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a><br><br><a href="http://www.chi2ko.com/tool/CJK.htm" target="_blank" rel="noopener">中日韩汉字Unicode编码表</a><br><br></font><p><br></p><h3 id="源码注释："><a href="#源码注释：" class="headerlink" title="源码注释："></a>源码注释：</h3><p><br></p><p><img src="/2021/08/11/字符串匹配的Rabin–Karp算法/reading.png" width="100%" height="50%"></p><p>将源码中的<em>16777619</em>进制改为10进制，从字符串31415926中搜索4159：</p><p><strong>4159</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> primeRK <span class="keyword">uint32</span> = <span class="number">10</span></span><br><span class="line">sep := <span class="string">"4159"</span></span><br><span class="line">hash := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sep); i++ &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//fmt.Println(sep[i])</span></span><br><span class="line"><span class="comment">//fmt.Println(string(sep[i]))</span></span><br><span class="line">next, _ := strconv.Atoi(<span class="keyword">string</span>(sep[i]))</span><br><span class="line"><span class="comment">//hash = hash*primeRK + uint32(sep[i])</span></span><br><span class="line">hash = hash*primeRK + <span class="keyword">uint32</span>(next)</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="number">415</span></span><br><span class="line"><span class="number">4159</span></span><br></pre></td></tr></table></figure><p><br></p><p><em>完整的以10为primeRK，从31415926中搜索4159的代码：</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PrimeRKNew = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">`31415926`</span></span><br><span class="line">substr := <span class="string">"4159"</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"最终结果为:"</span>,  IndexRabinKarpNew(str, substr))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashStrNew</span><span class="params">(sep <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">uint32</span>, <span class="keyword">uint32</span>)</span></span> &#123;</span><br><span class="line">hash := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sep); i++ &#123;</span><br><span class="line"><span class="comment">//fmt.Println(sep[i])</span></span><br><span class="line"><span class="comment">//fmt.Println(string(sep[i]))</span></span><br><span class="line">next, _ := strconv.Atoi(<span class="keyword">string</span>(sep[i]))</span><br><span class="line"><span class="comment">//hash = hash*primeRK + uint32(sep[i])</span></span><br><span class="line">hash = hash*PrimeRKNew + <span class="keyword">uint32</span>(next)</span><br><span class="line">fmt.Println(hash)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pow, sq <span class="keyword">uint32</span> = <span class="number">1</span>, PrimeRKNew</span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(sep); i &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"i is:"</span>, i, <span class="string">"---"</span>, <span class="string">"i&amp;1 is:"</span>, i&amp;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> i&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">pow *= sq</span><br><span class="line">&#125;</span><br><span class="line">sq *= sq</span><br><span class="line">fmt.Println(<span class="string">"pow is:"</span>, pow)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash, pow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexRabinKarpNew</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// Rabin-Karp search</span></span><br><span class="line">hashss, pow := HashStrNew(substr)</span><br><span class="line">fmt.Println(<span class="string">"hashss, pow:"</span>, hashss, pow)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"~~~分割线~~~"</span>)</span><br><span class="line"></span><br><span class="line">n := <span class="built_in">len</span>(substr)</span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">uint32</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">next1, _ := strconv.Atoi(<span class="keyword">string</span>(s[i]))</span><br><span class="line"><span class="comment">//h = h*PrimeRKNew + uint32(s[i])</span></span><br><span class="line">fmt.Println(<span class="string">"next1 is:"</span>, next1)</span><br><span class="line">h = h*PrimeRKNew + <span class="keyword">uint32</span>(next1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"h即T串初始值为:"</span>, h)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> h == hashss &amp;&amp; s[:n] == substr &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := n; i &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">h *= PrimeRKNew</span><br><span class="line">fmt.Println(<span class="string">"h*=:"</span>, h)</span><br><span class="line"></span><br><span class="line">last, _ := strconv.Atoi(<span class="keyword">string</span>(s[i])) <span class="comment">//当前T串的最后一个元素</span></span><br><span class="line">fmt.Println(<span class="string">"last is:"</span>, last)</span><br><span class="line"><span class="comment">//h += uint32(s[i])</span></span><br><span class="line">h += <span class="keyword">uint32</span>(last)</span><br><span class="line">fmt.Println(<span class="string">"h+=:"</span>, h)</span><br><span class="line"></span><br><span class="line"><span class="comment">//h -= pow * uint32(s[i-n])</span></span><br><span class="line">first, _ := strconv.Atoi(<span class="keyword">string</span>(s[i-n])) <span class="comment">//当前T串的第一个元素</span></span><br><span class="line">fmt.Println(<span class="string">"first is:"</span>, first)</span><br><span class="line">h -= pow * <span class="keyword">uint32</span>(first)</span><br><span class="line">fmt.Println(<span class="string">"h-=:"</span>, h)</span><br><span class="line"></span><br><span class="line">i++</span><br><span class="line">fmt.Println(<span class="string">"---下次循环的 i为 ---"</span>, i)</span><br><span class="line"><span class="keyword">if</span> h == hashss &amp;&amp; s[i-n:i] == substr &#123; <span class="comment">//s[i-n:i]为当前的T串</span></span><br><span class="line"><span class="keyword">return</span> i - n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">41</span></span><br><span class="line"><span class="number">415</span></span><br><span class="line"><span class="number">4159</span></span><br><span class="line">i is: <span class="number">4</span> --- i&amp;<span class="number">1</span> is: <span class="number">0</span></span><br><span class="line">pow is: <span class="number">1</span></span><br><span class="line">i is: <span class="number">2</span> --- i&amp;<span class="number">1</span> is: <span class="number">0</span></span><br><span class="line">pow is: <span class="number">1</span></span><br><span class="line">i is: <span class="number">1</span> --- i&amp;<span class="number">1</span> is: <span class="number">1</span></span><br><span class="line">pow is: <span class="number">10000</span></span><br><span class="line">hashss, pow: <span class="number">4159</span> <span class="number">10000</span></span><br><span class="line">~~~分割线~~~</span><br><span class="line">next1 is: <span class="number">3</span></span><br><span class="line">next1 is: <span class="number">1</span></span><br><span class="line">next1 is: <span class="number">4</span></span><br><span class="line">next1 is: <span class="number">1</span></span><br><span class="line">h即T串初始值为: <span class="number">3141</span></span><br><span class="line">h*=: <span class="number">31410</span></span><br><span class="line">last is: <span class="number">5</span></span><br><span class="line">h+=: <span class="number">31415</span></span><br><span class="line">first is: <span class="number">3</span></span><br><span class="line">h-=: <span class="number">1415</span></span><br><span class="line">---下次循环的 i为 --- <span class="number">5</span></span><br><span class="line">h*=: <span class="number">14150</span></span><br><span class="line">last is: <span class="number">9</span></span><br><span class="line">h+=: <span class="number">14159</span></span><br><span class="line">first is: <span class="number">1</span></span><br><span class="line">h-=: <span class="number">4159</span></span><br><span class="line">---下次循环的 i为 --- <span class="number">6</span></span><br><span class="line">最终结果为: <span class="number">2</span></span><br></pre></td></tr></table></figure><p><a href="https://dashen.tech/2021/08/09/strings-Contains-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%9A%A8internal-bytealg%E5%88%9D%E6%8E%A2/" target="_blank" rel="noopener">strings.Contains()源码阅读暨internal/bytealg初探</a></p><p><br></p><hr><p><br></p><p>书籍推荐 </p><p><a href="https://book.douban.com/subject/2038862/" target="_blank" rel="noopener">柔性字符串匹配</a></p><p><br></p><p>牛刀小试:</p><p><a href="https://dashen.tech/2015/03/01/leetcode-28-%E5%AE%9E%E7%8E%B0strStr/" target="_blank" rel="noopener">力扣28. 实现strStr()</a></p><p><a href="https://leetcode-cn.com/problems/repeated-dna-sequences/" target="_blank" rel="noopener">力扣187. 重复的DNA序列</a></p><p><a href="https://leetcode-cn.com/problems/repeated-string-match/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener">力扣686. 重复叠加字符串匹配</a></p><hr><p><br></p><p>另：</p><p>除去KMP和RK算法，字符串匹配还有 <a href="https://zhuanlan.zhihu.com/p/168700696" target="_blank" rel="noopener">Boyer-Moore算法</a>(简称<em>BM算法</em>)系列算法，其核心思想是：</p><blockquote><p>在字符串匹配过程中，模式串发现不匹配时，跳过尽可能多的字符以进行下一步的匹配，从而提高匹配效率</p></blockquote><p>BM算法的简化版<a href="http://www.ifcoding.com/archives/247.html" target="_blank" rel="noopener">Horspool算法</a></p><p>以及性能更好的<a href="https://zhuanlan.zhihu.com/p/170513335" target="_blank" rel="noopener">Sunday算法</a></p><p>Python用的也不是KMP，而是boyer-moore和horspool, <a href="https://svn.python.org/projects/python/branches/pep-0384/Objects/stringlib/fastsearch.h" target="_blank" rel="noopener">源码点此</a></p><p><a href="https://segmentfault.com/q/1010000023841178/a-1020000023851399" target="_blank" rel="noopener">KMP 算法的实际应用有哪些？</a></p><p><a href="http://www.ifcoding.com/archives/247.html" target="_blank" rel="noopener">图解字符串匹配之Horspool算法和Boyer-Moore算法</a></p><hr><p><br></p><p>参考：</p><p><a href="https://sjis.me/2019/09/26/2019-09-26-rabin-karp/" target="_blank" rel="noopener">RABIN-KARP在GOLANG中的实现</a></p><p><a href="https://mp.weixin.qq.com/s/7Z1U19qykCjNBP64NraVmw" target="_blank" rel="noopener">编码：KR字符串匹配，一个简单到领导都看得懂的算法</a></p><p><a href="https://blog.csdn.net/weixin_43960117/article/details/109656341" target="_blank" rel="noopener">Rabin-Karp（旋转哈希）算法</a></p><p><a href="https://www.jianshu.com/p/efca349a218d" target="_blank" rel="noopener">字符串处理 Rabin-Karp (Rolling Hash)及相关LeetCode题目</a></p><p><a href="https://www.cnblogs.com/golove/p/3234673.html" target="_blank" rel="noopener">Rabin-Karp 算法（字符串快速查找）</a></p><p><a href="https://studygolang.com/articles/1191" target="_blank" rel="noopener">字符串查找算法（二）</a></p><p><a href="https://studygolang.com/articles/20164" target="_blank" rel="noopener">[Golang] 源码探究:strings</a></p><p><a href="https://github.com/golang/go/blob/master/src/internal/bytealg/bytealg.go" target="_blank" rel="noopener">go/src/internal/bytealg/bytealg.go</a></p><p><a href="https://studygolang.com/articles/3553" target="_blank" rel="noopener">Go语言源码中的Rabin-Karp算法</a></p><p><a href="https://www.yuque.com/zeng1999/zagw0q/teknzz?language=zh-cn" target="_blank" rel="noopener">Golang 源码阅读笔记/bytes</a></p><p><a href="https://github.com/search?l=Go&amp;q=IndexByteString&amp;type=Code" target="_blank" rel="noopener">github-IndexByteString</a></p><p><a href="https://leetcode-cn.com/problems/implement-strstr/solution/yi-dong-de-rabin-karpsuan-fa-hao-xiang-mei-ren-xie/" target="_blank" rel="noopener">简单易懂的Rabin Karp算法详解！</a></p><p><a href="https://coolcao.com/2020/08/20/rabin-karp/" target="_blank" rel="noopener">字符串匹配算法-Rabin Karp算法</a></p><p><a href="https://www.bilibili.com/s/video/BV1xJ411b7rH" target="_blank" rel="noopener">[算法]轻松掌握rabin-karp</a></p><p><a href="https://juejin.cn/post/6844903638490415111" target="_blank" rel="noopener">Rabin–Karp算法</a></p><p><a href="https://zhuanlan.zhihu.com/p/82871762" target="_blank" rel="noopener">聊一聊字节跳动的面试</a></p><p><a href="https://blog.cyeam.com/golang/2014/08/08/go_index" target="_blank" rel="noopener">Golang源码剖析——字符串查找算法</a></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dashen.tech/2015/03/01/leetcode-28-%E5%AE%9E%E7%8E%B0strStr/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;leetcode-28 实现s
      
    
    </summary>
    
    
      <category term="算法" scheme="http://www.dashen.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>strings.Contains()源码阅读暨internal/bytealg初探</title>
    <link href="http://www.dashen.tech/2021/08/09/strings-Contains-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E6%9A%A8internal-bytealg%E5%88%9D%E6%8E%A2/"/>
    <id>http://www.dashen.tech/2021/08/09/strings-Contains-源码阅读暨internal-bytealg初探/</id>
    <published>2021-08-09T14:42:17.000Z</published>
    <updated>2021-09-30T09:45:48.992Z</updated>
    
    <content type="html"><![CDATA[<font size="2" color="33ccff"><br><br>该篇内容去<a href="https://github.com/talkgo" target="_blank" rel="noopener">Go夜读</a>做了分享,配合<a href="https://www.bilibili.com/video/BV1Hb4y117vu" target="_blank" rel="noopener">视频</a>食用更佳<br><br><br>可能是因为头一次，也可能是准备不算绝对充分，远没有信手即拈来，更激动也忧心此后要被许多同行——包括新手和大牛，数次学习或检验从而压力山大，有些微紧张。几次口齿不清，数度大脑间歇空白，更有片段未顾及听众观感语速不自觉飞快<br><br><br>总之也勇敢迈出了这一步，继续加油，继续Explore。<br><br>感谢<a href="https://github.com/yangwenmai" target="_blank" rel="noopener">杨文</a>大佬的组织，折腾起这样一个社区，个人要付出得太多。 自18年学习go以来便从中<a href="https://github.com/talkgo/night/blob/6345a0111457cb3713a435f34298912f2eac566d/content/discuss/2019-01-10-anlayze-range.md" target="_blank" rel="noopener">获益良多</a>，也希望以后再能返馈涓埃<br><br><br>视频中有期期艾艾片段多多包涵，有讲解不清之处欢迎联系 交流探讨<br><br>2021.09.30补记.</font><p><br></p><hr><p><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">subStr := <span class="string">"asdadas"</span></span><br><span class="line"></span><br><span class="line">longStr := <span class="string">"sadsferwasdaasdasaeqasdadasrdgasdaddsaas"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(strings.Contains(longStr, subStr))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/cuishuang/go/blob/master/src/strings/strings.go#L61" target="_blank" rel="noopener">src/strings/strings.go#L61</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Contains reports whether substr is within s.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Index(s, substr) &gt;= <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>strings.Contains()</code>底层调的是<code>strings.Index()</code>,前者是判断某个文本串T中是否存在匹配的子串P，后者是返回某个文本串T中匹配的子串P首次出现的位置，若没有则返回-1</p><p><br></p><p><img src="/2021/08/09/strings-Contains-源码阅读暨internal-bytealg初探/Go字符串匹配.png" width="100%" height="50%"></p><p><a href="https://www.processon.com/view/link/6149cb9b1e085315dc4e73d9" target="_blank" rel="noopener">原图点此</a></p><p><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">str := <span class="string">"hello world"</span></span><br><span class="line">substr := <span class="string">"o"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//str = "hello world"</span></span><br><span class="line"><span class="comment">//substr = "or"</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//str = "hello worldhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" //100</span></span><br><span class="line"><span class="comment">//substr = "orldhhh"                                                                                           //7</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//str = "ooooooooohello worldhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" //100</span></span><br><span class="line"><span class="comment">//substr = "orldhhh"                                                                                           //7</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//str = "hello worldhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" //100</span></span><br><span class="line"><span class="comment">//substr = "orldhhhxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"                            //70</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//str = "ooooooooohello worldhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh" //100</span></span><br><span class="line"><span class="comment">//substr = "orldhhhxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyy"                            //70</span></span><br><span class="line"></span><br><span class="line">rs := strings.Index(str, substr)</span><br><span class="line"></span><br><span class="line">fmt.Println(rs)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://gitee.com/cuishuang/go/blob/master/src/strings/strings.go#L1024" target="_blank" rel="noopener">src/strings/strings.go#L61</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Index returns the index of the first instance of substr in s, or -1 if substr is not present in s.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Index</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">n := <span class="built_in">len</span>(substr)</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">case</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> IndexByte(s, substr[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">case</span> n == <span class="built_in">len</span>(s):</span><br><span class="line"><span class="keyword">if</span> substr == s &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">case</span> n &gt; <span class="built_in">len</span>(s):</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"><span class="keyword">case</span> n &lt;= bytealg.MaxLen:</span><br><span class="line"><span class="comment">// Use brute force when s and substr both are small</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= bytealg.MaxBruteForce &#123;</span><br><span class="line"><span class="keyword">return</span> bytealg.IndexString(s, substr)</span><br><span class="line">&#125;</span><br><span class="line">c0 := substr[<span class="number">0</span>]</span><br><span class="line">c1 := substr[<span class="number">1</span>]</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">t := <span class="built_in">len</span>(s) - n + <span class="number">1</span> <span class="comment">// 滑动窗口，如s长度为100，substr长度为7，那完成整个比较过程，最多仅需要滑动 100-7+1=94 次（此处并不是每次+1比较，所以需要的次数实际会更少）</span></span><br><span class="line">fails := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; t &#123;</span><br><span class="line"><span class="keyword">if</span> s[i] != c0 &#123;</span><br><span class="line"><span class="comment">// IndexByte is faster than bytealg.IndexString, so use it as long as</span></span><br><span class="line"><span class="comment">// we're not getting lots of false positives.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IndexByte 比 bytealg.IndexString 快，所以只要我们没有收到很多误报，就尽可能去使用IndexByte</span></span><br><span class="line">o := IndexByte(s[i+<span class="number">1</span>:t], c0)</span><br><span class="line"><span class="keyword">if</span> o &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">i += o + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s[i+<span class="number">1</span>] == c1 &amp;&amp; s[i:i+n] == substr &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">fails++</span><br><span class="line">i++</span><br><span class="line"><span class="comment">// Switch to bytealg.IndexString when IndexByte produces too many false positives.</span></span><br><span class="line"><span class="comment">// 当IndexByte有太多误报时，切回到bytealg.IndexString</span></span><br><span class="line"><span class="comment">// 失败次数&gt; 阈值时，余下部分再切换回 「字符比较」; 对于arm64: 阈值为 4 + （到目前为止已处理的元素数/16 向下取整); 对于amd64: 阈值为 （到目前为止已处理的元素数+16/8) 向下取整)</span></span><br><span class="line"><span class="keyword">if</span> fails &gt; bytealg.Cutover(i) &#123;</span><br><span class="line">r := bytealg.IndexString(s[i:], substr)</span><br><span class="line"><span class="keyword">if</span> r &gt;= <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> r + i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">c0 := substr[<span class="number">0</span>]</span><br><span class="line">c1 := substr[<span class="number">1</span>]</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">t := <span class="built_in">len</span>(s) - n + <span class="number">1</span></span><br><span class="line">fails := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i &lt; t &#123;</span><br><span class="line"><span class="keyword">if</span> s[i] != c0 &#123;</span><br><span class="line">o := IndexByte(s[i+<span class="number">1</span>:t], c0)</span><br><span class="line"><span class="keyword">if</span> o &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">i += o + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> s[i+<span class="number">1</span>] == c1 &amp;&amp; s[i:i+n] == substr &#123;</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line">i++</span><br><span class="line">fails++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当 失败次数&gt; 阈值时，余下部分执行「Rabin-Karp算法」； 对于arm64和amd64，阈值均为 4 + （到目前为止已处理的元素数/16 向下取整)</span></span><br><span class="line"><span class="comment">// 好奇：为何和上面bytealg.Cutover(i)的阈值逻辑不一样？</span></span><br><span class="line"><span class="keyword">if</span> fails &gt;= <span class="number">4</span>+i&gt;&gt;<span class="number">4</span> &amp;&amp; i &lt; t &#123;</span><br><span class="line"><span class="comment">// See comment in ../bytes/bytes.go.</span></span><br><span class="line">j := bytealg.IndexRabinKarp(s[i:], substr)</span><br><span class="line"><span class="keyword">if</span> j &lt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i + j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s.</span></span><br><span class="line"><span class="comment">// IndexByte 返回 s 中 c 的第一个实例的索引，如果 c 不存在于 s 中，则返回 -1。</span></span><br><span class="line"><span class="comment">// 即给一个字符串和单个”字符“，返回这个字符在字符串中第一次出现的位置。汇编代码，暴力比较</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexByte</span><span class="params">(s <span class="keyword">string</span>, c <span class="keyword">byte</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> bytealg.IndexByteString(s, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><p><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/indexbyte_native.go#L14" target="_blank" rel="noopener">src/internal/bytealg/indexbyte_native.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// +build 386 amd64 s390x arm arm64 ppc64 ppc64le mips mipsle mips64 mips64le riscv64 wasm</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//go:noescape</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexByteString</span><span class="params">(s <span class="keyword">string</span>, c <span class="keyword">byte</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure><p><br></p><p><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/indexbyte_arm64.s#L14" target="_blank" rel="noopener">src/internal/bytealg/indexbyte_arm64.s</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TEXT ·IndexByteString(SB),NOSPLIT,$<span class="number">0</span><span class="number">-32</span></span><br><span class="line">MOVDs_base+<span class="number">0</span>(FP), R0</span><br><span class="line">MOVDs_len+<span class="number">8</span>(FP), R2</span><br><span class="line">MOVBUc+<span class="number">16</span>(FP), R1</span><br><span class="line">MOVD$ret+<span class="number">24</span>(FP), R8</span><br><span class="line">Bindexbytebody&lt;&gt;(SB)</span><br></pre></td></tr></table></figure><p><br></p><p><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/index_native.go#L21" target="_blank" rel="noopener">src/internal/bytealg/index_native.go</a><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IndexString returns the index of the first instance of b in a, or -1 if b is not present in a.</span></span><br><span class="line"><span class="comment">// Requires 2 &lt;= len(b) &lt;= MaxLen.</span></span><br><span class="line"><span class="comment">//IndexString 返回 a 中 b 的第一个实例的索引，如果 b 不存在于 a 中，则返回 -1。 需要 2 &lt;= len(b) &lt;= MaxLen。</span></span><br><span class="line"><span class="comment">// 即给两个字符串a和b，返回字符串b在字符串a中第一次出现的位置。汇编代码，暴力比较</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexString</span><span class="params">(a, b <span class="keyword">string</span>)</span> <span class="title">int</span></span></span><br></pre></td></tr></table></figure></p><p><br></p><p><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/bytealg.go#L130" target="_blank" rel="noopener">src/internal/bytealg/index_arm64.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> bytealg</span><br><span class="line"></span><br><span class="line"><span class="comment">// Empirical data shows that using Index can get better</span></span><br><span class="line"><span class="comment">// performance when len(s) &lt;= 16.</span></span><br><span class="line"><span class="keyword">const</span> MaxBruteForce = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Optimize cases where the length of the substring is less than 32 bytes</span></span><br><span class="line">MaxLen = <span class="number">32</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Cutover reports the number of failures of IndexByte we should tolerate</span></span><br><span class="line"><span class="comment">// before switching over to Index.</span></span><br><span class="line"><span class="comment">// n is the number of bytes processed so far.</span></span><br><span class="line"><span class="comment">// See the bytes.Index implementation for details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cutover 报告在切换到 Index 之前我们应该容忍的 IndexByte 的失败次数。</span></span><br><span class="line"><span class="comment">//n 是到目前为止处理的字节数。</span></span><br><span class="line"><span class="comment">//有关详细信息，请参阅 bytes.Index 实现。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cutover</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123; <span class="comment">// cutover 切换；转换，和switch一个意思</span></span><br><span class="line"><span class="comment">// 1 error per 16 characters, plus a few slop to start.</span></span><br><span class="line"><span class="comment">//每 16 个字符有 1 个错误，加上开始时的一些错误。</span></span><br><span class="line"><span class="comment">// 即 n/16向下取整，再+4</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span> + n&gt;&gt;<span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><strong>MaxLen：</strong></p><ul><li><p>arm64架构： 32</p></li><li><p>s390x: 64</p></li><li><p>amd64: 如果支持HasAVX2指令集，为63；否则为32</p></li></ul><p><img src="/2021/08/09/strings-Contains-源码阅读暨internal-bytealg初探/maxlen.png" width="90%" height="50%"></p><p><br></p><p><strong>MaxBruteForce:</strong></p><ul><li><p>arm64: 16</p></li><li><p>amd64: 64</p></li></ul><p><br></p><p><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/bytealg.go#L130" target="_blank" rel="noopener">src/internal/bytealg/bytealg.go</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// MaxLen is the maximum length of the string to be searched for (argument b) in Index.</span></span><br><span class="line"><span class="comment">// If MaxLen is not 0, make sure MaxLen &gt;= 4.</span></span><br><span class="line"><span class="keyword">var</span> MaxLen <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// PrimeRK is the prime base used in Rabin-Karp algorithm.</span></span><br><span class="line"><span class="comment">// primeRK相当于进制 (直译为 素数基)</span></span><br><span class="line"><span class="keyword">const</span> PrimeRK = <span class="number">16777619</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// IndexRabinKarp uses the Rabin-Karp search algorithm to return the index of the</span></span><br><span class="line"><span class="comment">// first occurrence of substr in s, or -1 if not present.</span></span><br><span class="line"><span class="comment">// IndexRabinKarp 使用 Rabin-Karp 搜索算法返回 substr 在 s 中第一次出现的索引，如果不存在则返回 -1。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IndexRabinKarp</span><span class="params">(s, substr <span class="keyword">string</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// Rabin-Karp search</span></span><br><span class="line"><span class="comment">// 返回待匹配字符串(模式串)的哈希值(即P串)，以及pow (为PrimeRK的n-1次方，n为模式串的长度)</span></span><br><span class="line">hashss, pow := HashStr(substr)</span><br><span class="line">n := <span class="built_in">len</span>(substr)</span><br><span class="line"><span class="keyword">var</span> h <span class="keyword">uint32</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line">h = h*PrimeRK + <span class="keyword">uint32</span>(s[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> h == hashss &amp;&amp; s[:n] == substr &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i := n; i &lt; <span class="built_in">len</span>(s); &#123;</span><br><span class="line">h *= PrimeRK</span><br><span class="line">h += <span class="keyword">uint32</span>(s[i])</span><br><span class="line">h -= pow * <span class="keyword">uint32</span>(s[i-n])</span><br><span class="line">i++</span><br><span class="line"><span class="keyword">if</span> h == hashss &amp;&amp; s[i-n:i] == substr &#123;</span><br><span class="line"><span class="keyword">return</span> i - n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HashStr returns the hash and the appropriate multiplicative</span></span><br><span class="line"><span class="comment">// factor for use in Rabin-Karp algorithm.</span></span><br><span class="line"><span class="comment">//HashStr的两个返回值，hashss即9图中P模式串的哈希值，pow为PrimeRK的n-1次方(n为模式串P的长度)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">HashStr</span><span class="params">(sep <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">uint32</span>, <span class="keyword">uint32</span>)</span></span> &#123;</span><br><span class="line">hash := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sep); i++ &#123;</span><br><span class="line"><span class="comment">// 当某个运算后发生溢出，将结果对uint32的上限即(1&lt;&lt;32 - 1，也就是4294967295)取模；而后再进行后面的运算</span></span><br><span class="line"><span class="comment">// 类似于一个时钟表盘，从现在开始3小时和27小时后，指针都在相同位置</span></span><br><span class="line">hash = hash*PrimeRK + <span class="keyword">uint32</span>(sep[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pow, sq <span class="keyword">uint32</span> = <span class="number">1</span>, PrimeRK</span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(sep); i &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span> &#123;  <span class="comment">// i &gt;&gt;= 1 即 i = i &gt;&gt; 1</span></span><br><span class="line"><span class="keyword">if</span> i&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">pow *= sq</span><br><span class="line">&#125;</span><br><span class="line">sq *= sq</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash, pow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pow即(n-1)个PrimeRK相乘，其中n=len(sep)；</p><p>等价于如下</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sep); i++ &#123;</span><br><span class="line">pow *= PrimeRK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这步for循环算P串hash的操作，之所以不累加，应该是为了防止发生加法溢出(根据同余定理，乘法导致的溢出应该没问题)。这样得到的效果与累加一致，如上面计算</p><p>Rabin–Karp算法部分的详细内容，可移步 <a href="https://dashen.tech/2021/08/11/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%9A%84Rabin%E2%80%93Karp%E7%AE%97%E6%B3%95/" target="_blank" rel="noopener">字符串匹配的Rabin–Karp算法</a>查看</p><p><br></p><hr><p><br></p><p>另：</p><font size="1"><br><br><br><br><a href="https://gitee.com/cuishuang/go/blob/master/src/internal/bytealg/index_native.go#L21" target="_blank" rel="noopener">src/internal/bytealg/index_native.go</a>中的<code>func IndexString(a, b string) int</code><br><br><br>为何只有方法名，而没有实现。 并且也没有发现<code>//go:linkname指令</code>及unsafe包?<br><br><br><br>函数只有签名，没有函数体一般有两种情况,其一便是<a href="https://dashen.tech/2021/05/23/go-linkname/" target="_blank" rel="noopener">go:linkname</a>这种方式，另一种则是函数签名使用Go,然后通过该包中的汇编文件来实现它，这两种都广泛存在于Go源码中 （更多参见 <a href="https://blog.csdn.net/weixin_30815427/article/details/101099987" target="_blank" rel="noopener">为什么 Go 标准库中有些函数只有签名，没有函数体？</a><br>）<br><br><br><br>故而<code>func IndexString(a, b string) int</code> 实际执行了下面这段汇编代码<br><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TEXT ·IndexString(SB),NOSPLIT,$<span class="number">0</span><span class="number">-40</span></span><br><span class="line">MOVDa_base+<span class="number">0</span>(FP), R0</span><br><span class="line">MOVDa_len+<span class="number">8</span>(FP), R1</span><br><span class="line">MOVDb_base+<span class="number">16</span>(FP), R2</span><br><span class="line">MOVDb_len+<span class="number">24</span>(FP), R3</span><br><span class="line">MOVD$ret+<span class="number">32</span>(FP), R9</span><br><span class="line">Bindexbody&lt;&gt;(SB)</span><br></pre></td></tr></table></figure><br><br><a href="https://www.bookstack.cn/read/advanced-go-programming-book/ch3-asm-ch3-04-func.md" target="_blank" rel="noopener">Go语言高级编程（柴树杉，曹春晖）</a><br><br>NOSPLIT不会生成或包含栈分裂代码，这一般用于没有任何其它函数调用的叶子函数，这样可以适当提高性能<br><br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;2&quot; color=&quot;33ccff&quot;&gt;&lt;br&gt;&lt;br&gt;该篇内容去&lt;a href=&quot;https://github.com/talkgo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go夜读&lt;/a&gt;做了分享,配合&lt;a href=&quot;https:
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>16777619与FNV哈希算法</title>
    <link href="http://www.dashen.tech/2021/08/09/16777619%E4%B8%8EFNV%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
    <id>http://www.dashen.tech/2021/08/09/16777619与FNV哈希算法/</id>
    <published>2021-08-09T14:30:47.000Z</published>
    <updated>2021-09-21T12:17:43.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概况"><a href="#概况" class="headerlink" title="概况"></a>概况</h3><p><br></p><p>FNV哈希算法全名为<code>Fowler-Noll-Vo算法</code>，是以三位发明人 <code>Glenn Fowler</code>，<a href="https://www.agilealliance.org/author/8079582" target="_blank" rel="noopener">Landon Curt Noll</a>（这位在<a href="https://baike.baidu.com/item/%E6%A2%85%E6%A3%AE%E7%B4%A0%E6%95%B0/816141" target="_blank" rel="noopener">发现大素数</a>领域成绩卓著），<code>Phong Vo</code>的首字母命名。 最早在1991年提出 (实际比Rabin-Karp算法要晚) </p><p>FNV能快速hash大量数据并保持较小的冲突率，它的高度分散使它适用于hash一些非常相近的字符串，比如URL，hostname，文件名，text，IP地址等。 (来自 <a href="https://blog.csdn.net/hustfoxy/article/details/23687239" target="_blank" rel="noopener">FNV哈希算法</a>)</p><blockquote><p>这个算法的厉害之处在于其可以保存(上一次的)状态。比如对于字符串ab，它的哈希值是a<em>E+b=HashAB，如果计算bc的哈希值，可以利用第一次计算的结果(HashAB-a</em>E)*E+c=HashBC。该例是两个字符效果不明显，但如果当前串是100个字符，后移一位去哈希算法性能，就会比其他哈希方式(如md5)要快很多。(<a href="https://zhuanlan.zhihu.com/p/37390018" target="_blank" rel="noopener">常见的哈希算法和用途</a>)</p></blockquote><p>对于很多算法，和暴力解法相比，优化的重要途径之一，是把每次运算(如比较)产生的结果在下一次尽可能用上，发挥一点价值。。而不是纯粹每次从头开始再去算(和KMP算法如此，Rabin-Karp算法亦然)</p><p><br></p><p>FNV在<a href="https://cloud.tencent.com/developer/section/1142452" target="_blank" rel="noopener">Go源码</a>的<a href="https://gitee.com/cuishuang/go1.16/blob/master/src/hash/fnv/fnv.go" target="_blank" rel="noopener">src/hash/fnv/fnv.go</a>中，</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> (</span><br><span class="line">offset32        = <span class="number">2166136261</span></span><br><span class="line">offset64        = <span class="number">14695981039346656037</span></span><br><span class="line">offset128Lower  = <span class="number">0x62b821756295c58d</span></span><br><span class="line">offset128Higher = <span class="number">0x6c62272e07bb0142</span></span><br><span class="line">prime32         = <span class="number">16777619</span></span><br><span class="line">prime64         = <span class="number">1099511628211</span></span><br><span class="line">prime128Lower   = <span class="number">0x13b</span></span><br><span class="line">prime128Shift   = <span class="number">24</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>16777619 为32 bit FNV的Prime值。</p><p><br></p><p>在rust中也<a href="https://github.com/rust-lang/rust/search?q=fnv" target="_blank" rel="noopener">内置该算法</a>, 在Linux，OceanBase等项目中有较多使用,</p><p>在<a href="https://gitee.com/cuishuang/go1.16/blob/master/src/reflect/type.go#L1471" target="_blank" rel="noopener">Go reflect包</a>中也有使用</p><p><br></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><br></p><p>可将 字符串 哈希为32bit的数字；将字符串 哈希为任意bit的数字，将字符串 哈希为特定范围的数字</p><p>更多参考 <a href="https://www.cnblogs.com/charlieroro/p/8486941.html" target="_blank" rel="noopener">FNV算法实战</a></p><p><br></p><hr><p><br></p><p>更多阅读：</p><p><a href="https://www.cnblogs.com/baiyan/archive/2011/04/23/2025701.html" target="_blank" rel="noopener">FNV哈希算法【学习】</a></p><p><a href="https://github.com/golang/go/blob/master/src/internal/bytealg/bytealg.go" target="_blank" rel="noopener">go/src/internal/bytealg/bytealg.go</a></p><p><a href="https://studygolang.com/articles/1191" target="_blank" rel="noopener">字符串查找算法（二）</a></p><p><a href="https://studygolang.com/articles/3553" target="_blank" rel="noopener">Go语言源码中的Rabin-Karp算法</a></p><p><a href="https://github.com/search?p=4&amp;q=16777619&amp;type=Issues" target="_blank" rel="noopener">github-16777619</a></p><p><a href="https://zhuanlan.zhihu.com/p/53710382" target="_blank" rel="noopener">分布式技术探索——如何判断哈希的好坏</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概况&quot;&gt;&lt;a href=&quot;#概况&quot; class=&quot;headerlink&quot; title=&quot;概况&quot;&gt;&lt;/a&gt;概况&lt;/h3&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;FNV哈希算法全名为&lt;code&gt;Fowler-Noll-Vo算法&lt;/code&gt;，是以三位发明人 &lt;code&gt;Glen
      
    
    </summary>
    
    
      <category term="算法" scheme="http://www.dashen.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
