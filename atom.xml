<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清澄秋爽</title>
  
  <subtitle>苹果树下的思索者 书写是对思维的缓存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dashen.tech/"/>
  <updated>2021-06-10T13:07:41.263Z</updated>
  <id>http://www.dashen.tech/</id>
  
  <author>
    <name>fliter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Plan9汇编入门</title>
    <link href="http://www.dashen.tech/2022/01/10/Plan9%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"/>
    <id>http://www.dashen.tech/2022/01/10/Plan9汇编入门/</id>
    <published>2022-01-10T14:05:16.000Z</published>
    <updated>2021-06-10T13:07:41.263Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xargin.com/plan9-assembly/" target="_blank" rel="noopener">Go 系列文章3 ：plan9 汇编入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/29892487" target="_blank" rel="noopener">Go 语言的实现为何使用Plan 9的汇编器?</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E7%88%BE%E5%AF%A6%E9%A9%97%E5%AE%A4%E4%B9%9D%E8%99%9F%E8%A8%88%E7%95%AB" target="_blank" rel="noopener">贝尔实验室九号项目</a></p><p><a href="https://github.com/yangyuqian/technical-articles/blob/master/asm/golang-plan9-assembly-cn.md" target="_blank" rel="noopener">Golang中的Plan9汇编器</a></p><p><a href="https://www.zhihu.com/question/19706063/answer/22881507" target="_blank" rel="noopener">为什么 Plan9 在生产环境没有实际的应用，是因为应用程序匮乏的原因么？</a></p><p><a href="https://codereview.appspot.com/133740043/" target="_blank" rel="noopener">https://codereview.appspot.com/133740043/</a></p><p><a href="http://doc.cat-v.org/plan_9/4th_edition/papers/asm" target="_blank" rel="noopener">A Manual for the Plan 9 assembler</a></p><p><a href="https://mioto.me/2021/01/plan9-assembly/" target="_blank" rel="noopener">Plan9 汇编入门讲解</a></p><p><a href="https://blog.csdn.net/qq_42633819/article/details/106467502" target="_blank" rel="noopener">plan9汇编手册</a></p><p><a href="http://blog.studygolang.com/2013/05/asm_and_plan9_asm/" target="_blank" rel="noopener">汇编和PLAN9汇编</a></p><p><br></p><p><a href>src/internal/bytealg/index_amd64.s</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line">#include <span class="string">"go_asm.h"</span></span><br><span class="line">#include <span class="string">"textflag.h"</span></span><br><span class="line"></span><br><span class="line">TEXT ·Index(SB),NOSPLIT,$<span class="number">0</span><span class="number">-56</span></span><br><span class="line">MOVQ a_base+<span class="number">0</span>(FP), DI</span><br><span class="line">MOVQ a_len+<span class="number">8</span>(FP), DX</span><br><span class="line">MOVQ b_base+<span class="number">24</span>(FP), R8</span><br><span class="line">MOVQ b_len+<span class="number">32</span>(FP), AX</span><br><span class="line">MOVQ DI, R10</span><br><span class="line">LEAQ ret+<span class="number">48</span>(FP), R11</span><br><span class="line">JMP  indexbody&lt;&gt;(SB)</span><br><span class="line"></span><br><span class="line">TEXT ·IndexString(SB),NOSPLIT,$<span class="number">0</span><span class="number">-40</span></span><br><span class="line">MOVQ a_base+<span class="number">0</span>(FP), DI</span><br><span class="line">MOVQ a_len+<span class="number">8</span>(FP), DX</span><br><span class="line">MOVQ b_base+<span class="number">16</span>(FP), R8</span><br><span class="line">MOVQ b_len+<span class="number">24</span>(FP), AX</span><br><span class="line">MOVQ DI, R10</span><br><span class="line">LEAQ ret+<span class="number">32</span>(FP), R11</span><br><span class="line">JMP  indexbody&lt;&gt;(SB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AX: length of string, that we are searching for</span></span><br><span class="line"><span class="comment">// DX: length of string, in which we are searching</span></span><br><span class="line"><span class="comment">// DI: pointer to string, in which we are searching</span></span><br><span class="line"><span class="comment">// R8: pointer to string, that we are searching for</span></span><br><span class="line"><span class="comment">// R11: address, where to put return value</span></span><br><span class="line"><span class="comment">// Note: We want len in DX and AX, because PCMPESTRI implicitly consumes them</span></span><br><span class="line">TEXT indexbody&lt;&gt;(SB),NOSPLIT,$<span class="number">0</span></span><br><span class="line">CMPQ AX, DX</span><br><span class="line">JA fail</span><br><span class="line">CMPQ DX, $<span class="number">16</span></span><br><span class="line">JAE sse42</span><br><span class="line">no_sse42:</span><br><span class="line">CMPQ AX, $<span class="number">2</span></span><br><span class="line">JA   _3_or_more</span><br><span class="line">MOVW (R8), R8</span><br><span class="line">LEAQ <span class="number">-1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop2:</span><br><span class="line">MOVW (DI), SI</span><br><span class="line">CMPW SI,R8</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop2</span><br><span class="line">JMP fail</span><br><span class="line">_3_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">3</span></span><br><span class="line">JA   _4_or_more</span><br><span class="line">MOVW <span class="number">1</span>(R8), BX</span><br><span class="line">MOVW (R8), R8</span><br><span class="line">LEAQ <span class="number">-2</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop3:</span><br><span class="line">MOVW (DI), SI</span><br><span class="line">CMPW SI,R8</span><br><span class="line">JZ   partial_success3</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop3</span><br><span class="line">JMP fail</span><br><span class="line">partial_success3:</span><br><span class="line">MOVW <span class="number">1</span>(DI), SI</span><br><span class="line">CMPW SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop3</span><br><span class="line">JMP fail</span><br><span class="line">_4_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">4</span></span><br><span class="line">JA   _5_or_more</span><br><span class="line">MOVL (R8), R8</span><br><span class="line">LEAQ <span class="number">-3</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop4:</span><br><span class="line">MOVL (DI), SI</span><br><span class="line">CMPL SI,R8</span><br><span class="line">JZ   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop4</span><br><span class="line">JMP fail</span><br><span class="line">_5_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">7</span></span><br><span class="line">JA   _8_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVL <span class="number">-4</span>(R8)(AX*<span class="number">1</span>), BX</span><br><span class="line">MOVL (R8), R8</span><br><span class="line">loop5to7:</span><br><span class="line">MOVL (DI), SI</span><br><span class="line">CMPL SI,R8</span><br><span class="line">JZ   partial_success5to7</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop5to7</span><br><span class="line">JMP fail</span><br><span class="line">partial_success5to7:</span><br><span class="line">MOVL <span class="number">-4</span>(AX)(DI*<span class="number">1</span>), SI</span><br><span class="line">CMPL SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop5to7</span><br><span class="line">JMP fail</span><br><span class="line">_8_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">8</span></span><br><span class="line">JA   _9_or_more</span><br><span class="line">MOVQ (R8), R8</span><br><span class="line">LEAQ <span class="number">-7</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop8:</span><br><span class="line">MOVQ (DI), SI</span><br><span class="line">CMPQ SI,R8</span><br><span class="line">JZ   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop8</span><br><span class="line">JMP fail</span><br><span class="line">_9_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">15</span></span><br><span class="line">JA   _16_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVQ <span class="number">-8</span>(R8)(AX*<span class="number">1</span>), BX</span><br><span class="line">MOVQ (R8), R8</span><br><span class="line">loop9to15:</span><br><span class="line">MOVQ (DI), SI</span><br><span class="line">CMPQ SI,R8</span><br><span class="line">JZ   partial_success9to15</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop9to15</span><br><span class="line">JMP fail</span><br><span class="line">partial_success9to15:</span><br><span class="line">MOVQ <span class="number">-8</span>(AX)(DI*<span class="number">1</span>), SI</span><br><span class="line">CMPQ SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop9to15</span><br><span class="line">JMP fail</span><br><span class="line">_16_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">16</span></span><br><span class="line">JA   _17_or_more</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">LEAQ <span class="number">-15</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop16:</span><br><span class="line">MOVOU (DI), X2</span><br><span class="line">PCMPEQB X1, X2</span><br><span class="line">PMOVMSKB X2, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop16</span><br><span class="line">JMP fail</span><br><span class="line">_17_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">31</span></span><br><span class="line">JA   _32_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVOU <span class="number">-16</span>(R8)(AX*<span class="number">1</span>), X0</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">loop17to31:</span><br><span class="line">MOVOU (DI), X2</span><br><span class="line">PCMPEQB X1,X2</span><br><span class="line">PMOVMSKB X2, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE   partial_success17to31</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop17to31</span><br><span class="line">JMP fail</span><br><span class="line">partial_success17to31:</span><br><span class="line">MOVOU <span class="number">-16</span>(AX)(DI*<span class="number">1</span>), X3</span><br><span class="line">PCMPEQB X0, X3</span><br><span class="line">PMOVMSKB X3, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop17to31</span><br><span class="line">JMP fail</span><br><span class="line"><span class="comment">// We can get here only when AVX2 is enabled and cutoff for indexShortStr is set to 63</span></span><br><span class="line"><span class="comment">// So no need to check cpuid</span></span><br><span class="line">_32_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">32</span></span><br><span class="line">JA   _33_to_63</span><br><span class="line">VMOVDQU (R8), Y1</span><br><span class="line">LEAQ <span class="number">-31</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop32:</span><br><span class="line">VMOVDQU (DI), Y2</span><br><span class="line">VPCMPEQB Y1, Y2, Y3</span><br><span class="line">VPMOVMSKB Y3, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE   success_avx2</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop32</span><br><span class="line">JMP fail_avx2</span><br><span class="line">_33_to_63:</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">VMOVDQU <span class="number">-32</span>(R8)(AX*<span class="number">1</span>), Y0</span><br><span class="line">VMOVDQU (R8), Y1</span><br><span class="line">loop33to63:</span><br><span class="line">VMOVDQU (DI), Y2</span><br><span class="line">VPCMPEQB Y1, Y2, Y3</span><br><span class="line">VPMOVMSKB Y3, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE   partial_success33to63</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop33to63</span><br><span class="line">JMP fail_avx2</span><br><span class="line">partial_success33to63:</span><br><span class="line">VMOVDQU <span class="number">-32</span>(AX)(DI*<span class="number">1</span>), Y3</span><br><span class="line">VPCMPEQB Y0, Y3, Y4</span><br><span class="line">VPMOVMSKB Y4, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE success_avx2</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop33to63</span><br><span class="line">fail_avx2:</span><br><span class="line">VZEROUPPER</span><br><span class="line">fail:</span><br><span class="line">MOVQ $<span class="number">-1</span>, (R11)</span><br><span class="line">RET</span><br><span class="line">success_avx2:</span><br><span class="line">VZEROUPPER</span><br><span class="line">JMP success</span><br><span class="line">sse42:</span><br><span class="line">CMPB internal∕cpu·X86+const_offsetX86HasSSE42(SB), $<span class="number">1</span></span><br><span class="line">JNE no_sse42</span><br><span class="line">CMPQ AX, $<span class="number">12</span></span><br><span class="line"><span class="comment">// PCMPESTRI is slower than normal compare,</span></span><br><span class="line"><span class="comment">// so using it makes sense only if we advance 4+ bytes per compare</span></span><br><span class="line"><span class="comment">// This value was determined experimentally and is the ~same</span></span><br><span class="line"><span class="comment">// on Nehalem (first with SSE42) and Haswell.</span></span><br><span class="line">JAE _9_or_more</span><br><span class="line">LEAQ <span class="number">16</span>(R8), SI</span><br><span class="line">TESTW $<span class="number">0xff0</span>, SI</span><br><span class="line">JEQ no_sse42</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">LEAQ <span class="number">-15</span>(DI)(DX*<span class="number">1</span>), SI</span><br><span class="line">MOVQ $<span class="number">16</span>, R9</span><br><span class="line">SUBQ AX, R9 <span class="comment">// We advance by 16-len(sep) each iteration, so precalculate it into R9</span></span><br><span class="line">loop_sse42:</span><br><span class="line"><span class="comment">// 0x0c means: unsigned byte compare (bits 0,1 are 00)</span></span><br><span class="line"><span class="comment">// for equality (bits 2,3 are 11)</span></span><br><span class="line"><span class="comment">// result is not masked or inverted (bits 4,5 are 00)</span></span><br><span class="line"><span class="comment">// and corresponds to first matching byte (bit 6 is 0)</span></span><br><span class="line">PCMPESTRI $<span class="number">0x0c</span>, (DI), X1</span><br><span class="line"><span class="comment">// CX == 16 means no match,</span></span><br><span class="line"><span class="comment">// CX &gt; R9 means partial match at the end of the string,</span></span><br><span class="line"><span class="comment">// otherwise sep is at offset CX from X1 start</span></span><br><span class="line">CMPQ CX, R9</span><br><span class="line">JBE sse42_success</span><br><span class="line">ADDQ R9, DI</span><br><span class="line">CMPQ DI, SI</span><br><span class="line">JB loop_sse42</span><br><span class="line">PCMPESTRI $<span class="number">0x0c</span>, <span class="number">-1</span>(SI), X1</span><br><span class="line">CMPQ CX, R9</span><br><span class="line">JA fail</span><br><span class="line">LEAQ <span class="number">-1</span>(SI), DI</span><br><span class="line">sse42_success:</span><br><span class="line">ADDQ CX, DI</span><br><span class="line">success:</span><br><span class="line">SUBQ R10, DI</span><br><span class="line">MOVQ DI, (R11)</span><br><span class="line">RET</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xargin.com/plan9-assembly/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go 系列文章3 ：plan9 汇编入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhi
      
    
    </summary>
    
    
      <category term="Compiler" scheme="http://www.dashen.tech/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(6)</title>
    <link href="http://www.dashen.tech/2021/07/19/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-6/"/>
    <id>http://www.dashen.tech/2021/07/19/Rust-vs-Go-常用语法对比-6/</id>
    <published>2021-07-19T13:31:07.000Z</published>
    <updated>2021-07-14T15:21:21.521Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="101-Swap-values"><a href="#101-Swap-values" class="headerlink" title="101. Swap values"></a>101. <font color="0c0a3e">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="102-Swap-values"><a href="#102-Swap-values" class="headerlink" title="102. Swap values"></a>102. <font color="7b1e7a">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="103-Swap-values"><a href="#103-Swap-values" class="headerlink" title="103. Swap values"></a>103. <font color="b33f62">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="104-Swap-values"><a href="#104-Swap-values" class="headerlink" title="104. Swap values"></a>104. <font color="f9564f">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="105-Swap-values"><a href="#105-Swap-values" class="headerlink" title="105. Swap values"></a>105. <font color="f3c677">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="106-Swap-values"><a href="#106-Swap-values" class="headerlink" title="106. Swap values"></a>106. <font color="7bdff2">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="107-Swap-values"><a href="#107-Swap-values" class="headerlink" title="107. Swap values"></a>107. <font color="b2f7ef">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="108-Swap-values"><a href="#108-Swap-values" class="headerlink" title="108. Swap values"></a>108. <font color="eff7f6">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="109-Swap-values"><a href="#109-Swap-values" class="headerlink" title="109. Swap values"></a>109. <font color="f7d6e0">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="110-Swap-values"><a href="#110-Swap-values" class="headerlink" title="110. Swap values"></a>110. <font color="f2b5d4">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="111-Swap-values"><a href="#111-Swap-values" class="headerlink" title="111. Swap values"></a>111. <font color="247ba0">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="112-Swap-values"><a href="#112-Swap-values" class="headerlink" title="112. Swap values"></a>112. <font color="70c1b3">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="113-Swap-values"><a href="#113-Swap-values" class="headerlink" title="113. Swap values"></a>113. <font color="b2dbbf">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="114-Swap-values"><a href="#114-Swap-values" class="headerlink" title="114. Swap values"></a>114. <font color="f3ffbd">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="115-Swap-values"><a href="#115-Swap-values" class="headerlink" title="115. Swap values"></a>115. <font color="ff1654">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="116-Swap-values"><a href="#116-Swap-values" class="headerlink" title="116. Swap values"></a>116. <font color="565264">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="117-Swap-values"><a href="#117-Swap-values" class="headerlink" title="117. Swap values"></a>117. <font color="706677">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="118-Swap-values"><a href="#118-Swap-values" class="headerlink" title="118. Swap values"></a>118. <font color="a6808c">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="119-Swap-values"><a href="#119-Swap-values" class="headerlink" title="119. Swap values"></a>119. <font color="ccb7ae">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="120-Swap-values"><a href="#120-Swap-values" class="headerlink" title="120. Swap values"></a>120. <font color="d6cfcb">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;101-Swap-values&quot;&gt;&lt;a href=&quot;#101-Swap-values&quot; class=&quot;headerlink&quot; title=&quot;101. Swap values&quot;&gt;&lt;/a&gt;101. &lt;font color=&quot;0c0a3e&quot;&gt;Sw
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(5)</title>
    <link href="http://www.dashen.tech/2021/07/17/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-5/"/>
    <id>http://www.dashen.tech/2021/07/17/Rust-vs-Go-常用语法对比-5/</id>
    <published>2021-07-17T15:51:58.000Z</published>
    <updated>2021-07-15T04:41:19.876Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="81-Swap-values"><a href="#81-Swap-values" class="headerlink" title="81. Swap values"></a>81. <font color="fb6107">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="82-Swap-values"><a href="#82-Swap-values" class="headerlink" title="82. Swap values"></a>82. <font color="f3de2c">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="83-Swap-values"><a href="#83-Swap-values" class="headerlink" title="83. Swap values"></a>83. <font color="7cb518">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="84-Swap-values"><a href="#84-Swap-values" class="headerlink" title="84. Swap values"></a>84. <font color="5c8001">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="85-Swap-values"><a href="#85-Swap-values" class="headerlink" title="85. Swap values"></a>85. <font color="fbb02d">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="86-Swap-values"><a href="#86-Swap-values" class="headerlink" title="86. Swap values"></a>86. <font color="bfbdc1">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="87-Swap-values"><a href="#87-Swap-values" class="headerlink" title="87. Swap values"></a>87. <font color="37323e">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="88-Swap-values"><a href="#88-Swap-values" class="headerlink" title="88. Swap values"></a>88. <font color="deb841">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="89-Swap-values"><a href="#89-Swap-values" class="headerlink" title="89. Swap values"></a>89. <font color="580aff">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="90-Swap-values"><a href="#90-Swap-values" class="headerlink" title="90. Swap values"></a>90. <font color="de9e36">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="91-Swap-values"><a href="#91-Swap-values" class="headerlink" title="91. Swap values"></a>91. <font color="031d44">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="92-Swap-values"><a href="#92-Swap-values" class="headerlink" title="92. Swap values"></a>92. <font color="04395e">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="93-Swap-values"><a href="#93-Swap-values" class="headerlink" title="93. Swap values"></a>93. <font color="70a288">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="94-Swap-values"><a href="#94-Swap-values" class="headerlink" title="94. Swap values"></a>94. <font color="dab785">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="95-Swap-values"><a href="#95-Swap-values" class="headerlink" title="95. Swap values"></a>95. <font color="d5896f">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="96-Swap-values"><a href="#96-Swap-values" class="headerlink" title="96. Swap values"></a>96. <font color="e8d6cb">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="97-Swap-values"><a href="#97-Swap-values" class="headerlink" title="97. Swap values"></a>97. <font color="d0ada7">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="98-Swap-values"><a href="#98-Swap-values" class="headerlink" title="98. Swap values"></a>98. <font color="ad6a6c">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="99-Swap-values"><a href="#99-Swap-values" class="headerlink" title="99. Swap values"></a>99. <font color="5d2e46">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h3 id="100-Swap-values"><a href="#100-Swap-values" class="headerlink" title="100. Swap values"></a>100. <font color="b58db6">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;81-Swap-values&quot;&gt;&lt;a href=&quot;#81-Swap-values&quot; class=&quot;headerlink&quot; title=&quot;81. Swap values&quot;&gt;&lt;/a&gt;81. &lt;font color=&quot;fb6107&quot;&gt;Swap v
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(4)</title>
    <link href="http://www.dashen.tech/2021/07/15/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-4/"/>
    <id>http://www.dashen.tech/2021/07/15/Rust-vs-Go-常用语法对比-4/</id>
    <published>2021-07-15T13:40:04.000Z</published>
    <updated>2021-07-15T04:41:01.278Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="61-Get-current-date"><a href="#61-Get-current-date" class="headerlink" title="61. Get current date"></a>61. <font color="ff0000">Get current date</font></h3><p><em>获取当前时间</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := time.Now()</span><br><span class="line">fmt.Println(<span class="string">"Now is"</span>, d)</span><br><span class="line"><span class="comment">// The Playground has a special sandbox, so you may get a Time value fixed in the past.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Now is 2009-11-10 23:00:00 +0000 UTC m=+0.000000001</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> time;</span><br><span class="line"><span class="keyword">let</span> d = time::now();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::SystemTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = SystemTime::now();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SystemTime { tv_sec: 1526318418, tv_nsec: 699329521 }</code></p><p><br></p><h3 id="62-Find-substring-position"><a href="#62-Find-substring-position" class="headerlink" title="62. Find substring position"></a>62. <font color="ff8700">Find substring position</font></h3><p><em>字符串查找</em></p><p>查找子字符串位置</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="string">"été chaud"</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">y := <span class="string">"chaud"</span></span><br><span class="line">i := strings.Index(x, y)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">y := <span class="string">"froid"</span></span><br><span class="line">i := strings.Index(x, y)</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>i is the byte index of y in x, not the character (rune) index.<br>i will be -1 if y is not found in x.</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"été chaud"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"chaud"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = x.find(y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"froid"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = x.find(y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Some</span>(<span class="number">6</span>)</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="63-Replace-fragment-of-a-string"><a href="#63-Replace-fragment-of-a-string" class="headerlink" title="63. Replace fragment of a string"></a>63. <font color="ffd300">Replace fragment of a string</font></h3><p><em>替换字符串片段</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="string">"oink oink oink"</span></span><br><span class="line">y := <span class="string">"oink"</span></span><br><span class="line">z := <span class="string">"moo"</span></span><br><span class="line">x2 := strings.Replace(x, y, z, <span class="number">-1</span>)</span><br><span class="line">fmt.Println(x2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>moo moo moo</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"lorem ipsum dolor lorem ipsum"</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"lorem"</span>;</span><br><span class="line">    <span class="keyword">let</span> z = <span class="string">"LOREM"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x2 = x.replace(&amp;y, &amp;z);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>LOREM ipsum dolor LOREM ipsum</code></p><p><br></p><h3 id="64-Big-integer-value-3-power-247"><a href="#64-Big-integer-value-3-power-247" class="headerlink" title="64. Big integer : value 3 power 247"></a>64. <font color="deff0a">Big integer : value 3 power 247</font></h3><p><em>超大整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="built_in">new</span>(big.Int)</span><br><span class="line">x.Exp(big.NewInt(<span class="number">3</span>), big.NewInt(<span class="number">247</span>), <span class="literal">nil</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>7062361041362837614435796717454722507454089864783271756927542774477268334591598635421519542453366332460075473278915787</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"><span class="keyword">use</span> num::bigint::ToBigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>.to_bigint().unwrap();</span><br><span class="line">    <span class="keyword">let</span> x = num::pow(a, <span class="number">247</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>7062361041362837614435796717454722507454089864783271756927542774477268334591598635421519542453366332460075473278915787</code></p><p><br></p><h3 id="65-Format-decimal-number"><a href="#65-Format-decimal-number" class="headerlink" title="65. Format decimal number"></a>65. <font color="a1ff0a">Format decimal number</font></h3><p><em>格式化十进制数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">0.15625</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%.1f%%"</span>, <span class="number">100.0</span>*x)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>15.6%</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0.15625f64</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:.1&#125;%"</span>, <span class="number">100.0</span> * x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>15.6%</code></p><p><br></p><h3 id="66-Big-integer-exponentiation"><a href="#66-Big-integer-exponentiation" class="headerlink" title="66. Big integer exponentiation"></a>66. <font color="0aff99">Big integer exponentiation</font></h3><p><em>大整数幂运算</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exp</span><span class="params">(x *big.Int, n <span class="keyword">int</span>)</span> *<span class="title">big</span>.<span class="title">Int</span></span> &#123;</span><br><span class="line">nb := big.NewInt(<span class="keyword">int64</span>(n))</span><br><span class="line"><span class="keyword">var</span> z big.Int</span><br><span class="line">z.Exp(x, nb, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span> &amp;z</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">3</span>)</span><br><span class="line">n := <span class="number">5</span></span><br><span class="line">z := exp(x, n)</span><br><span class="line">fmt.Println(z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>243</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = BigInt::parse_bytes(<span class="string">b"600000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">42</span>%</span><br></pre></td></tr></table></figure><p><br></p><h3 id="67-Binomial-coefficient-“n-choose-k”"><a href="#67-Binomial-coefficient-“n-choose-k”" class="headerlink" title="67. Binomial coefficient “n choose k”"></a>67. <font color="0aefff">Binomial coefficient “n choose k”</font></h3><blockquote><p>Calculate binom(n, k) = n! / (k! * (n-k)!). Use an integer type able to handle huge numbers.</p></blockquote><p><em>二项式系数“n选择k”</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">z := <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line">z.Binomial(<span class="number">4</span>, <span class="number">2</span>)</span><br><span class="line">fmt.Println(z)</span><br><span class="line"></span><br><span class="line">z.Binomial(<span class="number">133</span>, <span class="number">71</span>)</span><br><span class="line">fmt.Println(z)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">555687036928510235891585199545206017600</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num::bigint::ToBigInt;</span><br><span class="line"><span class="keyword">use</span> num::traits::One;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">binom</span></span>(n: <span class="built_in">u64</span>, k: <span class="built_in">u64</span>) -&gt; BigInt &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> res = BigInt::one();</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..k &#123;</span><br><span class="line">        res = (res * (n - i).to_bigint().unwrap()) /</span><br><span class="line">              (i + <span class="number">1</span>).to_bigint().unwrap();</span><br><span class="line">    &#125;</span><br><span class="line">    res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">133</span>;</span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">71</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, binom(n, k));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>555687036928510235891585199545206017600</code></p><p><br></p><h3 id="68-Create-a-bitset"><a href="#68-Create-a-bitset" class="headerlink" title="68. Create a bitset"></a>68. <font color="147df5">Create a bitset</font></h3><p><em>创建位集合</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x *big.Int = <span class="built_in">new</span>(big.Int)</span><br><span class="line"></span><br><span class="line">x.SetBit(x, <span class="number">42</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x.Bit(y))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="number">0</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="number">1</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n)</span><br><span class="line"></span><br><span class="line">x[<span class="number">42</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x[y])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="literal">false</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> n = <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">x := NewBitset(n)</span><br><span class="line"></span><br><span class="line">x.SetBit(<span class="number">13</span>)</span><br><span class="line">x.SetBit(<span class="number">42</span>)</span><br><span class="line">x.ClearBit(<span class="number">13</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;<span class="number">13</span>, <span class="number">42</span>&#125; &#123;</span><br><span class="line">fmt.Println(<span class="string">"x has bit"</span>, y, <span class="string">"set to"</span>, x.GetBit(y))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Bitset []<span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewBitset</span><span class="params">(n <span class="keyword">int</span>)</span> <span class="title">Bitset</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make</span>(Bitset, (n+<span class="number">63</span>)/<span class="number">64</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">GetBit</span><span class="params">(index <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line"><span class="keyword">return</span> (b[pos] &amp; (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)) != <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">SetBit</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line">b[pos] |= (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b Bitset)</span> <span class="title">ClearBit</span><span class="params">(index <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">pos := index / <span class="number">64</span></span><br><span class="line">j := index % <span class="number">64</span></span><br><span class="line">b[pos] ^= (<span class="keyword">uint64</span>(<span class="number">1</span>) &lt;&lt; j)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x has bit <span class="number">13</span> set to <span class="literal">false</span></span><br><span class="line">x has bit <span class="number">42</span> set to <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="literal">false</span>; n];</span><br><span class="line"></span><br><span class="line">    x[<span class="number">3</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false]</code></p><p><br></p><h3 id="69-Seed-random-generator"><a href="#69-Seed-random-generator" class="headerlink" title="69. Seed random generator"></a>69. <font color="580aff">Seed random generator</font></h3><blockquote><p>Use seed s to initialize a random generator.</p></blockquote><blockquote><p>If s is constant, the generator output will be the same each time the program runs. If s is based on the current value of the system clock, the generator output will be different each time.</p></blockquote><p><em>随机种子生成器</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">int64</span> = <span class="number">42</span></span><br><span class="line">rand.Seed(s)</span><br><span class="line">fmt.Println(rand.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3440579354231278675</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">int64</span> = <span class="number">42</span></span><br><span class="line">r := rand.New(rand.NewSource(s))</span><br><span class="line">fmt.Println(r.Int())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3440579354231278675</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;Rng, SeedableRng, rngs::StdRng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::seed_from_u64(s);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rng.gen::&lt;<span class="built_in">f32</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0.35038823</code></p><p><br></p><h3 id="70-Use-clock-as-random-generator-seed"><a href="#70-Use-clock-as-random-generator-seed" class="headerlink" title="70. Use clock as random generator seed"></a>70. <font color="be0aff">Use clock as random generator seed</font></h3><blockquote><p>Get the current datetime and provide it as a seed to a random generator. The generator sequence will be different at each run.</p></blockquote><p><em>使用时钟作为随机生成器的种子</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">rand.Seed(time.Now().UnixNano())</span><br><span class="line"><span class="comment">// Well, the playground date is actually fixed in the past, and the</span></span><br><span class="line"><span class="comment">// output is cached.</span></span><br><span class="line"><span class="comment">// But if you run this on your workstation, the output will vary.</span></span><br><span class="line">fmt.Println(rand.Intn(<span class="number">999</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>524</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := rand.New(rand.NewSource(time.Now().UnixNano()))</span><br><span class="line"><span class="comment">// Well, the playground date is actually fixed in the past, and the</span></span><br><span class="line"><span class="comment">// output is cached.</span></span><br><span class="line"><span class="comment">// But if you run this on your workstation, the output will vary.</span></span><br><span class="line">fmt.Println(r.Intn(<span class="number">999</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>524</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;Rng, SeedableRng, rngs::StdRng&#125;;</span><br><span class="line"><span class="keyword">use</span> std::time::SystemTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = SystemTime::now()</span><br><span class="line">        .duration_since(SystemTime::UNIX_EPOCH)</span><br><span class="line">        .expect(<span class="string">"Duration since UNIX_EPOCH failed"</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::seed_from_u64(d.as_secs());</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, rng.gen::&lt;<span class="built_in">f32</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>0.7326781</code></p><p><br></p><h3 id="71-Echo-program-implementation"><a href="#71-Echo-program-implementation" class="headerlink" title="71. Echo program implementation"></a>71. <font color="072ac8">Echo program implementation</font></h3><blockquote><p>Basic implementation of the Echo program: Print all arguments except the program name, separated by space, followed by newline.<br>The idiom demonstrates how to skip the first argument if necessary, concatenate arguments as strings, append newline and print it to stdout.</p></blockquote><p><em>实现 Echo 程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(strings.Join(os.Args[<span class="number">1</span>:], <span class="string">" "</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, env::args().skip(<span class="number">1</span>).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;().join(<span class="string">" "</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, std::env::args().skip(<span class="number">1</span>).format(<span class="string">" "</span>));</span><br></pre></td></tr></table></figure><p><br></p><h3 id="74-Compute-GCD"><a href="#74-Compute-GCD" class="headerlink" title="74. Compute GCD"></a>74. <font color="60b6fb">Compute GCD</font></h3><blockquote><pre><code>Compute the greatest common divisor x of big integers a and b. Use an integer type able to handle huge numbers.</code></pre></blockquote><p><em>计算大整数a和b的最大公约数x。使用能够处理大数的整数类型。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b, x := <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int)</span><br><span class="line">a.SetString(<span class="string">"6000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">b.SetString(<span class="string">"9000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">x.GCD(<span class="literal">nil</span>, <span class="literal">nil</span>, a, b)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3000000000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::Integer;</span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = BigInt::parse_bytes(<span class="string">b"6000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> b = BigInt::parse_bytes(<span class="string">b"9000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> x = a.gcd(&amp;b);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3000000000000</code></p><p><br></p><h3 id="75-Compute-LCM"><a href="#75-Compute-LCM" class="headerlink" title="75. Compute LCM"></a>75. <font color="a2d6f9">Compute LCM</font></h3><p><em>计算大整数a和b的最小公倍数x。使用能够处理大数的整数类型。</em></p><blockquote><p>   Compute the least common multiple x of big integers a and b. Use an integer type able to handle huge numbers.</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b, gcd, x := <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int)</span><br><span class="line">a.SetString(<span class="string">"6000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">b.SetString(<span class="string">"9000000000000"</span>, <span class="number">10</span>)</span><br><span class="line">gcd.GCD(<span class="literal">nil</span>, <span class="literal">nil</span>, a, b)</span><br><span class="line">x.Div(a, gcd).Mul(x, b)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>18000000000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> num::bigint::BigInt;</span><br><span class="line"><span class="keyword">use</span> num::Integer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = BigInt::parse_bytes(<span class="string">b"6000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> b = BigInt::parse_bytes(<span class="string">b"9000000000000"</span>, <span class="number">10</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> x = a.lcm(&amp;b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x = &#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>x = 18000000000000</code></p><p><br></p><h3 id="76-Binary-digits-from-an-integer"><a href="#76-Binary-digits-from-an-integer" class="headerlink" title="76. Binary digits from an integer"></a>76. <font color="cfe57d">Binary digits from an integer</font></h3><blockquote><p>Create the string s of integer x written in base 2. <br> E.g. 13 -&gt; “1101”</p></blockquote><p><em>将十进制整数转换为二进制数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">int64</span>(<span class="number">13</span>)</span><br><span class="line">s := strconv.FormatInt(x, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">13</span>)</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%b"</span>, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:b&#125;"</span>, x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1101</code></p><p><br></p><h3 id="77-SComplex-number"><a href="#77-SComplex-number" class="headerlink" title="77. SComplex number"></a>77. <font color="fcf300">SComplex number</font></h3><blockquote><p>Declare a complex x and initialize it with value (3i - 2). Then multiply it by i.</p></blockquote><p><em>复数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">3i</span> - <span class="number">2</span></span><br><span class="line">x *= <span class="number">1i</span></span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Print(reflect.TypeOf(x))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">-3</span><span class="number">-2i</span>)</span><br><span class="line"><span class="keyword">complex128</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> num;</span><br><span class="line"><span class="keyword">use</span> num::Complex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = Complex::new(-<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    x *= Complex::i();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-3-2i</code></p><p><br></p><h3 id="78-“do-while”-loop"><a href="#78-“do-while”-loop" class="headerlink" title="78. “do while” loop"></a>78. <font color="ffc600">“do while” loop</font></h3><blockquote><pre><code>Execute a block once, then execute it again as long as boolean condition c is true.</code></pre></blockquote><p><em>循环执行</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">x := rollDice()</span><br><span class="line">fmt.Println(<span class="string">"Got"</span>, x)</span><br><span class="line"><span class="keyword">if</span> x == <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollDice</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + rand.Intn(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Go has no do while loop, use the for loop, instead.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">4</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">1</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">3</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> done := <span class="literal">false</span>; !done; &#123;</span><br><span class="line">x := rollDice()</span><br><span class="line">fmt.Println(<span class="string">"Got"</span>, x)</span><br><span class="line">done = x == <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rollDice</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + rand.Intn(<span class="number">6</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">4</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">6</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">1</span></span><br><span class="line">Got <span class="number">2</span></span><br><span class="line">Got <span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">    doStuff();</span><br><span class="line">    <span class="keyword">if</span> !c &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Rust has no do-while loop with syntax sugar. Use loop and break.</strong></p><p><br></p><h3 id="79-Convert-integer-to-floating-point-number"><a href="#79-Convert-integer-to-floating-point-number" class="headerlink" title="79. Convert integer to floating point number"></a>79. <font color="fedd00">Convert integer to floating point number</font></h3><blockquote><pre><code>Declare floating point number y and initialize it with the value of integer x .</code></pre></blockquote><p><em>整型转浮点型</em></p><p><em>声明浮点数y并用整数x的值初始化它。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">5</span></span><br><span class="line">y := <span class="keyword">float64</span>(x)</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">fmt.Printf(<span class="string">"%.2f\n"</span>, y)</span><br><span class="line">fmt.Println(reflect.TypeOf(y))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5.00</span></span><br><span class="line"><span class="keyword">float64</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> f = i <span class="keyword">as</span> <span class="built_in">f64</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"int &#123;:?&#125;, float &#123;:?&#125;"</span>, i, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int <span class="number">5</span>, float <span class="number">5.0</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="80-Truncate-floating-point-number-to-integer"><a href="#80-Truncate-floating-point-number-to-integer" class="headerlink" title="80.  Truncate floating point number to integer"></a>80. <font color="ffcb17"> Truncate floating point number to integer</font></h3><blockquote><p>Declare integer y and initialize it with the value of floating point number x . Ignore non-integer digits of x .<br>Make sure to truncate towards zero: a negative x must yield the closest greater integer (not lesser).</p></blockquote><p><em>浮点型转整型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">-6.4</span></span><br><span class="line">b := <span class="number">6.4</span></span><br><span class="line">c := <span class="number">6.6</span></span><br><span class="line">fmt.Println(<span class="keyword">int</span>(a))</span><br><span class="line">fmt.Println(<span class="keyword">int</span>(b))</span><br><span class="line">fmt.Println(<span class="keyword">int</span>(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">41.59999999f64</span>;</span><br><span class="line">    <span class="keyword">let</span> y = x <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>41</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;61-Get-current-date&quot;&gt;&lt;a href=&quot;#61-Get-current-date&quot; class=&quot;headerlink&quot; title=&quot;61. Get current date&quot;&gt;&lt;/a&gt;61. &lt;font color=
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>缓存世界中的三大问题</title>
    <link href="http://www.dashen.tech/2021/07/14/%E7%BC%93%E5%AD%98%E4%B8%96%E7%95%8C%E4%B8%AD%E7%9A%84%E4%B8%89%E5%A4%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://www.dashen.tech/2021/07/14/缓存世界中的三大问题/</id>
    <published>2021-07-14T14:19:12.000Z</published>
    <updated>2021-07-14T14:19:12.361Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(3)</title>
    <link href="http://www.dashen.tech/2021/07/14/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-3/"/>
    <id>http://www.dashen.tech/2021/07/14/Rust-vs-Go-常用语法对比-3/</id>
    <published>2021-07-14T12:51:13.000Z</published>
    <updated>2021-07-14T15:11:02.919Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="41-Reverse-a-string"><a href="#41-Reverse-a-string" class="headerlink" title="41. Reverse a string"></a>41. <font color="54478c">Reverse a string</font></h3><p><em>反转字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reverse</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">runes := []<span class="keyword">rune</span>(s)</span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(runes)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">runes[i], runes[j] = runes[j], runes[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(runes)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">input := <span class="string">"The quick brown 狐 jumped over the lazy 犬"</span></span><br><span class="line">fmt.Println(Reverse(input))</span><br><span class="line"><span class="comment">// Original string unaltered</span></span><br><span class="line">fmt.Println(input)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">犬 yzal eht revo depmuj 狐 nworb kciuq ehT</span><br><span class="line">The quick brown 狐 jumped over the lazy 犬</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = s.chars().rev().collect::&lt;<span class="built_in">String</span>&gt;();</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"lorém ipsüm dolör sit amor ❤ "</span>;</span><br><span class="line">    <span class="keyword">let</span> t: <span class="built_in">String</span> = s.chars().rev().collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>❤ roma tis rölod müspi mérol</code></p><p><br></p><h3 id="42-Continue-outer-loop"><a href="#42-Continue-outer-loop" class="headerlink" title="42. Continue outer loop"></a>42. <font color="2c699a">Continue outer loop</font></h3><blockquote><p>Print each item v of list a which in not contained in list b.<br>For this, write an outer loop to iterate on a and an inner loop to iterate on b.</p></blockquote><p><em>打印列表a中不包含在列表b中的每个项目v。<br>为此，编写一个外部循环来迭代a，编写一个内部循环来迭代b。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printSubtraction</span><span class="params">(a []<span class="keyword">int</span>, b []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">mainloop:</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">for</span> _, w := <span class="keyword">range</span> b &#123;</span><br><span class="line"><span class="keyword">if</span> v == w &#123;</span><br><span class="line"><span class="keyword">continue</span> mainloop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := []<span class="keyword">int</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>&#125;</span><br><span class="line">printSubtraction(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mainloop is a label used to refer to the outer loop.</strong></p><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line">    <span class="keyword">let</span> b = [     <span class="string">'b'</span>,      <span class="string">'d'</span>     ];</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">'outer</span>: <span class="keyword">for</span> va <span class="keyword">in</span> &amp;a &#123;</span><br><span class="line">        <span class="keyword">for</span> vb <span class="keyword">in</span> &amp;b &#123;</span><br><span class="line">            <span class="keyword">if</span> va == vb &#123;</span><br><span class="line">                <span class="keyword">continue</span> <span class="symbol">'outer</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, va);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>‘outer is a label used to refer to the outer loop. Labels in Rust start with a ‘.</strong></p><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">c</span><br><span class="line">e</span><br></pre></td></tr></table></figure><p><br></p><h3 id="43-Break-outer-loop"><a href="#43-Break-outer-loop" class="headerlink" title="43. Break outer loop"></a>43. <font color="048ba8">Break outer loop</font></h3><blockquote><p>Look for a negative value v in 2D integer matrix m. Print it and stop searching.</p></blockquote><p><em>在2D整数矩阵m中寻找一个负值v，打印出来，停止搜索。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [][]<span class="keyword">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">11</span>, <span class="number">0</span>, <span class="number">30</span>&#125;,</span><br><span class="line">&#123;<span class="number">5</span>, <span class="number">-20</span>, <span class="number">55</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">-60</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mainloop:</span><br><span class="line"><span class="keyword">for</span> i, line := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, <span class="string">"Searching in line"</span>, i)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> line &#123;</span><br><span class="line"><span class="keyword">if</span> v &lt; <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Found "</span>, v)</span><br><span class="line"><span class="keyword">break</span> mainloop</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mainloop is a label used to refer to the outer loop.</strong></p><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Searching in line <span class="number">0</span></span><br><span class="line">Searching in line <span class="number">1</span></span><br><span class="line">Searching in line <span class="number">2</span></span><br><span class="line">Found  <span class="number">-20</span></span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">0</span>, <span class="number">30</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">5</span>, -<span class="number">20</span>, <span class="number">55</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">0</span>, -<span class="number">60</span>],</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="symbol">'outer</span>: <span class="keyword">for</span> v <span class="keyword">in</span> m &#123;</span><br><span class="line">        <span class="symbol">'inner</span>: <span class="keyword">for</span> i <span class="keyword">in</span> v &#123;</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">"Found &#123;&#125;"</span>, i);</span><br><span class="line">                <span class="keyword">break</span> <span class="symbol">'outer</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Loop label syntax is similar to lifetimes.</strong></p><p>输出</p><p><code>Found -20</code></p><p><br></p><h3 id="44-Insert-element-in-list"><a href="#44-Insert-element-in-list" class="headerlink" title="44. Insert element in list"></a>44. <font color="0db39e">Insert element in list</font></h3><blockquote><p>Insert element x at position i in list s. Further elements must be shifted to the right.</p></blockquote><p><em>在列表s的位置I插入元素x。其他元素必须向右移动。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">s[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// insert one at index one</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">0</span>)</span><br><span class="line"><span class="built_in">copy</span>(s[<span class="number">2</span>:], s[<span class="number">1</span>:])</span><br><span class="line">s[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span> <span class="number">2</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> vec = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    vec.insert(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(vec, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line">    vec.insert(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(vec, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="45-Pause-execution-for-5-seconds"><a href="#45-Pause-execution-for-5-seconds" class="headerlink" title="45. Pause execution for 5 seconds"></a>45. <font color="16db93">Pause execution for 5 seconds</font></h3><p><em>在继续下一个指令之前，在当前线程中休眠5秒钟。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">"Done."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;thread, time&#125;;</span><br><span class="line">thread::sleep(time::Duration::from_secs(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p><br></p><h3 id="46-Extract-beginning-of-string-prefix"><a href="#46-Extract-beginning-of-string-prefix" class="headerlink" title="46. Extract beginning of string (prefix)"></a>46. <font color="83e377">Extract beginning of string (prefix)</font></h3><blockquote><p>Create string t consisting of the 5 first characters of string s.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>创建由字符串s的前5个字符组成的字符串t。<br>确保正确处理多字节字符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Привет"</span></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Приве</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"été 😁 torride"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> t = s.char_indices().nth(<span class="number">5</span>).map_or(s, |(i, _)| &amp;s[..i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>été 😁</code></p><p><br></p><h3 id="47-Extract-string-suffix"><a href="#47-Extract-string-suffix" class="headerlink" title="47. Extract string suffix"></a>47. <font color="b9e769">Extract string suffix</font></h3><blockquote><p>Create string t consisting in the 5 last characters of string s.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>创建由字符串s的最后5个字符组成的字符串t。<br>确保正确处理多字节字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello, world! 문자"</span></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[<span class="built_in">len</span>([]<span class="keyword">rune</span>(s))<span class="number">-5</span>:])</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>d! 문자</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"tükörfúrógép"</span>;</span><br><span class="line">    <span class="keyword">let</span> last5ch = s.chars().count() - <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> s2: <span class="built_in">String</span> = s.chars().skip(last5ch).collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>rógép</code></p><p><br></p><h3 id="48-Multi-line-string-literal"><a href="#48-Multi-line-string-literal" class="headerlink" title="48. Multi-line string literal"></a>48. <font color="efea5a">Multi-line string literal</font></h3><blockquote><p>Assign to variable s a string literal consisting in several lines of text, including newlines.</p></blockquote><p><em>给变量s赋值一个由几行文本组成的字符串，包括换行符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`Huey</span></span><br><span class="line"><span class="string">Dewey</span></span><br><span class="line"><span class="string">Louie`</span></span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Huey</span><br><span class="line">Dewey</span><br><span class="line">Louie</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"line 1</span></span><br><span class="line"><span class="string">line 2</span></span><br><span class="line"><span class="string">line 3"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line <span class="number">1</span></span><br><span class="line">line <span class="number">2</span></span><br><span class="line">line <span class="number">3</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = r#<span class="string">"Huey</span></span><br><span class="line"><span class="string">Dewey</span></span><br><span class="line"><span class="string">Louie"</span>#;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, &amp;s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Huey</span><br><span class="line">Dewey</span><br><span class="line">Louie</span><br></pre></td></tr></table></figure><p><br></p><h3 id="49-Split-a-space-separated-string"><a href="#49-Split-a-space-separated-string" class="headerlink" title="49. Split a space-separated string"></a>49. <font color="f1c453">Split a space-separated string</font></h3><p><em>拆分用空格分隔的字符串</em></p><blockquote><p>Build list chunks consisting in substrings of input string s, separated by one or more space characters.</p></blockquote><p><em>构建由输入字符串的子字符串组成的列表块，由一个或多个空格字符分隔。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Un dos tres"</span></span><br><span class="line">chunks := strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">" Un dos tres "</span></span><br><span class="line">chunks = strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Un  dos"</span></span><br><span class="line">chunks = strings.Split(s, <span class="string">" "</span>)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[ Un dos tres ]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[Un  dos]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello world"</span></span><br><span class="line">chunks := strings.Fields(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[hello world]</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Un dos tres"</span></span><br><span class="line">chunks := strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">" Un dos tres "</span></span><br><span class="line">chunks = strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line"></span><br><span class="line">s = <span class="string">"Un  dos"</span></span><br><span class="line">chunks = strings.Fields(s)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(chunks))</span><br><span class="line">fmt.Println(chunks)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">3</span></span><br><span class="line">[Un dos tres]</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[Un dos]</span><br></pre></td></tr></table></figure><p>strings.Fields 就只能干这个事儿</p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split_whitespace().collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split_ascii_whitespace().collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"What a  mess"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> chunks: <span class="built_in">Vec</span>&lt;_&gt; = s.split(<span class="string">' '</span>).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, chunks);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"What"</span>, <span class="string">"a"</span>, <span class="string">""</span>, <span class="string">"mess"</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="50-Make-an-infinite-loop"><a href="#50-Make-an-infinite-loop" class="headerlink" title="50. Make an infinite loop"></a>50. <font color="f29e4c">Make an infinite loop</font></h3><p><em>写一个无限循环</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">k := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello, playground"</span>)</span><br><span class="line">k++</span><br><span class="line"><span class="keyword">if</span> k == <span class="number">5</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br><span class="line">Hello, playground</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line"><span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="51-Check-if-map-contains-key"><a href="#51-Check-if-map-contains-key" class="headerlink" title="51. Check if map contains key"></a>51. <font color="e2e2df">Check if map contains key</font></h3><blockquote><p>Determine whether map m contains an entry for key k</p></blockquote><p><em>检查map是否有某个key</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"uno"</span>:  <span class="number">1</span>,</span><br><span class="line"><span class="string">"dos"</span>:  <span class="number">2</span>,</span><br><span class="line"><span class="string">"tres"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">k := <span class="string">"cinco"</span></span><br><span class="line">_, ok := m[k]</span><br><span class="line">fmt.Printf(<span class="string">"m contains key %q: %v\n"</span>, k, ok)</span><br><span class="line"></span><br><span class="line">k = <span class="string">"tres"</span></span><br><span class="line">_, ok = m[k]</span><br><span class="line">fmt.Printf(<span class="string">"m contains key %q: %v\n"</span>, k, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m contains key <span class="string">"cinco"</span>: <span class="literal">false</span></span><br><span class="line">m contains key <span class="string">"tres"</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashMap::new();</span><br><span class="line">    m.insert(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">    m.insert(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hit = m.contains_key(&amp;k);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, hit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="52-Check-if-map-contains-value"><a href="#52-Check-if-map-contains-value" class="headerlink" title="52. Check if map contains value"></a>52. <font color="d2d2cf">Check if map contains value</font></h3><p><em>检查map中是否有某个值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsValue</span><span class="params">(m <span class="keyword">map</span>[K]T, v T)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">if</span> x == v &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arbitrary types for K, T.</span></span><br><span class="line"><span class="keyword">type</span> K <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[K]T&#123;</span><br><span class="line"><span class="string">"uno"</span>:  <span class="number">1</span>,</span><br><span class="line"><span class="string">"dos"</span>:  <span class="number">2</span>,</span><br><span class="line"><span class="string">"tres"</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> v T = <span class="number">5</span></span><br><span class="line">ok := containsValue(m, v)</span><br><span class="line">fmt.Printf(<span class="string">"m contains value %d: %v\n"</span>, v, ok)</span><br><span class="line"></span><br><span class="line">v = <span class="number">3</span></span><br><span class="line">ok = containsValue(m, v)</span><br><span class="line">fmt.Printf(<span class="string">"m contains value %d: %v\n"</span>, v, ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 输出</p> <figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m contains value <span class="number">5</span>: <span class="literal">false</span></span><br><span class="line">m contains value <span class="number">3</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = BTreeMap::new();</span><br><span class="line">    m.insert(<span class="number">11</span>, <span class="string">"one"</span>);</span><br><span class="line">    m.insert(<span class="number">22</span>, <span class="string">"twenty-two"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="string">"eight"</span>;</span><br><span class="line">        <span class="keyword">let</span> does_contain = m.values().any(|&amp;val| *val == *v);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, does_contain);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> v = <span class="string">"twenty-two"</span>;</span><br><span class="line">        <span class="keyword">let</span> does_contain = m.values().any(|&amp;val| *val == *v);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, does_contain);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="53-Join-a-list-of-strings"><a href="#53-Join-a-list-of-strings" class="headerlink" title="53. Join a list of strings"></a>53. <font color="e2cfc4">Join a list of strings</font></h3><p><em>字符串连接</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"xxx"</span>, <span class="string">"bbb"</span>, <span class="string">"aaa"</span>&#125;</span><br><span class="line">y := strings.Join(x, <span class="string">"&amp;"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>xxx&amp;bbb&amp;aaa</code></p><p>关于 <a href="https://pkg.go.dev/strings#Join" target="_blank" rel="noopener">strings.Joins</a></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="string">"Lorem"</span>, <span class="string">"ipsum"</span>, <span class="string">"dolor"</span>, <span class="string">"sit"</span>, <span class="string">"amet"</span>];</span><br><span class="line">    <span class="keyword">let</span> y = x.join(<span class="string">", "</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Lorem, ipsum, dolor, sit, amet</span><br></pre></td></tr></table></figure><p><br></p><h3 id="54-Compute-sum-of-integers"><a href="#54-Compute-sum-of-integers" class="headerlink" title="54. Compute sum of integers"></a>54. <font color="f7d9c4">Compute sum of integers</font></h3><p><em>计算整数之和</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">s := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line">s += v</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>6</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; = (<span class="number">0</span>..=<span class="number">10_000</span>).collect();</span><br><span class="line">    </span><br><span class="line">    eprintln!(<span class="string">"Sum of 0-10,000 = &#123;&#125;"</span>, x.iter().sum::&lt;<span class="built_in">usize</span>&gt;())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>Sum of 0-10,000 = 50005000</code></p><p><br></p><h3 id="55-Convert-integer-to-string"><a href="#55-Convert-integer-to-string" class="headerlink" title="55. Convert integer to string"></a>55. <font color="faedcb">Convert integer to string</font></h3><p><em>将整数转换为字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1234</span></span><br><span class="line">s := strconv.Itoa(i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1234</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int64</span> = <span class="number">1234</span></span><br><span class="line">s := strconv.FormatInt(i, <span class="number">10</span>)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1234</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="keyword">int</span> = <span class="number">1234</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%d"</span>, i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> j <span class="keyword">int</span> = <span class="number">5678</span></span><br><span class="line">s = fmt.Sprintf(<span class="string">"%d"</span>, j)</span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> k *big.Int = big.NewInt(<span class="number">90123456</span>)</span><br><span class="line">s = fmt.Sprintf(<span class="string">"%d"</span>, k)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span></span><br><span class="line"><span class="number">5678</span></span><br><span class="line"><span class="number">90123456</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> s = i.to_string();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>123</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 </p><p><code>123</code></p><p><br></p><h3 id="56-Launch-1000-parallel-tasks-and-wait-for-completion"><a href="#56-Launch-1000-parallel-tasks-and-wait-for-completion" class="headerlink" title="56. Launch 1000 parallel tasks and wait for completion"></a>56. <font color="c9e4de">Launch 1000 parallel tasks and wait for completion</font></h3><blockquote><p>Fork-join : launch the concurrent execution of procedure f with parameter i from 1 to 1000.<br>Tasks are independent and f(i) doesn’t return any value.<br>Tasks need not run all at the same time, so you may use a pool.<br>Wait for the completion of the 1000 tasks and then print “Finished”.</p></blockquote><p><em>创建1000个并行任务，并等待其完成</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">d := rand.Int() % <span class="number">10000</span></span><br><span class="line">time.Sleep(time.Duration(d))</span><br><span class="line">fmt.Printf(<span class="string">"Hello %v\n"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">wg.Add(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">f(i)</span><br><span class="line">wg.Done()</span><br><span class="line">&#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">fmt.Println(<span class="string">"Finished"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello <span class="number">741</span></span><br><span class="line">Hello <span class="number">651</span></span><br><span class="line">Hello <span class="number">49</span></span><br><span class="line">...（共计<span class="number">1000</span>个）</span><br><span class="line">Hello xxx</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> threads: <span class="built_in">Vec</span>&lt;_&gt; = (<span class="number">0</span>..<span class="number">10</span>).map(|i| thread::spawn(<span class="keyword">move</span> || f(i))).collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads &#123;</span><br><span class="line">    t.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="57-Filter-list"><a href="#57-Filter-list" class="headerlink" title="57. Filter list"></a>57. <font color="c6def1">Filter list</font></h3><blockquote><p>Create list y containing items from list x satisfying predicate p. Respect original ordering. Don’t modify x in-place.</p></blockquote><p><em>过滤list中的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="number">0</span>, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">n := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">n++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="number">0</span>, n)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">6</span> <span class="number">8</span> <span class="number">10</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y: <span class="built_in">Vec</span>&lt;_&gt; = x.iter()</span><br><span class="line">        .filter(|&amp;x| x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">        .collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="58-Extract-file-content-to-a-string"><a href="#58-Extract-file-content-to-a-string" class="headerlink" title="58. Extract file content to a string"></a>58. <font color="dbcdf0">Extract file content to a string</font></h3><p><em>提取字符串的文件内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"io/ioutil"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f := <span class="string">"data.txt"</span></span><br><span class="line">b, err := ioutil.ReadFile(f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">lines := <span class="keyword">string</span>(b)</span><br><span class="line"></span><br><span class="line">fmt.Println(lines)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create file in fake FS of the Playground. init is executed before main.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"data.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`Un</span></span><br><span class="line"><span class="string">Dos</span></span><br><span class="line"><span class="string">Tres`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Un</span><br><span class="line">Dos</span><br><span class="line">Tres</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; <span class="built_in">Result</span>&lt;(), ()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="string">"Cargo.toml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> file = File::open(f).expect(<span class="string">"Can't open file."</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> lines = <span class="built_in">String</span>::new();</span><br><span class="line">    file.read_to_string(&amp;<span class="keyword">mut</span> lines)</span><br><span class="line">        .expect(<span class="string">"Can't read file contents."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, lines);</span><br><span class="line"></span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="string">"Cargo.toml"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lines = fs::read_to_string(f).expect(<span class="string">"Can't read file."</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, lines);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="59-Write-to-standard-error-stream"><a href="#59-Write-to-standard-error-stream" class="headerlink" title="59. Write to standard error stream"></a>59. <font color="f2c6de">Write to standard error stream</font></h3><blockquote><p>Print the message “x is negative” to standard error (stderr), with integer x value substitution (e.g. “-2 is negative”).</p></blockquote><p><em>写入标准错误流</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">-2</span></span><br><span class="line">fmt.Fprintln(os.Stderr, x, <span class="string">"is negative"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> is negative</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = -<span class="number">3</span>;</span><br><span class="line">    eprintln!(<span class="string">"&#123;&#125; is negative"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">3</span> is negative</span><br></pre></td></tr></table></figure><p><br></p><h3 id="60-Read-command-line-argument"><a href="#60-Read-command-line-argument" class="headerlink" title="60. Read command line argument"></a>60. <font color="f9c6c9">Read command line argument</font></h3><p><em>读取命令行参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"os"</span></span><br><span class="line">x := os.Args[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> first_arg = env::args().skip(<span class="number">1</span>).next();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fallback = <span class="string">""</span>.to_owned();</span><br><span class="line">    <span class="keyword">let</span> x = first_arg.unwrap_or(fallback);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>&quot;&quot;</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;41-Reverse-a-string&quot;&gt;&lt;a href=&quot;#41-Reverse-a-string&quot; class=&quot;headerlink&quot; title=&quot;41. Reverse a string&quot;&gt;&lt;/a&gt;41. &lt;font color=
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(2)</title>
    <link href="http://www.dashen.tech/2021/07/13/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-2/"/>
    <id>http://www.dashen.tech/2021/07/13/Rust-vs-Go-常用语法对比-2/</id>
    <published>2021-07-12T17:35:16.000Z</published>
    <updated>2021-07-15T02:21:30.906Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="21-Swap-values"><a href="#21-Swap-values" class="headerlink" title="21. Swap values"></a>21. <font color="70d6ff">Swap values</font></h3><p><em>交换变量a和b的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a, b = b, a</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">3</span></span><br><span class="line">b := <span class="number">10</span></span><br><span class="line">a, b = b, a</span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (a, b) = (b, a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a: &#123;a&#125;, b: &#123;b&#125;"</span>, a=a, b=b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>a: 10, b: 3</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">12</span>, <span class="number">42</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;, b = &#123;&#125;"</span>, a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (a, b) = (b, a);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"a = &#123;&#125;, b = &#123;&#125;"</span>, a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span>, b = <span class="number">42</span></span><br><span class="line">a = <span class="number">42</span>, b = <span class="number">12</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="22-Convert-string-to-integer"><a href="#22-Convert-string-to-integer" class="headerlink" title="22. Convert string to integer"></a>22. <font color="ff70a6">Convert string to integer</font></h3><p><em>将字符串转换为整型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line">i, err  := strconv.Atoi(s)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// create a string</span></span><br><span class="line">s := <span class="string">"123"</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(s))</span><br><span class="line"></span><br><span class="line"><span class="comment">// convert string to int</span></span><br><span class="line">i, err := strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">fmt.Println(<span class="string">"type:"</span>, reflect.TypeOf(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">type</span>: <span class="keyword">string</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="keyword">type</span>: <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"123"</span></span><br><span class="line">fmt.Println(<span class="string">"s is"</span>, reflect.TypeOf(s), s)</span><br><span class="line"></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i is"</span>, reflect.TypeOf(i), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s is <span class="keyword">string</span> <span class="number">123</span></span><br><span class="line">i is <span class="keyword">int64</span> <span class="number">123</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// This prints 123</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = s.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This panics</span></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = s.parse::&lt;<span class="built_in">i32</span>&gt;().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i: <span class="built_in">i32</span> = s.parse().unwrap_or(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = s.parse().unwrap_or(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="string">"123"</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="keyword">match</span> s.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(i) =&gt; i,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line"></span><br><span class="line">    s = <span class="string">"12u3"</span>;</span><br><span class="line">    i = <span class="keyword">match</span> s.parse::&lt;<span class="built_in">i32</span>&gt;() &#123;</span><br><span class="line">        <span class="literal">Ok</span>(i) =&gt; i,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; -<span class="number">1</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line">-<span class="number">1</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="23-Convert-real-number-to-string-with-2-decimal-places"><a href="#23-Convert-real-number-to-string-with-2-decimal-places" class="headerlink" title="23. Convert real number to string with 2 decimal places"></a>23. <font color="ff9770">Convert real number to string with 2 decimal places</font></h3><blockquote><p>Given a real number x, create its string representation s with 2 decimal digits following the dot.</p></blockquote><p><em>给定一个实数，小数点后保留两位小数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">3.14159</span></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%.2f"</span>, x)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>3.14</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">42.1337</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:.2&#125;"</span>, x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>42.13</code></p><p><br></p><h3 id="24-Assign-to-string-the-japanese-word-ネコ"><a href="#24-Assign-to-string-the-japanese-word-ネコ" class="headerlink" title="24. Assign to string the japanese word ネコ"></a>24. <font color="ffd670">Assign to string the japanese word ネコ</font></h3><blockquote><p>Declare a new string s and initialize it with the literal value “ネコ” (which means “cat” in japanese)</p></blockquote><p><em>声明一个新的字符串s，并用文字值“ネコ”初始化它(在日语中是“cat”的意思)</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"ネコ"</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"ネコ"</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="25-Send-a-value-to-another-thread"><a href="#25-Send-a-value-to-another-thread" class="headerlink" title="25. Send a value to another thread"></a>25. <font color="e9ff70">Send a value to another thread</font></h3><blockquote><p>Share the string value “Alan” with an existing running process which will then display “Hello, Alan”</p></blockquote><p><em>将字符串值“Alan”与现有的正在运行的进程共享，该进程将显示“你好，Alan”</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ch &lt;- <span class="string">"Alan"</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := &lt;-ch</span><br><span class="line">fmt.Printf(<span class="string">"Hello, %v\n"</span>, v)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">ch &lt;- <span class="string">"Alan"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure the non-main goroutine had the chance to finish.</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hello, Alan</code></p><p><em>The receiver goroutine blocks reading the string channel ch.<br>The current goroutine sends the value to ch.<br>A goroutine is like a thread, but more lightweight.</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc::channel;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (send, recv) = channel();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> handle = thread::spawn(<span class="keyword">move</span> || <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> msg = recv.recv().unwrap();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello, &#123;:?&#125;"</span>, msg);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    send.send(<span class="string">"Alan"</span>).unwrap();</span><br><span class="line">    </span><br><span class="line">    handle.join().unwrap();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出 <code>Hello, &quot;Alan&quot;</code></p><p><br></p><h3 id="26-Create-a-2-dimensional-array"><a href="#26-Create-a-2-dimensional-array" class="headerlink" title="26. Create a 2-dimensional array"></a>26. <font color="386641">Create a 2-dimensional array</font></h3><blockquote><p>Declare and initialize a matrix x having m rows and n columns, containing real numbers.</p></blockquote><p><strong>创建一个二维数组</strong></p><p><em>声明并初始化一个有m行n列的矩阵x，包含实数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m, n = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> x [m][n]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> m, n = <span class="number">3</span>, <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> x [m][n]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[[0 0 0 0] [0 0 8 0] [0 0 0 0]]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := make2D(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">8</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make2D</span><span class="params">(m, n <span class="keyword">int</span>)</span> [][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = buf[:n:n]</span><br><span class="line">buf = buf[n:]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[[0 0 0] [0 8 0]]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="number">0.0f64</span>; N]; M];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">  <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut</span> x = [[<span class="number">0.0</span>; N] ; M];</span><br><span class="line"></span><br><span class="line">  x[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">5.0</span>;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">5.0</span>,</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">        <span class="number">0.0</span>,</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="27-Create-a-3-dimensional-array"><a href="#27-Create-a-3-dimensional-array" class="headerlink" title="27. Create a 3-dimensional array"></a>27. <font color="6a994e">Create a 3-dimensional array</font></h3><blockquote><p>Declare and initialize a 3D array x, having dimensions boundaries m, n, p, and containing real numbers.</p></blockquote><p><strong>创建一个三维数组</strong></p><p><em>声明并初始化一个三维数组x，它有m，n，p维边界，并且包含实数。</em></p><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> m, n, p = <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> x [m][n][p]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> m, n, p = <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="keyword">var</span> x [m][n][p]<span class="keyword">float64</span></span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Value of x</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Type of x</span></span><br><span class="line">fmt.Printf(<span class="string">"%T"</span>, x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]] [[<span class="number">0</span> <span class="number">0</span> <span class="number">9</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]]</span><br><span class="line">[<span class="number">2</span>][<span class="number">2</span>][<span class="number">3</span>]<span class="keyword">float64</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make3D</span><span class="params">(m, n, p <span class="keyword">int</span>)</span> [][][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n*p)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = <span class="built_in">make</span>([][]<span class="keyword">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> x[i] &#123;</span><br><span class="line">x[i][j] = buf[:p:p]</span><br><span class="line">buf = buf[p:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := make3D(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">x[<span class="number">1</span>][<span class="number">0</span>][<span class="number">2</span>] = <span class="number">9</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make3D</span><span class="params">(m, n, p <span class="keyword">int</span>)</span> [][][]<span class="title">float64</span></span> &#123;</span><br><span class="line">buf := <span class="built_in">make</span>([]<span class="keyword">float64</span>, m*n*p)</span><br><span class="line"></span><br><span class="line">x := <span class="built_in">make</span>([][][]<span class="keyword">float64</span>, m)</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">x[i] = <span class="built_in">make</span>([][]<span class="keyword">float64</span>, n)</span><br><span class="line"><span class="keyword">for</span> j := <span class="keyword">range</span> x[i] &#123;</span><br><span class="line">x[i][j] = buf[:p:p]</span><br><span class="line">buf = buf[p:]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]] [[<span class="number">0</span> <span class="number">0</span> <span class="number">9</span>] [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="number">0.0f64</span>; p]; n]; m];</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> M: <span class="built_in">usize</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> N: <span class="built_in">usize</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> P: <span class="built_in">usize</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = [[[<span class="number">0.0f64</span>; P]; N]; M];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">            <span class="number">0.0</span>,</span><br><span class="line">        ],</span><br><span class="line">    ],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="28-Sort-by-a-property"><a href="#28-Sort-by-a-property" class="headerlink" title="28. Sort by a property"></a>28. <font color="a7c957">Sort by a property</font></h3><blockquote><p>Sort elements of array-like collection items in ascending order of x.p, where p is a field of the type Item of the objects in items.</p></blockquote><p><em>按x-&gt;p的升序对类似数组的集合项的元素进行排序，其中p是项中对象的项类型的字段。</em></p><h4 id="go-1"><a href="#go-1" class="headerlink" title="go"></a>go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ItemPSorter []Item</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span>           &#123; <span class="keyword">return</span> <span class="built_in">len</span>(s) &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> s[i].p &lt; s[j].p &#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s ItemPSorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span>      &#123; s[i], s[j] = s[j], s[i] &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sortItems</span><span class="params">(items []Item)</span></span> &#123;</span><br><span class="line">sorter := ItemPSorter(items)</span><br><span class="line">sort.Sort(sorter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line">sortItems(items)</span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"sort"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">label <span class="keyword">string</span></span><br><span class="line">p     <span class="keyword">int</span></span><br><span class="line">lang  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []Item&#123;</span><br><span class="line">&#123;<span class="string">"twelve"</span>, <span class="number">12</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"six"</span>, <span class="number">6</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"eleven"</span>, <span class="number">11</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"zero"</span>, <span class="number">0</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"two"</span>, <span class="number">2</span>, <span class="string">"english"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"Unsorted: "</span>, items)</span><br><span class="line"></span><br><span class="line">less := <span class="function"><span class="keyword">func</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> items[i].p &lt; items[j].p</span><br><span class="line">&#125;</span><br><span class="line">sort.Slice(items, less)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"Sorted: "</span>, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Unsorted:  [&#123;twelve <span class="number">12</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125;]</span><br><span class="line">Sorted:  [&#123;zero <span class="number">0</span> english&#125; &#123;two <span class="number">2</span> english&#125; &#123;six <span class="number">6</span> english&#125; &#123;eleven <span class="number">11</span> english&#125; &#123;twelve <span class="number">12</span> english&#125;]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    p: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;];</span><br><span class="line"></span><br><span class="line">    items.sort_by(|a, b| a.p.cmp(&amp;b.p));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span></span> &#123;</span><br><span class="line">    p: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;];</span><br><span class="line"></span><br><span class="line">    items.sort_by_key(|x| x.p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Foo &#123; p: <span class="number">1</span> &#125;, Foo &#123; p: <span class="number">2</span> &#125;, Foo &#123; p: <span class="number">3</span> &#125;, Foo &#123; p: <span class="number">4</span> &#125;]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="29-Remove-item-from-list-by-its-index"><a href="#29-Remove-item-from-list-by-its-index" class="headerlink" title="29. Remove item from list, by its index"></a>29. <font color="f2e8cf">Remove item from list, by its index</font></h3><blockquote><p>Remove i-th item from list items.<br>This will alter the original list or return a new list, depending on which is more idiomatic.<br>Note that in most languages, the smallest valid value for i is 0.</p></blockquote><p><em>从列表项中删除第I项。<br>这将改变原来的列表或返回一个新的列表，这取决于哪个更习惯。<br>请注意，在大多数语言中，I的最小有效值是0。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">i := <span class="number">2</span></span><br><span class="line">items = <span class="built_in">append</span>(items[:i], items[i+<span class="number">1</span>:]...)</span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a b c d e f]</span><br><span class="line">[a b d e f]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">copy</span>(items[i:], items[i+<span class="number">1</span>:])</span><br><span class="line">items[<span class="built_in">len</span>(items)<span class="number">-1</span>] = <span class="literal">nil</span></span><br><span class="line">items = items[:<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> v = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="built_in">assert_eq!</span>(v.remove(<span class="number">1</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(v, [<span class="number">1</span>, <span class="number">3</span>]);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="30-Parallelize-execution-of-1000-independent-tasks"><a href="#30-Parallelize-execution-of-1000-independent-tasks" class="headerlink" title="30.     Parallelize execution of 1000 independent tasks"></a>30. <font color="bc4749">    Parallelize execution of 1000 independent tasks</font></h3><blockquote><p>Launch the concurrent execution of procedure f with parameter i from 1 to 1000.<br>Tasks are independent and f(i) doesn’t return any value.<br>Tasks need not run all at the same time, so you may use a pool.</p></blockquote><p><em>用参数I从1到1000启动程序f的并发执行。<br>任务是独立的，f(i)不返回值。<br>任务不需要同时运行，所以可以使用pools</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"sync"</span></span><br><span class="line">wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">wg.Add(<span class="number">1000</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">          f(j)</span><br><span class="line">          wg.Done()</span><br><span class="line">        &#125;(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">d := rand.Int() % <span class="number">10000</span></span><br><span class="line">time.Sleep(time.Duration(d))</span><br><span class="line">fmt.Printf(<span class="string">"Hello %v\n"</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> f(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">4</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> threads: <span class="built_in">Vec</span>&lt;_&gt; = (<span class="number">0</span>..<span class="number">1000</span>).map(|i| thread::spawn(<span class="keyword">move</span> || f(i))).collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads &#123;</span><br><span class="line">        thread.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rayon;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> rayon::prelude::*;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    (<span class="number">0</span>..<span class="number">1000</span>).into_par_iter().for_each(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(i: <span class="built_in">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="31-Recursive-factorial-simple"><a href="#31-Recursive-factorial-simple" class="headerlink" title="31. Recursive factorial (simple)"></a>31. <font color="001524">Recursive factorial (simple)</font></h3><blockquote><p>Create recursive function f which returns the factorial of non-negative integer i, calculated from f(i-1)</p></blockquote><p><em>创建递归函数f，该函数返回从f(i-1)计算的非负整数I的阶乘</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i * f(i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> i * f(i<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Printf(<span class="string">"f(%d) = %d\n"</span>, i, f(i))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f(<span class="number">0</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">f(<span class="number">2</span>) = <span class="number">2</span></span><br><span class="line">f(<span class="number">3</span>) = <span class="number">6</span></span><br><span class="line">f(<span class="number">4</span>) = <span class="number">24</span></span><br><span class="line">f(<span class="number">5</span>) = <span class="number">120</span></span><br><span class="line">f(<span class="number">6</span>) = <span class="number">720</span></span><br><span class="line">f(<span class="number">7</span>) = <span class="number">5040</span></span><br><span class="line">f(<span class="number">8</span>) = <span class="number">40320</span></span><br><span class="line">f(<span class="number">9</span>) = <span class="number">362880</span></span><br><span class="line">f(<span class="number">10</span>) = <span class="number">3628800</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(n: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        n * f(n - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, f(<span class="number">4</span> <span class="keyword">as</span> <span class="built_in">u32</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>24</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">factorial</span></span>(num: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> num &#123;</span><br><span class="line">        <span class="number">0</span> | <span class="number">1</span>=&gt; <span class="number">1</span>,</span><br><span class="line">        _ =&gt; factorial(num - <span class="number">1</span>) * num,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span> </span>()&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">0</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">1</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">2</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, factorial(<span class="number">5</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="32-Integer-exponentiation-by-squaring"><a href="#32-Integer-exponentiation-by-squaring" class="headerlink" title="32. Integer exponentiation by squaring"></a>32. <font color="15616d">Integer exponentiation by squaring</font></h3><blockquote><p>Create function exp which calculates (fast) the value x power n.<br>x and n are non-negative integers.</p></blockquote><p><em>创建函数exp，计算(快速)x次方n的值。<br>x和n是非负整数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exp</span><span class="params">(x, n <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">switch</span> &#123;</span><br><span class="line"><span class="keyword">case</span> n == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> n == <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">case</span> n%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">return</span> exp(x*x, n/<span class="number">2</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> x * exp(x*x, (n<span class="number">-1</span>)/<span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(exp(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>243</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">exp</span></span>(x: <span class="built_in">u64</span>, n: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">match</span> n &#123;</span><br><span class="line">        <span class="number">0</span> =&gt; <span class="number">1</span>,</span><br><span class="line">        <span class="number">1</span> =&gt; x,</span><br><span class="line">        i <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> =&gt; exp(x * x, n / <span class="number">2</span>),</span><br><span class="line">        _ =&gt; x * exp(x * x, (n - <span class="number">1</span>) / <span class="number">2</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">4</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, exp(x, n));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>65536</code></p><p><br></p><h3 id="33-Atomically-read-and-update-variable"><a href="#33-Atomically-read-and-update-variable" class="headerlink" title="33. Atomically read and update variable"></a>33. <font color="ffecd1">Atomically read and update variable</font></h3><blockquote><p>Assign variable x the new value f(x), making sure that no other thread may modify x between the read and the write.</p></blockquote><p><em>为变量x分配新值f(x)，确保在读和写之间没有其他线程可以修改x。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> lock sync.RWMutex</span><br><span class="line">x := <span class="number">3</span></span><br><span class="line"></span><br><span class="line">lock.Lock()</span><br><span class="line">x = f(x)</span><br><span class="line">lock.Unlock()</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>6</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = Mutex::new(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = x.lock().unwrap();</span><br><span class="line">    *x = f(*x);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, *x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>1</code></p><p><br></p><h3 id="34-Create-a-set-of-objects"><a href="#34-Create-a-set-of-objects" class="headerlink" title="34. Create a set of objects"></a>34. <font color="ff7d00">Create a set of objects</font></h3><blockquote><p>Declare and initialize a set x containing objects of type T.</p></blockquote><p><em>声明并初始化一个包含t类型对象的集合x。</em></p><h4 id="go-2"><a href="#go-2" class="headerlink" title="go"></a>go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"C"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"D"</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t, _ := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Printf(<span class="string">"x contains element %v \n"</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x contains element D </span><br><span class="line">x contains element A </span><br><span class="line">x contains element B</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">struct</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"B"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"B"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"C"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">x[<span class="string">"D"</span>] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> t, _ := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Printf(<span class="string">"x contains element %v \n"</span>, t)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x contains element B </span><br><span class="line">x contains element D </span><br><span class="line">x contains element A</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashSet::new();</span><br><span class="line">    m.insert(<span class="string">"a"</span>);</span><br><span class="line">    m.insert(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="35-First-class-function-compose"><a href="#35-First-class-function-compose" class="headerlink" title="35. First-class function : compose"></a>35. <font color="78290f"><a href="https://programming-idioms.org/idiom/35/first-class-function-compose" target="_blank" rel="noopener">First-class function : compose</a></font></h3><blockquote><p>Implement a function compose (A -&gt; C) with parameters f (A -&gt; B) and g (B -&gt; C), which returns composition function g ∘ f</p></blockquote><p><em>用参数f (A -&gt; B)和g (B -&gt; C)实现一个函数compose (A -&gt; C)，返回composition函数g ∘ f</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compose</span><span class="params">(f <span class="keyword">func</span>(A)</span> <span class="title">B</span>, <span class="title">g</span> <span class="title">func</span><span class="params">(B)</span> <span class="title">C</span>) <span class="title">func</span><span class="params">(A)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x A)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> g(f(x))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">squareFromStr := compose(str2int, square)</span><br><span class="line">fmt.Println(squareFromStr(<span class="string">"12"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> B <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> C <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">str2int</span><span class="params">(a A)</span> <span class="title">B</span></span> &#123;</span><br><span class="line">b, _ := strconv.ParseInt(<span class="keyword">string</span>(a), <span class="number">10</span>, <span class="number">32</span>)</span><br><span class="line"><span class="keyword">return</span> B(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(b B)</span> <span class="title">C</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> C(b * b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>144</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;<span class="symbol">'a</span>, A, B, C, G, F&gt;(f: F, g: G) -&gt; <span class="built_in">Box</span>&lt;<span class="built_in">Fn</span>(A) -&gt; C + <span class="symbol">'a</span>&gt;</span><br><span class="line"><span class="keyword">where</span> F: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(A) -&gt; B, G: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(B) -&gt; C</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Box</span>::new(<span class="keyword">move</span> |x| g(f(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;A, B, C&gt;(f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; B, g: <span class="keyword">impl</span> <span class="built_in">Fn</span>(B) -&gt; C) -&gt; <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; C &#123;</span><br><span class="line"><span class="keyword">move</span> |x| g(f(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = |x: <span class="built_in">u32</span>| (x * <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> g = |x: <span class="built_in">i32</span>| (x + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">f32</span>;</span><br><span class="line">    <span class="keyword">let</span> c = compose(f, g);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>5</code></p><p><br></p><h3 id="36-First-class-function-generic-composition"><a href="#36-First-class-function-generic-composition" class="headerlink" title="36. First-class function : generic composition"></a>36. <font color="ff9f1c">First-class function : generic composition</font></h3><blockquote><p>Implement a function compose which returns composition function g ∘ f for any functions f and g having exactly 1 parameter.</p></blockquote><p><em>实现一个函数组合，该函数组合为任何恰好有1个参数的函数f和g返回组合函数g ∘ f。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">composeIntFuncs</span><span class="params">(f <span class="keyword">func</span>(<span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">g</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span>) <span class="title">func</span><span class="params">(<span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> g(f(x))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">double := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span> * x</span><br><span class="line">&#125;</span><br><span class="line">addTwo := <span class="function"><span class="keyword">func</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">h := composeIntFuncs(double, addTwo)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(i, h(i), addTwo(double(i)))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">3</span> <span class="number">8</span> <span class="number">8</span></span><br><span class="line"><span class="number">4</span> <span class="number">10</span> <span class="number">10</span></span><br><span class="line"><span class="number">5</span> <span class="number">12</span> <span class="number">12</span></span><br><span class="line"><span class="number">6</span> <span class="number">14</span> <span class="number">14</span></span><br><span class="line"><span class="number">7</span> <span class="number">16</span> <span class="number">16</span></span><br><span class="line"><span class="number">8</span> <span class="number">18</span> <span class="number">18</span></span><br><span class="line"><span class="number">9</span> <span class="number">20</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;<span class="symbol">'a</span>, A, B, C, G, F&gt;(f: F, g: G) -&gt; <span class="built_in">Box</span>&lt;<span class="built_in">Fn</span>(A) -&gt; C + <span class="symbol">'a</span>&gt;</span><br><span class="line"><span class="keyword">where</span> F: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(A) -&gt; B, G: <span class="symbol">'a</span> + <span class="built_in">Fn</span>(B) -&gt; C</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Box</span>::new(<span class="keyword">move</span> |x| g(f(x)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">compose</span></span>&lt;A, B, C&gt;(f: <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; B, g: <span class="keyword">impl</span> <span class="built_in">Fn</span>(B) -&gt; C) -&gt; <span class="keyword">impl</span> <span class="built_in">Fn</span>(A) -&gt; C &#123;</span><br><span class="line"><span class="keyword">move</span> |x| g(f(x))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> f = |x: <span class="built_in">u32</span>| (x * <span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> g = |x: <span class="built_in">i32</span>| (x + <span class="number">1</span>) <span class="keyword">as</span> <span class="built_in">f32</span>;</span><br><span class="line">    <span class="keyword">let</span> c = compose(f, g);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c(<span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>5</code></p><p><br></p><h3 id="37-Currying"><a href="#37-Currying" class="headerlink" title="37. Currying"></a>37. <font color="ffbf69">Currying</font></h3><blockquote><p>Transform a function that takes multiple arguments into a function for which some of the arguments are preset.</p></blockquote><p><em>将一个接受多个参数的函数转换为一个预设了某些参数的函数。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Company <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Employee <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName <span class="keyword">string</span></span><br><span class="line">LastName  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Employee)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"&lt;"</span> + e.FirstName + <span class="string">" "</span> + e.LastName + <span class="string">"&gt;"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Payroll <span class="keyword">struct</span> &#123;</span><br><span class="line">Company   Company</span><br><span class="line">Boss      *Employee</span><br><span class="line">Employee  *Employee</span><br><span class="line">StartDate time.Time</span><br><span class="line">EndDate   time.Time</span><br><span class="line">Amount    <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a blank payroll for a specific employee with specific boss in specific company</span></span><br><span class="line"><span class="keyword">type</span> PayFactory <span class="function"><span class="keyword">func</span><span class="params">(Company, *Employee, *Employee)</span> <span class="title">Payroll</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Creates a blank payroll for a specific employee</span></span><br><span class="line"><span class="keyword">type</span> CustomPayFactory <span class="function"><span class="keyword">func</span><span class="params">(*Employee)</span> <span class="title">Payroll</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">CurryPayFactory</span><span class="params">(pf PayFactory, company Company, boss *Employee)</span> <span class="title">CustomPayFactory</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(e *Employee)</span> <span class="title">Payroll</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> pf(company, boss, e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewPay</span><span class="params">(company Company, boss *Employee, employee *Employee)</span> <span class="title">Payroll</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> Payroll&#123;</span><br><span class="line">Company:  company,</span><br><span class="line">Boss:     boss,</span><br><span class="line">Employee: employee,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">me := Employee&#123;<span class="string">"Jack"</span>, <span class="string">"Power"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// I happen to be head of the HR department of Richissim Inc.</span></span><br><span class="line"><span class="keyword">var</span> myLittlePayFactory CustomPayFactory = CurryPayFactory(NewPay, <span class="string">"Richissim"</span>, &amp;me)</span><br><span class="line"></span><br><span class="line">fmt.Println(myLittlePayFactory(&amp;Employee&#123;<span class="string">"Jean"</span>, <span class="string">"Dupont"</span>&#125;))</span><br><span class="line">fmt.Println(myLittlePayFactory(&amp;Employee&#123;<span class="string">"Antoine"</span>, <span class="string">"Pol"</span>&#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;Richissim &lt;Jack Power&gt; &lt;Jean Dupont&gt; <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0</span>&#125;</span><br><span class="line">&#123;Richissim &lt;Jack Power&gt; &lt;Antoine Pol&gt; <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0001</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> +<span class="number">0000</span> UTC <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">add</span></span>(a: <span class="built_in">u32</span>, b: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> add5 = <span class="keyword">move</span> |x| add(<span class="number">5</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = add5(<span class="number">12</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>17</code></p><p><br></p><h3 id="38-Extract-a-substring"><a href="#38-Extract-a-substring" class="headerlink" title="38. Extract a substring"></a>38. <font color="cbf3f0">Extract a substring</font></h3><blockquote><p>Find substring t consisting in characters i (included) to j (excluded) of string s.<br>Character indices start at 0 unless specified otherwise.<br>Make sure that multibyte characters are properly handled.</p></blockquote><p><em>查找由字符串s的字符I(包括)到j(不包括)组成的子字符串t。<br>除非另有说明，字符索引从0开始。<br>确保正确处理多字节字符。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"hello, utf-8 문자들"</span></span><br><span class="line">i, j := <span class="number">7</span>, <span class="number">15</span></span><br><span class="line"></span><br><span class="line">t := <span class="keyword">string</span>([]<span class="keyword">rune</span>(s)[i:j])</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>utf-8 문자</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> unicode_segmentation;</span><br><span class="line"><span class="keyword">use</span> unicode_segmentation::UnicodeSegmentation;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Lorem Ipsüm Dolor"</span>;</span><br><span class="line">    <span class="keyword">let</span> (i, j) = (<span class="number">6</span>, <span class="number">11</span>);</span><br><span class="line">    <span class="keyword">let</span> t = s.graphemes(<span class="literal">true</span>).skip(i).take(j - i).collect::&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>Ipsüm</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> substring::Substring;</span><br><span class="line"><span class="keyword">let</span> t = s.substring(i, j);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="39-Check-if-string-contains-a-word"><a href="#39-Check-if-string-contains-a-word" class="headerlink" title="39. Check if string contains a word"></a>39. <font color="2ec4b6">Check if string contains a word</font></h3><blockquote><p>Set boolean ok to true if string word is contained in string s as a substring, or to false otherwise.</p></blockquote><p><em>如果字符串单词作为子字符串包含在字符串s中，则将布尔ok设置为true，否则设置为false。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Let's dance the macarena"</span></span><br><span class="line"></span><br><span class="line">word := <span class="string">"dance"</span></span><br><span class="line">ok := strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"car"</span></span><br><span class="line">ok = strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line"></span><br><span class="line">word = <span class="string">"duck"</span></span><br><span class="line">ok = strings.Contains(s, word)</span><br><span class="line">fmt.Println(ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Let's dance the macarena"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"dance"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"car"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = <span class="string">"duck"</span>;</span><br><span class="line">    <span class="keyword">let</span> ok = s.contains(word);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, ok);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;21-Swap-values&quot;&gt;&lt;a href=&quot;#21-Swap-values&quot; class=&quot;headerlink&quot; title=&quot;21. Swap values&quot;&gt;&lt;/a&gt;21. &lt;font color=&quot;70d6ff&quot;&gt;Swap v
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>底层库的一些tricks</title>
    <link href="http://www.dashen.tech/2021/07/11/%E5%BA%95%E5%B1%82%E5%BA%93%E7%9A%84%E4%B8%80%E4%BA%9Btricks/"/>
    <id>http://www.dashen.tech/2021/07/11/底层库的一些tricks/</id>
    <published>2021-07-11T13:31:53.000Z</published>
    <updated>2021-07-08T13:31:54.234Z</updated>
    
    <content type="html"><![CDATA[<h3 id="位运算代替乘法运算"><a href="#位运算代替乘法运算" class="headerlink" title="位运算代替乘法运算"></a>位运算代替乘法运算</h3><p><br></p><p>   hash = ((hash &lt;&lt; 5) + hash) + (<em>str); //等价hash(i-1) </em> 33 + str[i]。5(2) = 32(10)</p><p>   还有一个事情很有意思，乘以33是用左移和加法实现的。底层库对性能要求高啊。</p><p><a href="https://github.com/golang/go/blob/2ca44fe2213b53ccaf6f555c11858c6e36490624/src/internal/bytealg/bytealg.go#L54" target="_blank" rel="noopener">RK算法中计算 旋转hash值</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// primeRK is the prime base used in Rabin-Karp algorithm.</span></span><br><span class="line"><span class="keyword">const</span> primeRK = <span class="number">16777619</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hashStr returns the hash and the appropriate multiplicative</span></span><br><span class="line"><span class="comment">// factor for use in Rabin-Karp algorithm.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hashStr</span><span class="params">(sep <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">uint32</span>, <span class="keyword">uint32</span>)</span></span> &#123;</span><br><span class="line">hash := <span class="keyword">uint32</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(sep); i++ &#123;</span><br><span class="line">hash = hash*primeRK + <span class="keyword">uint32</span>(sep[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> pow, sq <span class="keyword">uint32</span> = <span class="number">1</span>, primeRK</span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(sep); i &gt; <span class="number">0</span>; i &gt;&gt;= <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">if</span> i&amp;<span class="number">1</span> != <span class="number">0</span> &#123;</span><br><span class="line">pow *= sq</span><br><span class="line">&#125;</span><br><span class="line">sq *= sq</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> hash, pow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;位运算代替乘法运算&quot;&gt;&lt;a href=&quot;#位运算代替乘法运算&quot; class=&quot;headerlink&quot; title=&quot;位运算代替乘法运算&quot;&gt;&lt;/a&gt;位运算代替乘法运算&lt;/h3&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;   hash = ((hash &amp;lt;&amp;lt; 5) +
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比</title>
    <link href="http://www.dashen.tech/2021/07/09/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94/"/>
    <id>http://www.dashen.tech/2021/07/09/Rust-vs-Go-常用语法对比/</id>
    <published>2021-07-09T13:02:52.000Z</published>
    <updated>2021-07-15T02:08:05.897Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://programming-idioms.org/about#about-block-cheatsheets" target="_blank" rel="noopener">这个网站</a> 可以列出某门编程语言的常用语法，也可以对比两种语言的基本语法差别。</p><p>在此对比<a href="https://programming-idioms.org/cheatsheet/Go/Rust" target="_blank" rel="noopener">Go和Rust</a></p><p><br></p><h3 id="1-Print-Hello-World"><a href="#1-Print-Hello-World" class="headerlink" title="1. Print Hello World"></a>1. <font color="d9ed92">Print Hello World</font></h3><p><em>打印Hello World</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello World"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Rust 输出文字的方式主要有两种：<strong>println!()</strong> 和 <strong>print!()</strong>。这两个”函数”都是向命令行输出字符串的方法，区别仅在于前者会在输出的最后附加输出一个换行符。当用这两个”函数”输出信息的时候，第一个参数是格式字符串，后面是一串可变参数，对应着格式字符串中的”占位符”，这一点与 C 语言/ Go语言 中的 printf 函数很相似。但是，Rust 中格式字符串中的占位符不是”% + 字母”的形式，而是一对 {}。</p></blockquote><p><br></p><h3 id="2-Print-Hello-10-times"><a href="#2-Print-Hello-10-times" class="headerlink" title="2. Print Hello 10 times"></a>2. <font color="b5e48c">Print Hello 10 times</font></h3><p><em>打印10次Hello World</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"Hello"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"Hello\n"</span>.repeat(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="3-Create-a-procedure"><a href="#3-Create-a-procedure" class="headerlink" title="3. Create a procedure"></a>3. <font color="99d98c">Create a procedure</font></h3><blockquote><p>Like a function which doesn’t return any value, thus has only side effects (e.g. Print to standard output)</p></blockquote><p><em>创建一个方法，没有返回值，打印一些内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">finish</span><span class="params">(name <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"My job here is done. Good bye "</span> + name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">finish(<span class="string">"Tony"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    finish(<span class="string">"Buddy"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">finish</span></span>(name : &amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"My job here is done. Goodbye &#123;&#125;"</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="4-Create-a-function-which-returns-the-square-of-an-integer"><a href="#4-Create-a-function-which-returns-the-square-of-an-integer" class="headerlink" title="4. Create a function which returns the square of an integer"></a>4. <font color="76c893">Create a function which returns the square of an integer</font></h3><p><em>创建一个函数,返回一个整数的平方</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">square</span><span class="params">(x <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x*x</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(x: <span class="built_in">u32</span>) -&gt; <span class="built_in">u32</span> &#123;</span><br><span class="line">    x * x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sq = square(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, sq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="5-Create-a-2D-Point-data-structure"><a href="#5-Create-a-2D-Point-data-structure" class="headerlink" title="5. Create a 2D Point data structure"></a>5. <font color="52b69a">Create a 2D Point data structure</font></h3><blockquote><p>Declare a container type for two floating-point numbers x and y</p></blockquote><p><em>声明一个容器类型,有x、y两个浮点数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Point <span class="keyword">struct</span> &#123;</span><br><span class="line">x, y <span class="keyword">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p1 := Point&#123;&#125;</span><br><span class="line">p2 := Point&#123;<span class="number">2.1</span>, <span class="number">2.2</span>&#125;</span><br><span class="line">p3 := Point&#123;</span><br><span class="line">y: <span class="number">3.1</span>,</span><br><span class="line">x: <span class="number">3.2</span>,</span><br><span class="line">&#125;</span><br><span class="line">p4 := &amp;Point&#123;</span><br><span class="line">x: <span class="number">4.1</span>,</span><br><span class="line">y: <span class="number">4.2</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(p1)</span><br><span class="line">fmt.Println(p2)</span><br><span class="line">fmt.Println(p3)</span><br><span class="line">fmt.Println(p4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="number">0</span> <span class="number">0</span>&#125;</span><br><span class="line">&#123;<span class="number">2.1</span> <span class="number">2.2</span>&#125;</span><br><span class="line">&#123;<span class="number">3.2</span> <span class="number">3.1</span>&#125;</span><br><span class="line">&amp;&#123;<span class="number">4.1</span> <span class="number">4.2</span>&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span> &#123;</span><br><span class="line">    x: <span class="built_in">f64</span>,</span><br><span class="line">    y: <span class="built_in">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">'_</span>&gt;) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, <span class="keyword">self</span>.x, <span class="keyword">self</span>.y)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = Point &#123; x: <span class="number">2.0</span>, y: -<span class="number">3.5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span>(<span class="built_in">f64</span>, <span class="built_in">f64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Point &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">'_</span>&gt;) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, <span class="keyword">self</span>.<span class="number">0</span>, <span class="keyword">self</span>.<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> p = Point(<span class="number">2.0</span>, -<span class="number">3.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="6-Iterate-over-list-values"><a href="#6-Iterate-over-list-values" class="headerlink" title="6. Iterate over list values"></a>6. <font color="34a0a4">Iterate over list values</font></h3><blockquote><p>Do something with each item x of an array-like collection items, regardless indexes.</p></blockquote><p><em>遍历列表的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">    doSomething(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">doSomething(x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> items &#123;</span><br><span class="line">        do_something(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_something</span></span>(n: <span class="built_in">i64</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Number &#123;&#125;"</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    items.into_iter().for_each(|x| do_something(x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">do_something</span></span>(n: <span class="built_in">i64</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Number &#123;&#125;"</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="7-Iterate-over-list-indexes-and-values"><a href="#7-Iterate-over-list-indexes-and-values" class="headerlink" title="7. Iterate over list indexes and values"></a>7. <font color="168aad">Iterate over list indexes and values</font></h3><p><em>遍历列表的索引和值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"oranges"</span>,</span><br><span class="line"><span class="string">"apples"</span>,</span><br><span class="line"><span class="string">"bananas"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, x := <span class="keyword">range</span> items &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Item %d = %v \n"</span>, i, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Item <span class="number">0</span> = oranges </span><br><span class="line">Item <span class="number">1</span> = apples </span><br><span class="line">Item <span class="number">2</span> = bananas</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    <span class="keyword">for</span> (i, x) <span class="keyword">in</span> items.iter().enumerate() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Item &#123;&#125; = &#123;&#125;"</span>, i, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    items.iter().enumerate().for_each(|(i, x)| &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Item &#123;&#125; = &#123;&#125;"</span>, i, x);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="8-Initialize-a-new-map-associative-array"><a href="#8-Initialize-a-new-map-associative-array" class="headerlink" title="8. Initialize a new map (associative array)"></a>8. <font color="1a759f">Initialize a new map (associative array)</font></h3><blockquote><p>Create a new map object x, and provide some (key, value) pairs as initial content.</p></blockquote><p><em>创建一个新的map,提供一些键值对 作为初始内容</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[one:<span class="number">1</span> two:<span class="number">2</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = BTreeMap::new();</span><br><span class="line">    x.insert(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">    x.insert(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"one"</span>, <span class="number">1</span>)</span><br><span class="line">(<span class="string">"two"</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [</span><br><span class="line">        (<span class="string">"one"</span>, <span class="number">1</span>),</span><br><span class="line">        (<span class="string">"two"</span>, <span class="number">2</span>),</span><br><span class="line">    ].iter().cloned().collect();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出为：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="string">"two"</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="string">"one"</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>分 BTreeMap 和 HashMap，且都需要use进来</p><p><br></p><h3 id="9-Create-a-Binary-Tree-data-structure"><a href="#9-Create-a-Binary-Tree-data-structure" class="headerlink" title="9. Create a Binary Tree data structure"></a>9. <font color="1e6091">Create a Binary Tree data structure</font></h3><blockquote><p>The structure must be recursive because left child and right child are binary trees too. A node has access to children nodes, but not to its parent.</p></blockquote><p><em>创建一个二叉树</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> BinTree <span class="keyword">struct</span> &#123;</span><br><span class="line">Value valueType</span><br><span class="line">Left *BinTree</span><br><span class="line">Right *BinTree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> BinTree <span class="keyword">struct</span> &#123;</span><br><span class="line">Value <span class="keyword">int</span></span><br><span class="line">Left  *BinTree</span><br><span class="line">Right *BinTree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">inorder</span><span class="params">(root *BinTree)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inorder(root.Left)</span><br><span class="line">fmt.Printf(<span class="string">"%d "</span>, root.Value)</span><br><span class="line">inorder(root.Right)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">root := &amp;BinTree&#123;<span class="number">1</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left = &amp;BinTree&#123;<span class="number">2</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right = &amp;BinTree&#123;<span class="number">3</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Left = &amp;BinTree&#123;<span class="number">4</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Right = &amp;BinTree&#123;<span class="number">5</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Right.Right = &amp;BinTree&#123;<span class="number">6</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line">root.Left.Left.Left = &amp;BinTree&#123;<span class="number">7</span>, <span class="literal">nil</span>, <span class="literal">nil</span>&#125;</span><br><span class="line"></span><br><span class="line">inorder(root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BinTree</span></span>&lt;T&gt; &#123;</span><br><span class="line">    value: T,</span><br><span class="line">    left: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;BinTree&lt;T&gt;&gt;&gt;,</span><br><span class="line">    right: <span class="built_in">Option</span>&lt;<span class="built_in">Box</span>&lt;BinTree&lt;T&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="10-Shuffle-a-list"><a href="#10-Shuffle-a-list" class="headerlink" title="10. Shuffle a list"></a>10. <font color="184e77">Shuffle a list</font></h3><blockquote><p>Generate a random permutation of the elements of list x</p></blockquote><p><em>随机排序一个list</em></p><h4 id="go"><a href="#go" class="headerlink" title="go"></a>go</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> x &#123;</span><br><span class="line">j := rand.Intn(i + <span class="number">1</span>)</span><br><span class="line">x[i], x[j] = x[j], x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f e c g h a d b]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(x))</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm &#123;</span><br><span class="line">y[v] = x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f h c g b a d e]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="built_in">len</span>(x))</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm &#123;</span><br><span class="line">y[v] = x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[f h c g b a d e]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(x) - <span class="number">1</span>; i &gt; <span class="number">0</span>; i-- &#123;</span><br><span class="line">j := rand.Intn(i + <span class="number">1</span>)</span><br><span class="line">x[i], x[j] = x[j], x[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[g d a h e f c b]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;Rng, StdRng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> rng = StdRng::new().unwrap();</span><br><span class="line">rng.shuffle(&amp;<span class="keyword">mut</span> x);</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::seq::SliceRandom;</span><br><span class="line"><span class="keyword">use</span> rand::thread_rng;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Unshuffled: &#123;:?&#125;"</span>, x);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = thread_rng();</span><br><span class="line">    x.shuffle(&amp;<span class="keyword">mut</span> rng);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Shuffled:   &#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="11-Pick-a-random-element-from-a-list"><a href="#11-Pick-a-random-element-from-a-list" class="headerlink" title="11. Pick a random element from a list"></a>11. <font color="f72585">Pick a random element from a list</font></h3><p><em>从列表中选择一个随机元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = []<span class="keyword">string</span>&#123;<span class="string">"bleen"</span>, <span class="string">"fuligin"</span>, <span class="string">"garrow"</span>, <span class="string">"grue"</span>, <span class="string">"hooloovoo"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(x[rand.Intn(<span class="built_in">len</span>(x))])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>fuligin</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pickT</span><span class="params">(x []T)</span> <span class="title">T</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> x[rand.Intn(<span class="built_in">len</span>(x))]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> list = []T&#123;<span class="string">"bleen"</span>, <span class="string">"fuligin"</span>, <span class="string">"garrow"</span>, <span class="string">"grue"</span>, <span class="string">"hooloovoo"</span>&#125;</span><br><span class="line">fmt.Println(pickT(list))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>fuligin</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::&#123;<span class="keyword">self</span>, Rng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> choice = x[rand::thread_rng().gen_range(<span class="number">0</span>..x.len())];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I picked &#123;&#125;!"</span>, choice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::seq::SliceRandom;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    <span class="keyword">let</span> choice = x.choose(&amp;<span class="keyword">mut</span> rng).unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I picked &#123;&#125;!"</span>, choice);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="12-Check-if-list-contains-a-value"><a href="#12-Check-if-list-contains-a-value" class="headerlink" title="12. Check if list contains a value"></a>12. <font color="b5179e">Check if list contains a value</font></h3><blockquote><p>Check if list contains a value x.<br>list is an iterable finite container.</p></blockquote><p><em>检查列表中是否包含一个值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Contains</span><span class="params">(list []T, x T)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="keyword">if</span> item == x &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []T&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">fmt.Println(Contains(list, <span class="string">"b"</span>))</span><br><span class="line">fmt.Println(Contains(list, <span class="string">"z"</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list.contains(&amp;num) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> num = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> list.contains(&amp;num) &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, num);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> list.iter().any(|v| v == &amp;x) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">10</span>, <span class="number">40</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (&amp;list).into_iter().any(|v| v == &amp;x) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; contains &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125; doesn't contain &#123;&#125;"</span>, list, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="13-Iterate-over-map-keys-and-values"><a href="#13-Iterate-over-map-keys-and-values" class="headerlink" title="13. Iterate over map keys and values"></a>13. <font color="7209b7">Iterate over map keys and values</font></h3><blockquote><p>Access each key k with its value x from an associative array mymap, and print them</p></blockquote><p><em>遍历关联数组中的每一对 k-v， 并打印出它们</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"one"</span>:   <span class="number">1</span>,</span><br><span class="line"><span class="string">"two"</span>:   <span class="number">2</span>,</span><br><span class="line"><span class="string">"three"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"four"</span>:  <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, x := <span class="keyword">range</span> mymap &#123;</span><br><span class="line">fmt.Println(<span class="string">"Key ="</span>, k, <span class="string">", Value ="</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Key = two , Value = <span class="number">2</span></span><br><span class="line">Key = three , Value = <span class="number">3</span></span><br><span class="line">Key = four , Value = <span class="number">4</span></span><br><span class="line">Key = one , Value = <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::BTreeMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap = BTreeMap::new();</span><br><span class="line">    mymap.insert(<span class="string">"one"</span>, <span class="number">1</span>);</span><br><span class="line">    mymap.insert(<span class="string">"two"</span>, <span class="number">2</span>);</span><br><span class="line">    mymap.insert(<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line">    mymap.insert(<span class="string">"four"</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k, x) <span class="keyword">in</span> &amp;mymap &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"Key=&#123;key&#125;, Value=&#123;val&#125;"</span>, key = k, val = x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="14-Pick-uniformly-a-random-floating-point-number-in-a-b"><a href="#14-Pick-uniformly-a-random-floating-point-number-in-a-b" class="headerlink" title="14. Pick uniformly a random floating point number in [a..b)"></a>14. <font color="560bad">Pick uniformly a random floating point number in [a..b)</font></h3><blockquote><p>Pick a random number greater than or equals to a, strictly inferior to b. Precondition : a &lt; b.</p></blockquote><p><em>选出一个随机的浮点数，大于或等于a，严格小于b，且a&lt; b</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := pick(<span class="number">-2.0</span>, <span class="number">6.5</span>)</span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pick</span><span class="params">(a, b <span class="keyword">float64</span>)</span> <span class="title">float64</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + (rand.Float64() * (b - a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>3.1396124478267664</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</span><br><span class="line"><span class="keyword">use</span> rand::&#123;thread_rng, Rng&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">1.0</span>, <span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">let</span> c = thread_rng().gen_range(a..b);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="15-Pick-uniformly-a-random-integer-in-a-b"><a href="#15-Pick-uniformly-a-random-integer-in-a-b" class="headerlink" title="15. Pick uniformly a random integer in [a..b]"></a>15. <font color="3f37c9">Pick uniformly a random integer in [a..b]</font></h3><blockquote><p>Pick a random integer greater than or equals to a, inferior or equals to b. Precondition : a &lt; b.</p></blockquote><p><em>选出一个随机的整数，大于或等于a，小于或等于b，且a&lt; b</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := pick(<span class="number">3</span>, <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Note that in the Go Playground, time and random don't change very often.</span></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pick</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + rand.Intn(b-a+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>4</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">pick</span></span>(a: <span class="built_in">i32</span>, b: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> between = Range::new(a, b);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> rng = rand::thread_rng();</span><br><span class="line">    between.ind_sample(&amp;<span class="keyword">mut</span> rng)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::distributions::Distribution;</span><br><span class="line"><span class="keyword">use</span> rand::distributions::Uniform;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (a, b) = (<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = Uniform::new_inclusive(a, b).sample(&amp;<span class="keyword">mut</span> rand::thread_rng());</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="17-Create-a-Tree-data-structure"><a href="#17-Create-a-Tree-data-structure" class="headerlink" title="17. Create a Tree data structure"></a>17. <font color="4361ee">Create a Tree data structure</font></h3><blockquote><p>The structure must be recursive. A node may have zero or more children. A node has access to children nodes, but not to its parent.</p></blockquote><p><em>创建树数据结构,<br>该结构必须是递归的。一个节点可以有零个或多个子节点,节点可以访问子节点，但不能访问其父节点</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key keyType</span><br><span class="line">Deco valueType</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key      key</span><br><span class="line">Deco     value</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tree)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">str := <span class="string">"("</span></span><br><span class="line">str += <span class="keyword">string</span>(t.Deco)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(t.Children) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> str + <span class="string">")"</span></span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">" ("</span></span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> t.Children &#123;</span><br><span class="line">str += child.String()</span><br><span class="line">&#125;</span><br><span class="line">str += <span class="string">"))"</span></span><br><span class="line"><span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Tree)</span> <span class="title">AddChild</span><span class="params">(x key, v value)</span> *<span class="title">Tree</span></span> &#123;</span><br><span class="line">child := &amp;Tree&#123;Key: x, Deco: v&#125;</span><br><span class="line">this.Children = <span class="built_in">append</span>(this.Children, child)</span><br><span class="line"><span class="keyword">return</span> child</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := &amp;Tree&#123;Key: <span class="string">"Granpa"</span>, Deco: <span class="string">"Abraham"</span>&#125;</span><br><span class="line">subtree := tree.AddChild(<span class="string">"Dad"</span>, <span class="string">"Homer"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 1"</span>, <span class="string">"Bart"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 2"</span>, <span class="string">"Lisa"</span>)</span><br><span class="line">subtree.AddChild(<span class="string">"Kid 3"</span>, <span class="string">"Maggie"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(tree)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>(Abraham ((Homer ((Bart)(Lisa)(Maggie)))))</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span>&lt;T&gt; &#123;</span><br><span class="line">    value: T,</span><br><span class="line">    children: <span class="built_in">Vec</span>&lt;Node&lt;T&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Node&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: F) &#123;</span><br><span class="line">       <span class="keyword">self</span>.dfs_helper(&amp;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dfs_helper</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: &amp;F) &#123;</span><br><span class="line">        (f)(&amp;<span class="keyword">self</span>.value);</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> &amp;<span class="keyword">self</span>.children &#123;</span><br><span class="line">            child.dfs_helper(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: Node&lt;<span class="built_in">i32</span>&gt; = Node &#123;</span><br><span class="line">        children: <span class="built_in">vec!</span>[</span><br><span class="line">            Node &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[</span><br><span class="line">                    Node &#123;</span><br><span class="line">                        children: <span class="built_in">vec!</span>[],</span><br><span class="line">                        value: <span class="number">14</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                value: <span class="number">28</span></span><br><span class="line">            &#125;,</span><br><span class="line">            Node &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[],</span><br><span class="line">                value: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        value: <span class="number">50</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    t.dfs(|node| &#123; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, node); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="18-Depth-first-traversing-of-a-tree"><a href="#18-Depth-first-traversing-of-a-tree" class="headerlink" title="18. Depth-first traversing of a tree"></a>18. <font color="4895ef">Depth-first traversing of a tree</font></h3><blockquote><p>Call a function f on every node of a tree, in depth-first prefix order</p></blockquote><p><em>树的深度优先遍历。按照深度优先的前缀顺序，在树的每个节点上调用函数f</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> . <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Tree)</span> <span class="title">Dfs</span><span class="params">(f <span class="keyword">func</span>(*Tree)</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">f(t)</span><br><span class="line"><span class="keyword">for</span> _, child := <span class="keyword">range</span> t.Children &#123;</span><br><span class="line">child.Dfs(f)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> key <span class="keyword">string</span></span><br><span class="line"><span class="keyword">type</span> value <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Tree <span class="keyword">struct</span> &#123;</span><br><span class="line">Key      key</span><br><span class="line">Deco     value</span><br><span class="line">Children []*Tree</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *Tree)</span> <span class="title">AddChild</span><span class="params">(x key, v value)</span></span> &#123;</span><br><span class="line">child := &amp;Tree&#123;Key: x, Deco: v&#125;</span><br><span class="line">this.Children = <span class="built_in">append</span>(this.Children, child)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NodePrint</span><span class="params">(node *Tree)</span></span> &#123;</span><br><span class="line">Printf(<span class="string">"%v (%v)\n"</span>, node.Deco, node.Key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">tree := &amp;Tree&#123;Key: <span class="string">"Granpa"</span>, Deco: <span class="string">"Abraham"</span>&#125;</span><br><span class="line">tree.AddChild(<span class="string">"Dad"</span>, <span class="string">"Homer"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 1"</span>, <span class="string">"Bart"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 2"</span>, <span class="string">"Lisa"</span>)</span><br><span class="line">tree.Children[<span class="number">0</span>].AddChild(<span class="string">"Kid 3"</span>, <span class="string">"Maggie"</span>)</span><br><span class="line"></span><br><span class="line">tree.Dfs(NodePrint)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Abraham (Granpa)</span><br><span class="line">Homer (Dad)</span><br><span class="line">Bart (Kid <span class="number">1</span>)</span><br><span class="line">Lisa (Kid <span class="number">2</span>)</span><br><span class="line">Maggie (Kid <span class="number">3</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::vec;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tree</span></span>&lt;T&gt; &#123;</span><br><span class="line">    children: <span class="built_in">Vec</span>&lt;Tree&lt;T&gt;&gt;,</span><br><span class="line">    value: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Tree&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">new</span></span>(value: T) -&gt; <span class="keyword">Self</span>&#123;</span><br><span class="line">        Tree&#123;</span><br><span class="line">            children: <span class="built_in">vec!</span>[],</span><br><span class="line">            value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">dfs</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: F) &#123;</span><br><span class="line">       <span class="keyword">self</span>.dfs_helper(&amp;f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">dfs_helper</span></span>&lt;F: <span class="built_in">Fn</span>(&amp;T)&gt;(&amp;<span class="keyword">self</span>, f: &amp;F) &#123;</span><br><span class="line">        (f)(&amp;<span class="keyword">self</span>.value);</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> &amp;<span class="keyword">self</span>.children &#123;</span><br><span class="line">            child.dfs_helper(f);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: Tree&lt;<span class="built_in">i32</span>&gt; = Tree &#123;</span><br><span class="line">        children: <span class="built_in">vec!</span>[</span><br><span class="line">            Tree &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[</span><br><span class="line">                    Tree &#123;</span><br><span class="line">                        children: <span class="built_in">vec!</span>[],</span><br><span class="line">                        value: <span class="number">14</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                value: <span class="number">28</span></span><br><span class="line">            &#125;,</span><br><span class="line">            Tree &#123;</span><br><span class="line">                children: <span class="built_in">vec!</span>[],</span><br><span class="line">                value: <span class="number">80</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        value: <span class="number">50</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    t.dfs(|node| &#123; <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, node); &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">50</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">80</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="19-Reverse-a-list"><a href="#19-Reverse-a-list" class="headerlink" title="19. Reverse a list"></a>19. <font color="4895ef">Reverse a list</font></h3><blockquote><p>Reverse the order of the elements of list x.<br>This may reverse “in-place” and destroy the original ordering.</p></blockquote><p><em>反转链表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">5</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, j := <span class="number">0</span>, <span class="built_in">len</span>(s)<span class="number">-1</span>; i &lt; j; i, j = i+<span class="number">1</span>, j<span class="number">-1</span> &#123;</span><br><span class="line">s[i], s[j] = s[j], s[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><p><code>[4 1 3 6 2 5]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="built_in">vec!</span>[<span class="string">"Hello"</span>, <span class="string">"World"</span>];</span><br><span class="line">    <span class="keyword">let</span> y: <span class="built_in">Vec</span>&lt;_&gt; = x.iter().rev().collect();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"World"</span>, <span class="string">"Hello"</span>]</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    x.reverse();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="20-Return-two-values"><a href="#20-Return-two-values" class="headerlink" title="20. Return two values"></a>20. <font color="14213d">Return two values</font></h3><blockquote><p>Implement a function search which looks for item x in a 2D matrix m.<br>Return indices i, j of the matching cell.<br>Think of the most idiomatic way in the language to return the two values at the same time.</p></blockquote><p><em>实现在2D矩阵m中寻找元素x，返回匹配单元格的索引 i，j</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">search</span><span class="params">(m [][]<span class="keyword">int</span>, x <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">bool</span>, <span class="keyword">int</span>, <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> m &#123;</span><br><span class="line"><span class="keyword">for</span> j, v := <span class="keyword">range</span> m[i] &#123;</span><br><span class="line"><span class="keyword">if</span> v == x &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, i, j</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">matrix := [][]<span class="keyword">int</span>&#123;</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;,</span><br><span class="line">&#123;<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> x := <span class="number">1</span>; x &lt;= <span class="number">11</span>; x += <span class="number">2</span> &#123;</span><br><span class="line">found, i, j := search(matrix, x)</span><br><span class="line"><span class="keyword">if</span> found &#123;</span><br><span class="line">fmt.Printf(<span class="string">"matrix[%v][%v] == %v \n"</span>, i, j, x)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Value %v not found. \n"</span>, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">matrix[<span class="number">0</span>][<span class="number">0</span>] == <span class="number">1</span> </span><br><span class="line">matrix[<span class="number">0</span>][<span class="number">2</span>] == <span class="number">3</span> </span><br><span class="line">matrix[<span class="number">1</span>][<span class="number">1</span>] == <span class="number">5</span> </span><br><span class="line">matrix[<span class="number">2</span>][<span class="number">0</span>] == <span class="number">7</span> </span><br><span class="line">matrix[<span class="number">2</span>][<span class="number">2</span>] == <span class="number">9</span> </span><br><span class="line">Value <span class="number">11</span> not found.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">search</span></span>&lt;T: <span class="built_in">Eq</span>&gt;(m: &amp;<span class="built_in">Vec</span>&lt;<span class="built_in">Vec</span>&lt;T&gt;&gt;, x: &amp;T) -&gt; <span class="built_in">Option</span>&lt;(<span class="built_in">usize</span>, <span class="built_in">usize</span>)&gt; &#123;</span><br><span class="line">    <span class="keyword">for</span> (i, row) <span class="keyword">in</span> m.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">for</span> (j, column) <span class="keyword">in</span> row.iter().enumerate() &#123;</span><br><span class="line">            <span class="keyword">if</span> *column == *x &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">Some</span>((i, j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">0</span>, <span class="number">11</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">22</span>, <span class="number">33</span>],</span><br><span class="line">        <span class="built_in">vec!</span>[<span class="number">44</span>, <span class="number">55</span>],</span><br><span class="line">    ];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> hit = search(&amp;a, &amp;<span class="number">33</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, hit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Some</span>((<span class="number">1</span>, <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://programming-idioms.org/about#about-block-cheatsheets&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这个网站&lt;/a&gt; 可以列出某门编程语言的常用语法，也可以对比两种语言的
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Hex-Rays IDA与Hopper Disassembler</title>
    <link href="http://www.dashen.tech/2021/07/08/Hex-Rays-IDA%E4%B8%8EHopper-Disassembler/"/>
    <id>http://www.dashen.tech/2021/07/08/Hex-Rays-IDA与Hopper-Disassembler/</id>
    <published>2021-07-08T13:21:58.000Z</published>
    <updated>2021-07-08T13:21:58.035Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>以多位发明者名字命名的技术和工具</title>
    <link href="http://www.dashen.tech/2021/07/08/%E4%BB%A5%E5%A4%9A%E4%BD%8D%E5%8F%91%E6%98%8E%E8%80%85%E5%90%8D%E5%AD%97%E5%91%BD%E5%90%8D%E7%9A%84%E6%8A%80%E6%9C%AF%E5%92%8C%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.dashen.tech/2021/07/08/以多位发明者名字命名的技术和工具/</id>
    <published>2021-07-08T12:22:35.000Z</published>
    <updated>2021-07-08T01:23:34.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><p>其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母</p><h3 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h3><h3 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h3><h3 id="rabin-carp"><a href="#rabin-carp" class="headerlink" title="rabin-carp"></a>rabin-carp</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;awk&quot;&gt;&lt;a href=&quot;#awk&quot; class=&quot;headerlink&quot; title=&quot;awk&quot;&gt;&lt;/a&gt;awk&lt;/h3&gt;&lt;p&gt;其名称得自于它的创始人 Alfred Aho 、Peter Weinberger 和 Brian Kernighan 姓氏的首个字母
      
    
    </summary>
    
    
      <category term="杂谈" scheme="http://www.dashen.tech/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>使用Cantor pair</title>
    <link href="http://www.dashen.tech/2021/07/08/%E4%BD%BF%E7%94%A8Cantor-pair/"/>
    <id>http://www.dashen.tech/2021/07/08/使用Cantor-pair/</id>
    <published>2021-07-08T02:15:47.000Z</published>
    <updated>2021-07-08T03:27:38.482Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.cyeam.com/golang/2017/02/07/go-optimize-pair" target="_blank" rel="noopener">https://blog.cyeam.com/golang/2017/02/07/go-optimize-pair</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.cyeam.com/golang/2017/02/07/go-optimize-pair&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.cyeam.com/golang/2017/02/
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>使用bitset</title>
    <link href="http://www.dashen.tech/2021/07/08/%E4%BD%BF%E7%94%A8bitset/"/>
    <id>http://www.dashen.tech/2021/07/08/使用bitset/</id>
    <published>2021-07-08T02:14:35.000Z</published>
    <updated>2021-07-08T02:14:46.390Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.cyeam.com/golang/2017/01/18/go-optimize-bitset" target="_blank" rel="noopener">https://blog.cyeam.com/golang/2017/01/18/go-optimize-bitset</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://blog.cyeam.com/golang/2017/01/18/go-optimize-bitset&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.cyeam.com/golang/2017/0
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>构建在线小工具</title>
    <link href="http://www.dashen.tech/2021/07/07/%E6%9E%84%E5%BB%BA%E5%9C%A8%E7%BA%BF%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.dashen.tech/2021/07/07/构建在线小工具/</id>
    <published>2021-07-07T13:56:59.000Z</published>
    <updated>2021-07-07T07:48:18.564Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JSON-to-Go"><a href="#JSON-to-Go" class="headerlink" title="JSON-to-Go"></a><a href="http://json2.dashen.tech/" target="_blank" rel="noopener">JSON-to-Go</a></h3><p><br></p><p>Convert JSON to Go struct</p><p>右键网页另存为，会将html文件和js文件夹拷贝到本地。</p><p>将其上传服务器，改一下资源文件夹的名字，以及html文件里引用的地址。然后添加nginx配置</p><p>项目在<code>/home/ubuntu/tools/json2go</code>目录下，nginx配置为<code>tool_json2to.conf</code></p><p>发现没有像预期中的，查看错误日志</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021/07/07 21:16:53 [crit] 18652#0: *45152 stat() "/home/ubuntu/tools/json2go/static/common.js" failed (13: Permission denied), client: 120.xxx.xxx.xx, server: json2.dashen.tech, request: "GET /static/common.js HTTP/1.1", host: "json2.dashen.tech", referrer: "http://json2.dashen.tech/"</span><br><span class="line">2021/07/07 21:16:53 [crit] 18652#0: *45152 stat() "/home/ubuntu/tools/json2go/static/common.js" failed (13: Permission denied), client: 120.xxx.xxx.xx, server: json2.dashen.tech, request: "GET /static/common.js HTTP/1.1", host: "json2.dashen.tech", referrer: "http://json2.dashen.tech/"</span><br></pre></td></tr></table></figure><p>资源请求失败</p><p>执行 <code>chmod -R 777 static/</code>， 如预期正常显示</p><p><img src="/2021/07/07/构建在线小工具/json2go.png" width="100%" height="50%"></p><p><br></p><hr><p><br></p><h3 id="在线json解析"><a href="#在线json解析" class="headerlink" title="在线json解析"></a><a href="http://json.dashen.tech/" target="_blank" rel="noopener">在线json解析</a></h3><p><br></p><p>路数如上，项目在<code>/home/ubuntu/tools/json</code>目录下，nginx配置为<code>tool_json.conf</code></p><p>并在nginx配置文件里给其添加访问认证(设置后需要输入账号密码才可访问该资源)</p><p><br></p><hr><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JSON-to-Go&quot;&gt;&lt;a href=&quot;#JSON-to-Go&quot; class=&quot;headerlink&quot; title=&quot;JSON-to-Go&quot;&gt;&lt;/a&gt;&lt;a href=&quot;http://json2.dashen.tech/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.dashen.tech/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>fmt包源码剖析</title>
    <link href="http://www.dashen.tech/2021/07/07/fmt%E5%8C%85%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/"/>
    <id>http://www.dashen.tech/2021/07/07/fmt包源码剖析/</id>
    <published>2021-07-07T13:33:24.000Z</published>
    <updated>2021-07-08T08:14:33.657Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://yourbasic.org/golang/fmt-printf-reference-cheat-sheet/" target="_blank" rel="noopener">https://yourbasic.org/golang/fmt-printf-reference-cheat-sheet/</a></p><p><a href="https://blog.cyeam.com/golang/2018/09/10/fmt" target="_blank" rel="noopener">https://blog.cyeam.com/golang/2018/09/10/fmt</a></p><p><a href="https://blog.cyeam.com/golang/2017/02/08/go-optimize-slice-pool" target="_blank" rel="noopener">https://blog.cyeam.com/golang/2017/02/08/go-optimize-slice-pool</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://yourbasic.org/golang/fmt-printf-reference-cheat-sheet/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://yourbasic.org/golang/fmt-
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Go语言抢占式调度</title>
    <link href="http://www.dashen.tech/2021/07/07/Go%E8%AF%AD%E8%A8%80%E6%8A%A2%E5%8D%A0%E5%BC%8F%E8%B0%83%E5%BA%A6/"/>
    <id>http://www.dashen.tech/2021/07/07/Go语言抢占式调度/</id>
    <published>2021-07-07T00:37:13.000Z</published>
    <updated>2021-07-07T02:53:20.686Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://dashen.tech/2020/09/15/sysmon-Runtime-Monitoring/" target="_blank" rel="noopener">sysmon–Runtime Monitoring</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(n <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>&#123;</span><br><span class="line">n++</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line">&#125;(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/07/07/Go语言抢占式调度/0.png" width="100%" height="50%"></p><p>如果是Go 1.14及以上版本，确实会如预期，一直输出递增的数字；</p><p>但对于Go 1.13及以下版本，居然会发生阻塞。</p><p><br></p><h3 id="1-13及以前"><a href="#1-13及以前" class="headerlink" title="1.13及以前"></a>1.13及以前</h3><p><br></p><p>使用gvm或Goland自带的版本切换功能，切回到Go 1.13.5</p><p>执行代码, 数字打印一段时间后，程序就“静止不动“了。</p><p><img src="/2021/07/07/Go语言抢占式调度/1.png" width="100%" height="50%"></p><p>机器是多核CPU，执行top命令，发现程序仍然在运行中。</p><p>但却没有继续输出，说明负责输出数字的goroutine阻塞了</p><p><img src="/2021/07/07/Go语言抢占式调度/2.png" width="100%" height="50%"></p><p><br></p><h3 id="通过dlv进行调试："><a href="#通过dlv进行调试：" class="headerlink" title="通过dlv进行调试："></a>通过dlv进行调试：</h3><p><br></p><p>拿到程序对应的进程id，执行</p><p><code>dlv attach pid</code></p><p><br></p><p>通过<code>grs</code>查看当前所有的协程</p><p><code>*</code>代表当前调试工具绑定到了该协程。 可通过</p><p><code>gr 6</code> 切换到6号协程；</p><p>然后可以继续 <code>grs</code>，</p><p>通过<code>bt</code>命令查看栈回溯，探究究竟阻塞在哪里</p><p><img src="/2021/07/07/Go语言抢占式调度/3.png" width="100%" height="50%"></p><p>可以看到实际阻塞发生在<a href>runtime.futex</a>这里，再往上倒，会找到<a href>runtime.gcStart</a>。阻塞发生在<em>gcStart</em>所在文件的第1287行。</p><p>定位到这一行，发现是在执行STW时发生了阻塞。</p><p><img src="/2021/07/07/Go语言抢占式调度/4.png" width="100%" height="50%"></p><p><br></p><p>GC开始前需要<em>STW</em>来 进行开启写屏障等准备工作. 所以STW就是要抢占所以的P，让它们暂时放下手中的活儿，让GC得以正常工作。</p><p>而我们(继续执行for{})的1号协程没能被抢占，一直在执行。而STW一直在等待它让出，这样就陷入了僵局</p><p><img src="/2021/07/07/Go语言抢占式调度/5.png" width="100%" height="50%"></p><p><br></p><h3 id="为何如此？"><a href="#为何如此？" class="headerlink" title="为何如此？"></a>为何如此？</h3><p><br></p><p><img src="/2021/07/07/Go语言抢占式调度/6.png" width="100%" height="50%"></p><p>STW时，GC需要抢占所有的P，但这不是值日生喊一嗓子就能清场的问题。</p><p>所以它会记录下自己要等待多少个P让出(<strong>sched.stopwait=gomaxprocs</strong>).</p><p>当该值减为0，目的就达到了</p><p><img src="/2021/07/07/Go语言抢占式调度/7.png" width="100%" height="50%"></p><p><img src="/2021/07/07/Go语言抢占式调度/8.png" width="100%" height="50%"></p><p>对于当前P，以及陷入系统调用中的P(<em>_Psyscall</em>)，还有空闲状态的P(<em>_Pidle</em>),直接将它们设置为<strong>_Pgcstop</strong>状态即可。</p><p><img src="/2021/07/07/Go语言抢占式调度/9.png" width="100%" height="50%"></p><p><img src="/2021/07/07/Go语言抢占式调度/10.png" width="100%" height="50%"></p><p>对于还有g在运行的p，则会将对应的<em>g.stackguard0</em>设置为一个特殊标识runtime.stackPreempt,告诉它GC在等待你让出呢</p><p><img src="/2021/07/07/Go语言抢占式调度/11.png" width="100%" height="50%"></p><p>此外还会设置一个<em>gcwaiting</em>标识 (sched.gcwaiting=1)。</p><p>接下来就通过这两个标识符的配合，来实现运行中的p的抢占。</p><p><img src="/2021/07/07/Go语言抢占式调度/12.png" width="100%" height="50%"></p><p><br></p><p>怎么实现呢？</p><p>goroutine在创建之初，栈的大小是固定的，为了防止栈溢出的情况，编译器会在有明显栈消耗的函数头部插入一些检测代码。通过<em>g.stackguard0</em>来判断是否需要进行栈增长</p><p><img src="/2021/07/07/Go语言抢占式调度/13.png" width="100%" height="50%"></p><p>但如果<em>g.stackguard0</em>被设置为特殊标识<em>runtime.stackPreempt</em>, 便不会去执行栈增长，而是去执行一次调度(schedule())。 在调度执行时，会检测gcwaiting标识。若发现GC在等待执行，便会让出当前p，将其置为_Pgcstop状态。</p><p><img src="/2021/07/07/Go语言抢占式调度/14.png" width="100%" height="50%"></p><p>1号协程之所以没有退出，是因为空的for循环并没有调用函数，也就没机会执行栈增长检测代码。所以它并不知道GC在等待它让出</p><p><br></p><p>依赖栈增长检测代码的方式，不算是真正的抢占式调度。</p><p>Go 1.14中迎来了真正的抢占式调度</p><p><br></p><h3 id="1-14"><a href="#1-14" class="headerlink" title="1.14:"></a>1.14:</h3><p><br></p><p>依赖栈增长检测代码的抢占代码的，遇到没有函数调用的情况就会出现问题。</p><p>在Go 1.14中，实现了基于信号的真正的抢占式调度。</p><p>因为基于信号实现，所以也称为<strong>异步抢占</strong></p><p><img src="/2021/07/07/Go语言抢占式调度/15.png" width="100%" height="50%"></p><p><br></p><p>函数<em>preemptone</em>用来抢占一个p，在1.13中，<em>preemptone</em>主要用来设置g.preempt=true，并将g.tsackguard0设置为特殊标识(stackPreempt)；</p><p>而在1.14中，增加了最后的if语句块，第一个判断用来确认当前硬件环境是否支持这种异步抢占，这个常量值(preemptMSupported)是在编译期间就确定的。</p><p>第二个判断用来检测用户是否允许开启异步抢占(默认允许)。 可通过GODEBUG环境变量来禁用异步抢占。</p><p>这两条验证都通过，则将p.preempt字段设置为true，实际的抢占操作交由<strong>preemptM</strong>函数来完成。</p><p>该函数的主要逻辑是，通过<em>runtime.signalM</em>函数，向指定M发送sigPreempt信号<code>----</code> 会调用操作系统中信号相关的系统调用，将指定信号发送给目标线程。 信号发出去了，异步抢占的前一半工作就算是完成了</p><p><img src="/2021/07/07/Go语言抢占式调度/16.png" width="100%" height="50%"></p><p><img src="/2021/07/07/Go语言抢占式调度/17.png" width="100%" height="50%"></p><p><br></p><p>接收到信号的工作线程 会调用对应的信号<em>handler</em>来处理。Go语言中的信号交由<strong>runtime.sighandler</strong>来处理。</p><p><strong>runtime.sighandler</strong>在确认信号为<em>sigPreempt</em>以后，会调用<em>doSigPreempt</em>函数。</p><p><em>doSigPreempt</em>函数会首先确认runtime是否要对指定的g进行异步抢占<code>----</code>首先指定的g与其对应p的preempt字段都要为true，且指定的g还要处在_Grunning状态；还要确认在当前位置打断g并执行异步抢占是安全的<code>----</code>1.指定的g可以挂起并安全的扫描它的栈和寄存器，并且当前被打断的位置并没有打断写屏障； 2.指定的g还有足够的栈空间来注入一个异步抢占函数调用(asyncPreempt); 3.这里可以安全的和runtime进行交互，主要是确定当前并没有持有runtime相关的锁，继而不会在后续尝试获得锁时造成死锁</p><p>这三点都ok，就可以放心的通过<strong>pushCall</strong>向g的执行上下文中注入异步抢占函数调用了。</p><p>被注入的异步抢占函数(asyncPreempt)是一个汇编函数，它会先把各个寄存器的值保存在栈上，也就是先保存现场到栈上，然后调用runtime.asyncPreempt2函数，这个函数最终会去执行schedule()</p><p><img src="/2021/07/07/Go语言抢占式调度/18.png" width="100%" height="50%"></p><p><img src="/2021/07/07/Go语言抢占式调度/19.png" width="100%" height="50%"></p><p><br></p><h3 id="使用dlv验证是否如此"><a href="#使用dlv验证是否如此" class="headerlink" title="使用dlv验证是否如此"></a>使用dlv验证是否如此</h3><p><br></p><hr><p><br></p><p>参考：</p><p><a href="https://www.bilibili.com/video/BV1kL411p7mW" target="_blank" rel="noopener">深度探索Go语言：抢占式调度</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://dashen.tech/2020/09/15/sysmon-Runtime-Monitoring/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sysmon–Runtime Monitoring&lt;/a&gt;&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
    
      <category term="Go" scheme="http://www.dashen.tech/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>Rust的所有权与生命周期</title>
    <link href="http://www.dashen.tech/2021/07/04/Rust%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://www.dashen.tech/2021/07/04/Rust的所有权与生命周期/</id>
    <published>2021-07-04T15:43:46.000Z</published>
    <updated>2021-07-04T16:06:07.345Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV1564y1177A?t=2333" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1564y1177A?t=2333</a></p><p>借用 + 生命周期 = 痛苦之源</p><p><a href="https://zhuanlan.zhihu.com/p/104742696" target="_blank" rel="noopener">一个关于rust生命周期的问题分析</a></p><p>数据竞争： 线程安全的一生之敌</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1564y1177A?t=2333&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.bilibili.com/video/BV1564y1177A?t
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>使用FFmpeg将视频转换成音频</title>
    <link href="http://www.dashen.tech/2021/07/02/%E4%BD%BF%E7%94%A8FFmpeg%E5%B0%86%E8%A7%86%E9%A2%91%E8%BD%AC%E6%8D%A2%E6%88%90%E9%9F%B3%E9%A2%91/"/>
    <id>http://www.dashen.tech/2021/07/02/使用FFmpeg将视频转换成音频/</id>
    <published>2021-07-02T13:32:51.000Z</published>
    <updated>2021-07-03T10:33:39.773Z</updated>
    
    <content type="html"><![CDATA[<p>整理移动硬盘,发现了一段2017年,在西安回民街青旅,素昧平生的三人闲谈,当时为视频录制,时长近一小时40分钟,超过10G.</p><p>听了后感觉很有意思,但没必要使用视频,音频形式空间小,更合适. </p><p><br></p><p>(三人分别为: 作为合伙人兼旅店日常理事的东北青年A,一表人才, 但其健谈程度远不及另外两位; </p><p>在此无偿打工&amp;免费住宿的与我一般大小的青年B,川陕之交的汉中宁强人,在海南读大学; </p><p><a href="https://dashen.tech/2017/04/13/coming-going/" target="_blank" rel="noopener">结束第一份工作</a>, “无房车压力,有过万存款”的C. <a href="https://dashen.tech/2017/05/05/%E9%95%BF%E5%AE%89%E5%8F%A4%E6%84%8F/" target="_blank" rel="noopener">游历古都</a>,<a href="https://dashen.tech/2017/05/30/%E5%8D%8E%E5%B1%B1%E5%88%AB%E4%BC%A0/" target="_blank" rel="noopener">攀登高岳</a>, 便从汴州到杭州,开启了一段996生涯</p><p> 后半段适逢在天津大学读研的俄罗斯西西伯利亚留学生问路华山,和其交谈些许)</p><!-- <img src="使用FFmpeg将视频转换成音频/3.png" width = 90% height = 50% /> --><p><img src="http://qvnyxkfve.hd-bkt.clouddn.com/ffmpeg3" alt></p><p>苦于本地没有视频转音频工具,和同事闲聊时,说”不就是用FFmpeg一行命令的事吗”,豁然开朗.</p><p><br></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><br></p><p>使用 <code>brew install ffmpeg</code> 时,因为依赖过多,(尤其升级Big Sur后),中途可能会报错:</p><!-- <img src="使用FFmpeg将视频转换成音频/1.png" width = 90% height = 50% /> --><p><img src="http://qvnyxkfve.hd-bkt.clouddn.com/ffmpeg1" alt></p><p>这时仅需 <code>brew install 安装失败的依赖名称</code>, 而后再 <code>brew install ffmpeg</code>. 如此往复便可安装成功.</p><p><br></p><h3 id="将视频转换为音频"><a href="#将视频转换为音频" class="headerlink" title="将视频转换为音频"></a>将视频转换为音频</h3><p><br></p><p><code>ffmpeg -i 视频名.MOV -vn  -acodec libmp3lame -ac 2 -qscale:a 4 -ar 48000  想要转成的音频名.mp3</code></p><p>不消几分钟,便可转换成功</p><!-- <img src="使用FFmpeg将视频转换成音频/2.png" width = 90% height = 50% /> --><p><img src="http://qvnyxkfve.hd-bkt.clouddn.com/ffmpeg2" alt></p><p><br></p><h3 id="将音频切分成多段"><a href="#将音频切分成多段" class="headerlink" title="将音频切分成多段"></a>将音频切分成多段</h3><p><br></p><p>需要对音频资源进行裁剪,同样一行命令搞定:</p><p><code>ffmpeg  -i source.mp3  -vn -acodec copy -ss 00:00:00.00 -t 00:30:00 part1.mp3</code></p><ul><li><p>-ss 从 小时：分：秒 处开始切割 </p></li><li><p>-t 持续时间</p></li><li><p>-to 到 <code>小时：分：秒.毫秒</code> 处截止</p></li></ul><p><br></p><!-- <img src="使用FFmpeg将视频转换成音频/4.png" width = 90% height = 50% /> --><p><img src="http://qvnyxkfve.hd-bkt.clouddn.com/ffmpeg4" alt></p><p><br></p><h3 id="将音频转为文字"><a href="#将音频转为文字" class="headerlink" title="将音频转为文字"></a>将音频转为文字</h3><p><br></p><p>音频内容太长,想要转成文字. 目前有很多 提供在线音频转文字 功能的平台,但大多需要收费,或体验不佳.</p><p>多番比选尝试,发现 <a href="https://jianwai.youdao.com/index/0" target="_blank" rel="noopener">网易见外</a> 综合下来最佳</p><!-- <img src="使用FFmpeg将视频转换成音频/6.png" width = 90% height = 50% /> --><p><img src="http://qvnyxkfve.hd-bkt.clouddn.com/ffmpeg6" alt></p><p><br></p><p>那一年,我24岁,相当健谈,天南海北地和人闲聊. 从东北到海南,安康和汉中,天水与兰州,丽江与大理,西西伯利亚和叶尼塞河, 似是都曾去过居住多年.</p><p>几天旅途很快结束，我匆匆回归为一名打工人角色。此后几年，也曾在疲乏和劳累间隙,找寻片刻之机踏上旅途,但再未和陌生人,有如此契阔的闲谈.</p><p><br></p><blockquote><p>少年侠气，交结五都雄。肝胆洞，毛发耸。立谈中，死生同。一诺千金重。推翘勇，矜豪纵。轻盖拥，联飞鞚，斗城东。轰饮酒垆，春色浮寒瓮，吸海垂虹。闲呼鹰嗾犬，白羽摘雕弓，狡穴俄空。乐匆匆。<br><br>似黄粱梦，辞丹凤；明月共，漾孤蓬。官冗从，怀倥偬；落尘笼，簿书丛。鹖弁如云众，供粗用，忽奇功。笳鼓动，渔阳弄，思悲翁。不请长缨，系取天骄种，剑吼西风。恨登山临水，手寄七弦桐，目送归鸿。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理移动硬盘,发现了一段2017年,在西安回民街青旅,素昧平生的三人闲谈,当时为视频录制,时长近一小时40分钟,超过10G.&lt;/p&gt;
&lt;p&gt;听了后感觉很有意思,但没必要使用视频,音频形式空间小,更合适. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;(三人分别为: 作为合伙人兼旅
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.dashen.tech/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Adler32算法</title>
    <link href="http://www.dashen.tech/2021/06/30/Adler32%E7%AE%97%E6%B3%95/"/>
    <id>http://www.dashen.tech/2021/06/30/Adler32算法/</id>
    <published>2021-06-30T13:20:17.000Z</published>
    <updated>2021-06-30T13:20:51.940Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper</p><p>为什么需要Adler-32算法<br>关于校验码算法，我们最熟悉的算法应该是CRC校验算法，那么有了CRC校验算法之后，为什么还要提出这样一个算法呢？</p><p>这个算法比CRC算法更加快速，但是安全性不如CRC．换句话说，就是在安全性和速度之间做了一个权衡．</p><p><a href="https://www.jianshu.com/p/7e983c9c4d69" target="_blank" rel="noopener">https://www.jianshu.com/p/7e983c9c4d69</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ZooKeeper&lt;/p&gt;
&lt;p&gt;为什么需要Adler-32算法&lt;br&gt;关于校验码算法，我们最熟悉的算法应该是CRC校验算法，那么有了CRC校验算法之后，为什么还要提出这样一个算法呢？&lt;/p&gt;
&lt;p&gt;这个算法比CRC算法更加快速，但是安全性不如CRC．换句话说，就是在安全性
      
    
    </summary>
    
    
      <category term="算法" scheme="http://www.dashen.tech/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>哈希函数族谱</title>
    <link href="http://www.dashen.tech/2021/06/30/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0%E6%97%8F%E8%B0%B1/"/>
    <id>http://www.dashen.tech/2021/06/30/哈希函数族谱/</id>
    <published>2021-06-30T03:02:36.000Z</published>
    <updated>2021-07-08T01:34:22.683Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://halfrost.com/go_map_chapter_one/" target="_blank" rel="noopener">https://halfrost.com/go_map_chapter_one/</a></p><p><a href="https://blog.cyeam.com/hash/2018/05/28/hash-method" target="_blank" rel="noopener">https://blog.cyeam.com/hash/2018/05/28/hash-method</a></p><h3 id="DJB，也称Times33"><a href="#DJB，也称Times33" class="headerlink" title="DJB，也称Times33"></a>DJB，也称Times33</h3><p><br></p><p><a href="https://www.cnblogs.com/--zz/p/11141385.html" target="_blank" rel="noopener">Times33 DJB Hash 算法</a></p><h3 id="FNV"><a href="#FNV" class="headerlink" title="FNV"></a>FNV</h3><p><br></p><p>这个算法的厉害之处在于他可以保存状态。比如有个字符串ab，它的哈希值是a<em>E+b=HashAB，如果计算bc的哈希值，可以利用第一次计算的结果(HashAB-a</em>E)*E+c=HashBC。这么一个转换例子里是两个字符效果不明显，如果当前串是100个字符，后移一位的哈希算法性能就会快很多。</p><p><a href="https://blog.cyeam.com/hash/2014/07/28/fnv_md5" target="_blank" rel="noopener">https://blog.cyeam.com/hash/2014/07/28/fnv_md5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://halfrost.com/go_map_chapter_one/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://halfrost.com/go_map_chapter_one/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a 
      
    
    </summary>
    
    
  </entry>
  
</feed>
