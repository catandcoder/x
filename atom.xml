<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>清澄秋爽</title>
  
  <subtitle>苹果树下的思索者 书写是对思维的缓存</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dashen.tech/"/>
  <updated>2021-06-10T13:07:41.000Z</updated>
  <id>http://www.dashen.tech/</id>
  
  <author>
    <name>fliter</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Plan9汇编入门</title>
    <link href="http://www.dashen.tech/2022/01/10/Plan9%E6%B1%87%E7%BC%96%E5%85%A5%E9%97%A8/"/>
    <id>http://www.dashen.tech/2022/01/10/Plan9汇编入门/</id>
    <published>2022-01-10T14:05:16.000Z</published>
    <updated>2021-06-10T13:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xargin.com/plan9-assembly/" target="_blank" rel="noopener">Go 系列文章3 ：plan9 汇编入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/29892487" target="_blank" rel="noopener">Go 语言的实现为何使用Plan 9的汇编器?</a></p><p><a href="https://zh.wikipedia.org/wiki/%E8%B2%9D%E7%88%BE%E5%AF%A6%E9%A9%97%E5%AE%A4%E4%B9%9D%E8%99%9F%E8%A8%88%E7%95%AB" target="_blank" rel="noopener">贝尔实验室九号项目</a></p><p><a href="https://github.com/yangyuqian/technical-articles/blob/master/asm/golang-plan9-assembly-cn.md" target="_blank" rel="noopener">Golang中的Plan9汇编器</a></p><p><a href="https://www.zhihu.com/question/19706063/answer/22881507" target="_blank" rel="noopener">为什么 Plan9 在生产环境没有实际的应用，是因为应用程序匮乏的原因么？</a></p><p><a href="https://codereview.appspot.com/133740043/" target="_blank" rel="noopener">https://codereview.appspot.com/133740043/</a></p><p><a href="http://doc.cat-v.org/plan_9/4th_edition/papers/asm" target="_blank" rel="noopener">A Manual for the Plan 9 assembler</a></p><p><a href="https://mioto.me/2021/01/plan9-assembly/" target="_blank" rel="noopener">Plan9 汇编入门讲解</a></p><p><a href="https://blog.csdn.net/qq_42633819/article/details/106467502" target="_blank" rel="noopener">plan9汇编手册</a></p><p><a href="http://blog.studygolang.com/2013/05/asm_and_plan9_asm/" target="_blank" rel="noopener">汇编和PLAN9汇编</a></p><p><br></p><p><a href>src/internal/bytealg/index_amd64.s</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2018 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line">#include <span class="string">"go_asm.h"</span></span><br><span class="line">#include <span class="string">"textflag.h"</span></span><br><span class="line"></span><br><span class="line">TEXT ·Index(SB),NOSPLIT,$<span class="number">0</span><span class="number">-56</span></span><br><span class="line">MOVQ a_base+<span class="number">0</span>(FP), DI</span><br><span class="line">MOVQ a_len+<span class="number">8</span>(FP), DX</span><br><span class="line">MOVQ b_base+<span class="number">24</span>(FP), R8</span><br><span class="line">MOVQ b_len+<span class="number">32</span>(FP), AX</span><br><span class="line">MOVQ DI, R10</span><br><span class="line">LEAQ ret+<span class="number">48</span>(FP), R11</span><br><span class="line">JMP  indexbody&lt;&gt;(SB)</span><br><span class="line"></span><br><span class="line">TEXT ·IndexString(SB),NOSPLIT,$<span class="number">0</span><span class="number">-40</span></span><br><span class="line">MOVQ a_base+<span class="number">0</span>(FP), DI</span><br><span class="line">MOVQ a_len+<span class="number">8</span>(FP), DX</span><br><span class="line">MOVQ b_base+<span class="number">16</span>(FP), R8</span><br><span class="line">MOVQ b_len+<span class="number">24</span>(FP), AX</span><br><span class="line">MOVQ DI, R10</span><br><span class="line">LEAQ ret+<span class="number">32</span>(FP), R11</span><br><span class="line">JMP  indexbody&lt;&gt;(SB)</span><br><span class="line"></span><br><span class="line"><span class="comment">// AX: length of string, that we are searching for</span></span><br><span class="line"><span class="comment">// DX: length of string, in which we are searching</span></span><br><span class="line"><span class="comment">// DI: pointer to string, in which we are searching</span></span><br><span class="line"><span class="comment">// R8: pointer to string, that we are searching for</span></span><br><span class="line"><span class="comment">// R11: address, where to put return value</span></span><br><span class="line"><span class="comment">// Note: We want len in DX and AX, because PCMPESTRI implicitly consumes them</span></span><br><span class="line">TEXT indexbody&lt;&gt;(SB),NOSPLIT,$<span class="number">0</span></span><br><span class="line">CMPQ AX, DX</span><br><span class="line">JA fail</span><br><span class="line">CMPQ DX, $<span class="number">16</span></span><br><span class="line">JAE sse42</span><br><span class="line">no_sse42:</span><br><span class="line">CMPQ AX, $<span class="number">2</span></span><br><span class="line">JA   _3_or_more</span><br><span class="line">MOVW (R8), R8</span><br><span class="line">LEAQ <span class="number">-1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop2:</span><br><span class="line">MOVW (DI), SI</span><br><span class="line">CMPW SI,R8</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop2</span><br><span class="line">JMP fail</span><br><span class="line">_3_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">3</span></span><br><span class="line">JA   _4_or_more</span><br><span class="line">MOVW <span class="number">1</span>(R8), BX</span><br><span class="line">MOVW (R8), R8</span><br><span class="line">LEAQ <span class="number">-2</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop3:</span><br><span class="line">MOVW (DI), SI</span><br><span class="line">CMPW SI,R8</span><br><span class="line">JZ   partial_success3</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop3</span><br><span class="line">JMP fail</span><br><span class="line">partial_success3:</span><br><span class="line">MOVW <span class="number">1</span>(DI), SI</span><br><span class="line">CMPW SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop3</span><br><span class="line">JMP fail</span><br><span class="line">_4_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">4</span></span><br><span class="line">JA   _5_or_more</span><br><span class="line">MOVL (R8), R8</span><br><span class="line">LEAQ <span class="number">-3</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop4:</span><br><span class="line">MOVL (DI), SI</span><br><span class="line">CMPL SI,R8</span><br><span class="line">JZ   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop4</span><br><span class="line">JMP fail</span><br><span class="line">_5_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">7</span></span><br><span class="line">JA   _8_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVL <span class="number">-4</span>(R8)(AX*<span class="number">1</span>), BX</span><br><span class="line">MOVL (R8), R8</span><br><span class="line">loop5to7:</span><br><span class="line">MOVL (DI), SI</span><br><span class="line">CMPL SI,R8</span><br><span class="line">JZ   partial_success5to7</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop5to7</span><br><span class="line">JMP fail</span><br><span class="line">partial_success5to7:</span><br><span class="line">MOVL <span class="number">-4</span>(AX)(DI*<span class="number">1</span>), SI</span><br><span class="line">CMPL SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop5to7</span><br><span class="line">JMP fail</span><br><span class="line">_8_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">8</span></span><br><span class="line">JA   _9_or_more</span><br><span class="line">MOVQ (R8), R8</span><br><span class="line">LEAQ <span class="number">-7</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop8:</span><br><span class="line">MOVQ (DI), SI</span><br><span class="line">CMPQ SI,R8</span><br><span class="line">JZ   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop8</span><br><span class="line">JMP fail</span><br><span class="line">_9_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">15</span></span><br><span class="line">JA   _16_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVQ <span class="number">-8</span>(R8)(AX*<span class="number">1</span>), BX</span><br><span class="line">MOVQ (R8), R8</span><br><span class="line">loop9to15:</span><br><span class="line">MOVQ (DI), SI</span><br><span class="line">CMPQ SI,R8</span><br><span class="line">JZ   partial_success9to15</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop9to15</span><br><span class="line">JMP fail</span><br><span class="line">partial_success9to15:</span><br><span class="line">MOVQ <span class="number">-8</span>(AX)(DI*<span class="number">1</span>), SI</span><br><span class="line">CMPQ SI,BX</span><br><span class="line">JZ success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop9to15</span><br><span class="line">JMP fail</span><br><span class="line">_16_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">16</span></span><br><span class="line">JA   _17_or_more</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">LEAQ <span class="number">-15</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop16:</span><br><span class="line">MOVOU (DI), X2</span><br><span class="line">PCMPEQB X1, X2</span><br><span class="line">PMOVMSKB X2, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE   success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop16</span><br><span class="line">JMP fail</span><br><span class="line">_17_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">31</span></span><br><span class="line">JA   _32_or_more</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">MOVOU <span class="number">-16</span>(R8)(AX*<span class="number">1</span>), X0</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">loop17to31:</span><br><span class="line">MOVOU (DI), X2</span><br><span class="line">PCMPEQB X1,X2</span><br><span class="line">PMOVMSKB X2, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE   partial_success17to31</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop17to31</span><br><span class="line">JMP fail</span><br><span class="line">partial_success17to31:</span><br><span class="line">MOVOU <span class="number">-16</span>(AX)(DI*<span class="number">1</span>), X3</span><br><span class="line">PCMPEQB X0, X3</span><br><span class="line">PMOVMSKB X3, SI</span><br><span class="line">CMPQ  SI, $<span class="number">0xffff</span></span><br><span class="line">JE success</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop17to31</span><br><span class="line">JMP fail</span><br><span class="line"><span class="comment">// We can get here only when AVX2 is enabled and cutoff for indexShortStr is set to 63</span></span><br><span class="line"><span class="comment">// So no need to check cpuid</span></span><br><span class="line">_32_or_more:</span><br><span class="line">CMPQ AX, $<span class="number">32</span></span><br><span class="line">JA   _33_to_63</span><br><span class="line">VMOVDQU (R8), Y1</span><br><span class="line">LEAQ <span class="number">-31</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">loop32:</span><br><span class="line">VMOVDQU (DI), Y2</span><br><span class="line">VPCMPEQB Y1, Y2, Y3</span><br><span class="line">VPMOVMSKB Y3, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE   success_avx2</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop32</span><br><span class="line">JMP fail_avx2</span><br><span class="line">_33_to_63:</span><br><span class="line">LEAQ <span class="number">1</span>(DI)(DX*<span class="number">1</span>), DX</span><br><span class="line">SUBQ AX, DX</span><br><span class="line">VMOVDQU <span class="number">-32</span>(R8)(AX*<span class="number">1</span>), Y0</span><br><span class="line">VMOVDQU (R8), Y1</span><br><span class="line">loop33to63:</span><br><span class="line">VMOVDQU (DI), Y2</span><br><span class="line">VPCMPEQB Y1, Y2, Y3</span><br><span class="line">VPMOVMSKB Y3, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE   partial_success33to63</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop33to63</span><br><span class="line">JMP fail_avx2</span><br><span class="line">partial_success33to63:</span><br><span class="line">VMOVDQU <span class="number">-32</span>(AX)(DI*<span class="number">1</span>), Y3</span><br><span class="line">VPCMPEQB Y0, Y3, Y4</span><br><span class="line">VPMOVMSKB Y4, SI</span><br><span class="line">CMPL  SI, $<span class="number">0xffffffff</span></span><br><span class="line">JE success_avx2</span><br><span class="line">ADDQ $<span class="number">1</span>,DI</span><br><span class="line">CMPQ DI,DX</span><br><span class="line">JB loop33to63</span><br><span class="line">fail_avx2:</span><br><span class="line">VZEROUPPER</span><br><span class="line">fail:</span><br><span class="line">MOVQ $<span class="number">-1</span>, (R11)</span><br><span class="line">RET</span><br><span class="line">success_avx2:</span><br><span class="line">VZEROUPPER</span><br><span class="line">JMP success</span><br><span class="line">sse42:</span><br><span class="line">CMPB internal∕cpu·X86+const_offsetX86HasSSE42(SB), $<span class="number">1</span></span><br><span class="line">JNE no_sse42</span><br><span class="line">CMPQ AX, $<span class="number">12</span></span><br><span class="line"><span class="comment">// PCMPESTRI is slower than normal compare,</span></span><br><span class="line"><span class="comment">// so using it makes sense only if we advance 4+ bytes per compare</span></span><br><span class="line"><span class="comment">// This value was determined experimentally and is the ~same</span></span><br><span class="line"><span class="comment">// on Nehalem (first with SSE42) and Haswell.</span></span><br><span class="line">JAE _9_or_more</span><br><span class="line">LEAQ <span class="number">16</span>(R8), SI</span><br><span class="line">TESTW $<span class="number">0xff0</span>, SI</span><br><span class="line">JEQ no_sse42</span><br><span class="line">MOVOU (R8), X1</span><br><span class="line">LEAQ <span class="number">-15</span>(DI)(DX*<span class="number">1</span>), SI</span><br><span class="line">MOVQ $<span class="number">16</span>, R9</span><br><span class="line">SUBQ AX, R9 <span class="comment">// We advance by 16-len(sep) each iteration, so precalculate it into R9</span></span><br><span class="line">loop_sse42:</span><br><span class="line"><span class="comment">// 0x0c means: unsigned byte compare (bits 0,1 are 00)</span></span><br><span class="line"><span class="comment">// for equality (bits 2,3 are 11)</span></span><br><span class="line"><span class="comment">// result is not masked or inverted (bits 4,5 are 00)</span></span><br><span class="line"><span class="comment">// and corresponds to first matching byte (bit 6 is 0)</span></span><br><span class="line">PCMPESTRI $<span class="number">0x0c</span>, (DI), X1</span><br><span class="line"><span class="comment">// CX == 16 means no match,</span></span><br><span class="line"><span class="comment">// CX &gt; R9 means partial match at the end of the string,</span></span><br><span class="line"><span class="comment">// otherwise sep is at offset CX from X1 start</span></span><br><span class="line">CMPQ CX, R9</span><br><span class="line">JBE sse42_success</span><br><span class="line">ADDQ R9, DI</span><br><span class="line">CMPQ DI, SI</span><br><span class="line">JB loop_sse42</span><br><span class="line">PCMPESTRI $<span class="number">0x0c</span>, <span class="number">-1</span>(SI), X1</span><br><span class="line">CMPQ CX, R9</span><br><span class="line">JA fail</span><br><span class="line">LEAQ <span class="number">-1</span>(SI), DI</span><br><span class="line">sse42_success:</span><br><span class="line">ADDQ CX, DI</span><br><span class="line">success:</span><br><span class="line">SUBQ R10, DI</span><br><span class="line">MOVQ DI, (R11)</span><br><span class="line">RET</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xargin.com/plan9-assembly/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Go 系列文章3 ：plan9 汇编入门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhi
      
    
    </summary>
    
    
      <category term="Compiler" scheme="http://www.dashen.tech/tags/Compiler/"/>
    
  </entry>
  
  <entry>
    <title>搭建substrate开发环境</title>
    <link href="http://www.dashen.tech/2021/09/11/%E6%90%AD%E5%BB%BAsubstrate%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://www.dashen.tech/2021/09/11/搭建substrate开发环境/</id>
    <published>2021-09-11T13:44:30.000Z</published>
    <updated>2021-09-11T14:31:40.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/09/11/搭建substrate开发环境/-1.png" width="100%" height="100%"></p><p><br></p><h3 id="安装Substrate依赖"><a href="#安装Substrate依赖" class="headerlink" title="安装Substrate依赖"></a>安装Substrate依赖</h3><p><br></p><blockquote><p>curl <a href="https://getsubstrate.io/-o-" target="_blank" rel="noopener">https://getsubstrate.io/-o-</a> <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh</a> | bash</p></blockquote><details><br><summary><b>实际的shell为:</b></summary><br><br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># Copyright 2015-2020 Parity Technologies (UK) Ltd.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"linux-gnu"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="keyword">if</span> [[ $(whoami) == <span class="string">"root"</span> ]]; <span class="keyword">then</span></span><br><span class="line">MAKE_ME_ROOT=</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">MAKE_ME_ROOT=sudo</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/redhat-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Redhat Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/SuSE-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Suse Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/arch-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Arch Linux detected."</span></span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> pacman -Syu --needed --noconfirm cmake gcc openssl-1.0 pkgconf git clang</span><br><span class="line"><span class="built_in">export</span> OPENSSL_LIB_DIR=<span class="string">"/usr/lib/openssl-1.0"</span>;</span><br><span class="line"><span class="built_in">export</span> OPENSSL_INCLUDE_DIR=<span class="string">"/usr/include/openssl-1.0"</span></span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/mandrake-release ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Mandrake Linux detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">elif</span> [ -f /etc/debian_version ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Ubuntu/Debian Linux detected."</span></span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> apt update</span><br><span class="line"><span class="variable">$MAKE_ME_ROOT</span> apt install -y cmake pkg-config libssl-dev git gcc build-essential git clang libclang-dev</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Unknown Linux distribution."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"darwin"</span>* ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Mac OS (Darwin) detected."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">which</span> brew &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">brew update</span><br><span class="line">brew install openssl cmake llvm</span><br><span class="line"><span class="keyword">elif</span> [[ <span class="string">"<span class="variable">$OSTYPE</span>"</span> == <span class="string">"freebsd"</span>* ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"FreeBSD detected."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Unknown operating system."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"This OS is not supported with this script at present. Sorry."</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Please refer to https://github.com/paritytech/substrate for setup information."</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! <span class="built_in">which</span> rustup &gt;/dev/null 2&gt;&amp;1; <span class="keyword">then</span></span><br><span class="line">curl https://sh.rustup.rs -sSf | sh -s -- -y</span><br><span class="line"><span class="built_in">source</span> ~/.cargo/env</span><br><span class="line">rustup default stable</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">rustup update</span><br><span class="line">rustup default stable</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">rustup update nightly</span><br><span class="line">rustup target add wasm32-unknown-unknown --toolchain nightly</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">"<span class="variable">$1</span>"</span> == <span class="string">"--fast"</span> ]]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Skipped cargo install of 'substrate' and 'subkey'"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"You can install manually by cloning the https://github.com/paritytech/substrate repo,"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"and using cargo to install 'substrate' and 'subkey' from the repo path."</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">g=$(mktemp -d)</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/paritytech/substrate <span class="string">"<span class="variable">$g</span>"</span></span><br><span class="line"><span class="built_in">pushd</span> <span class="string">"<span class="variable">$g</span>"</span></span><br><span class="line">cargo install --force --path ./bin/node/cli <span class="comment">#substrate</span></span><br><span class="line">cargo install --force --path ./bin/utils/subkey subkey</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Run source ~/.cargo/env now to update environment"</span></span><br></pre></td></tr></table></figure><br><br></details><p><img src="/2021/09/11/搭建substrate开发环境/0.png" width="100%" height="100%"></p><p>(wasm-gc，可以压缩wasm二进制文件的大小)</p><p><img src="/2021/09/11/搭建substrate开发环境/1.png" width="100%" height="100%"></p><p><br></p><hr><p><br></p><h3 id="使用node-template"><a href="#使用node-template" class="headerlink" title="使用node template"></a>使用node template</h3><p><br></p><p><img src="/2021/09/11/搭建substrate开发环境/2.png" width="100%" height="100%"></p><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:substrate-developer-hub/substrate-node-template.git</p></blockquote><p>（cd substrate-node-template）</p><blockquote><p>cargo build –release</p></blockquote><p>(编译确实非常慢)</p><p><img src="/2021/09/11/搭建substrate开发环境/3.png" width="100%" height="100%"></p><blockquote><p>./target/release/node-template purge-chain –dev</p></blockquote><p><img src="/2021/09/11/搭建substrate开发环境/4.png" width="100%" height="100%"></p><blockquote><p>./target/release/node-template –dev  </p></blockquote><p><img src="/2021/09/11/搭建substrate开发环境/5.png" width="100%" height="100%"></p><p><br></p><p>可使用 <strong>./target/release/node-template -h </strong> 查看所有命令：</p><details><br><summary><b>./target/release/node-template -h:</b></summary><br><br><br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line">node-template 3.0.0-monthly-2021-09+1-3b547c9-aarch64-macos</span><br><span class="line"></span><br><span class="line">Substrate DevHub &lt;https://github.com/substrate-developer-hub&gt;</span><br><span class="line">A fresh FRAME-based Substrate node, ready <span class="keyword">for</span> hacking.</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">    node-template [FLAGS] [OPTIONS]</span><br><span class="line">    node-template &lt;SUBCOMMAND&gt;</span><br><span class="line"></span><br><span class="line">FLAGS:</span><br><span class="line">        --alice                            Shortcut <span class="keyword">for</span> `--name Alice --validator` with session keys <span class="keyword">for</span> `Alice` added</span><br><span class="line">                                           to keystore</span><br><span class="line">        --allow-private-ipv4               Always accept connecting to private IPv4 addresses (as specified <span class="keyword">in</span></span><br><span class="line">                                           [RFC1918](https://tools.ietf.org/html/rfc1918)). Enabled by default <span class="keyword">for</span></span><br><span class="line">                                           chains marked as <span class="string">"local"</span> <span class="keyword">in</span> their chain specifications, or when `--dev` is</span><br><span class="line">                                           passed</span><br><span class="line">        --bob                              Shortcut <span class="keyword">for</span> `--name Bob --validator` with session keys <span class="keyword">for</span> `Bob` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --charlie                          Shortcut <span class="keyword">for</span> `--name Charlie --validator` with session keys <span class="keyword">for</span> `Charlie`</span><br><span class="line">                                           added to keystore</span><br><span class="line">        --dave                             Shortcut <span class="keyword">for</span> `--name Dave --validator` with session keys <span class="keyword">for</span> `Dave` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --dev                              Specify the development chain</span><br><span class="line">        --<span class="built_in">disable</span>-log-color                Disable <span class="built_in">log</span> color output</span><br><span class="line">        --<span class="built_in">disable</span>-log-reloading            Disable feature to dynamically update and reload the <span class="built_in">log</span> filter</span><br><span class="line">        --discover-local                   Enable peer discovery on <span class="built_in">local</span> networks</span><br><span class="line">        --eve                              Shortcut <span class="keyword">for</span> `--name Eve --validator` with session keys <span class="keyword">for</span> `Eve` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --ferdie                           Shortcut <span class="keyword">for</span> `--name Ferdie --validator` with session keys <span class="keyword">for</span> `Ferdie` added</span><br><span class="line">                                           to keystore</span><br><span class="line">        --force-authoring                  Enable authoring even when offline</span><br><span class="line">    -h, --<span class="built_in">help</span>                             Prints <span class="built_in">help</span> information</span><br><span class="line">        --ipfs-server                      Join the IPFS network and serve transactions over bitswap protocol</span><br><span class="line">        --kademlia-disjoint-query-paths    Require iterative Kademlia DHT queries to use disjoint paths <span class="keyword">for</span> increased</span><br><span class="line">                                           resiliency <span class="keyword">in</span> the presence of potentially adversarial nodes</span><br><span class="line">        --light                            Experimental: Run <span class="keyword">in</span> light client mode</span><br><span class="line">        --no-grandpa                       Disable GRANDPA voter when running <span class="keyword">in</span> validator mode, otherwise <span class="built_in">disable</span> the</span><br><span class="line">                                           GRANDPA observer</span><br><span class="line">        --no-mdns                          Disable mDNS discovery</span><br><span class="line">        --no-private-ipv4                  Always forbid connecting to private IPv4 addresses (as specified <span class="keyword">in</span></span><br><span class="line">                                           [RFC1918](https://tools.ietf.org/html/rfc1918)), unless the address was</span><br><span class="line">                                           passed with `--reserved-nodes` or `--bootnodes`. Enabled by default <span class="keyword">for</span></span><br><span class="line">                                           chains marked as <span class="string">"live"</span> <span class="keyword">in</span> their chain specifications</span><br><span class="line">        --no-prometheus                    Do not expose a Prometheus exporter endpoint</span><br><span class="line">        --no-telemetry                     Disable connecting to the Substrate telemetry server</span><br><span class="line">        --one                              Shortcut <span class="keyword">for</span> `--name One --validator` with session keys <span class="keyword">for</span> `One` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --password-interactive             Use interactive shell <span class="keyword">for</span> entering the password used by the keystore</span><br><span class="line">        --prometheus-external              Expose Prometheus exporter on all interfaces</span><br><span class="line">        --reserved-only                    Whether to only synchronize the chain with reserved nodes</span><br><span class="line">        --rpc-external                     Listen to all RPC interfaces</span><br><span class="line">        --storage-chain                    Enable storage chain mode</span><br><span class="line">        --tmp                              Run a temporary node</span><br><span class="line">        --two                              Shortcut <span class="keyword">for</span> `--name Two --validator` with session keys <span class="keyword">for</span> `Two` added to</span><br><span class="line">                                           keystore</span><br><span class="line">        --unsafe-pruning                   Force start with unsafe pruning settings</span><br><span class="line">        --unsafe-rpc-external              Listen to all RPC interfaces</span><br><span class="line">        --unsafe-ws-external               Listen to all Websocket interfaces</span><br><span class="line">        --validator                        Enable validator mode</span><br><span class="line">    -V, --version                          Prints version information</span><br><span class="line">        --ws-external                      Listen to all Websocket interfaces</span><br><span class="line"></span><br><span class="line">OPTIONS:</span><br><span class="line">    -d, --base-path &lt;PATH&gt;                                       Specify custom base path</span><br><span class="line">        --bootnodes &lt;ADDR&gt;...                                    Specify a list of bootnodes</span><br><span class="line">        --chain &lt;CHAIN_SPEC&gt;                                     Specify the chain specification</span><br><span class="line">        --database &lt;DB&gt;</span><br><span class="line">            Select database backend to use [possible values: rocksdb, paritydb-experimental, auto]</span><br><span class="line"></span><br><span class="line">        --db-cache &lt;MiB&gt;                                         Limit the memory the database cache can use</span><br><span class="line">        --offchain-worker &lt;ENABLED&gt;</span><br><span class="line">            Should execute offchain workers on every block [default: WhenValidating]  [possible values:</span><br><span class="line">            Always, Never, WhenValidating]</span><br><span class="line">        --execution &lt;STRATEGY&gt;</span><br><span class="line">            The execution strategy that should be used by all execution contexts [possible values: Native,</span><br><span class="line">            Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-block-construction &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> constructing blocks [possible values:</span><br><span class="line">            Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-import-block &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">for</span> general block import (including locally</span><br><span class="line">            authored blocks) [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-offchain-worker &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> using an off-chain worker [possible values:</span><br><span class="line">            Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-other &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">while</span> not syncing, importing or constructing</span><br><span class="line">            blocks [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --execution-syncing &lt;STRATEGY&gt;</span><br><span class="line">            The means of execution used when calling into the runtime <span class="keyword">for</span> importing blocks as part of an initial sync</span><br><span class="line">            [possible values: Native, Wasm, Both, NativeElseWasm]</span><br><span class="line">        --<span class="keyword">in</span>-peers &lt;COUNT&gt;</span><br><span class="line">            Specify the maximum number of incoming connections we<span class="string">'re accepting [default: 25]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --enable-offchain-indexing &lt;ENABLE_OFFCHAIN_INDEXING&gt;</span></span><br><span class="line"><span class="string">            Enable Offchain Indexing API, which allows block import to write to Offchain DB</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --ipc-path &lt;PATH&gt;                                        Specify IPC RPC server path</span></span><br><span class="line"><span class="string">        --keep-blocks &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Specify the number of finalized blocks to keep in the database</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --keystore-path &lt;PATH&gt;                                   Specify custom keystore path</span></span><br><span class="line"><span class="string">        --keystore-uri &lt;keystore-uri&gt;                            Specify custom URIs to connect to for keystore-services</span></span><br><span class="line"><span class="string">        --listen-addr &lt;LISTEN_ADDR&gt;...                           Listen on this multiaddress</span></span><br><span class="line"><span class="string">    -l, --log &lt;LOG_PATTERN&gt;...</span></span><br><span class="line"><span class="string">            Sets a custom logging filter. Syntax is &lt;target&gt;=&lt;level&gt;, e.g. -lsync=debug</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --max-parallel-downloads &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of peers from which to ask for the same blocks in parallel [default: 5]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --max-runtime-instances &lt;max-runtime-instances&gt;          The size of the instances cache for each runtime</span></span><br><span class="line"><span class="string">        --name &lt;NAME&gt;                                            The human-readable name for this node</span></span><br><span class="line"><span class="string">        --node-key &lt;KEY&gt;                                         The secret key to use for libp2p networking</span></span><br><span class="line"><span class="string">        --node-key-file &lt;FILE&gt;</span></span><br><span class="line"><span class="string">            The file from which to read the node'</span>s secret key to use <span class="keyword">for</span> libp2p networking</span><br><span class="line"></span><br><span class="line">        --node-key-type &lt;TYPE&gt;</span><br><span class="line">            The <span class="built_in">type</span> of secret key to use <span class="keyword">for</span> libp2p networking [default: Ed25519]  [possible values:</span><br><span class="line">            Ed25519]</span><br><span class="line">        --out-peers &lt;COUNT&gt;</span><br><span class="line">            Specify the number of outgoing connections we<span class="string">'re trying to maintain [default: 25]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --password &lt;password&gt;</span></span><br><span class="line"><span class="string">            Password used by the keystore. This allows appending an extra user-defined secret to the seed</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --password-filename &lt;PATH&gt;                               File that contains the password used by the keystore</span></span><br><span class="line"><span class="string">        --pool-kbytes &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of kilobytes of all transactions stored in the pool [default: 20480]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --pool-limit &lt;COUNT&gt;</span></span><br><span class="line"><span class="string">            Maximum number of transactions in the transaction pool [default: 8192]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --port &lt;PORT&gt;                                            Specify p2p protocol TCP port</span></span><br><span class="line"><span class="string">        --prometheus-port &lt;PORT&gt;                                 Specify Prometheus exporter TCP Port</span></span><br><span class="line"><span class="string">        --pruning &lt;PRUNING_MODE&gt;</span></span><br><span class="line"><span class="string">            Specify the state pruning mode, a number of blocks to keep or '</span>archive<span class="string">'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        --public-addr &lt;PUBLIC_ADDR&gt;...</span></span><br><span class="line"><span class="string">            The public address that other nodes will use to connect to it. This can be used if there'</span>s a proxy <span class="keyword">in</span> front</span><br><span class="line">            of this node</span><br><span class="line">        --reserved-nodes &lt;ADDR&gt;...                               Specify a list of reserved node addresses</span><br><span class="line">        --rpc-cors &lt;ORIGINS&gt;</span><br><span class="line">            Specify browser Origins allowed to access the HTTP &amp; WS RPC servers</span><br><span class="line"></span><br><span class="line">        --rpc-http-threads &lt;COUNT&gt;                               Size of the RPC HTTP server thread pool</span><br><span class="line">        --rpc-max-payload &lt;rpc-max-payload&gt;</span><br><span class="line">            Set the the maximum RPC payload size <span class="keyword">for</span> both requests and responses (both http and ws), <span class="keyword">in</span> megabytes.</span><br><span class="line">            Default is 15MiB</span><br><span class="line">        --rpc-methods &lt;METHOD SET&gt;</span><br><span class="line">            RPC methods to expose. [default: Auto]  [possible values: Auto, Safe, Unsafe]</span><br><span class="line"></span><br><span class="line">        --rpc-port &lt;PORT&gt;                                        Specify HTTP RPC server TCP port</span><br><span class="line">        --state-cache-size &lt;Bytes&gt;                               Specify the state cache size [default: 67108864]</span><br><span class="line">        --sync &lt;SYNC_MODE&gt;                                       Blockchain syncing mode [default: Full]</span><br><span class="line">        --telemetry-url &lt;URL VERBOSITY&gt;...                       The URL of the telemetry server to connect to</span><br><span class="line">        --tracing-receiver &lt;RECEIVER&gt;</span><br><span class="line">            Receiver to process tracing messages [default: Log]  [possible values: Log]</span><br><span class="line"></span><br><span class="line">        --tracing-targets &lt;TARGETS&gt;</span><br><span class="line">            Sets a custom profiling filter. Syntax is the same as <span class="keyword">for</span> logging: &lt;target&gt;=&lt;level&gt;</span><br><span class="line"></span><br><span class="line">        --wasm-execution &lt;METHOD&gt;</span><br><span class="line">            Method <span class="keyword">for</span> executing Wasm runtime code [default: Compiled]  [possible values: interpreted-i-know-</span><br><span class="line">            what-i-do, compiled]</span><br><span class="line">        --wasm-runtime-overrides &lt;PATH&gt;                          Specify the path <span class="built_in">where</span> <span class="built_in">local</span> WASM runtimes are stored</span><br><span class="line">        --ws-max-connections &lt;COUNT&gt;                             Maximum number of WS RPC server connections</span><br><span class="line">        --ws-port &lt;PORT&gt;                                         Specify WebSockets RPC server TCP port</span><br><span class="line"></span><br><span class="line">SUBCOMMANDS:</span><br><span class="line">    benchmark        Benchmark runtime pallets.</span><br><span class="line">    build-spec       Build a chain specification</span><br><span class="line">    check-block      Validate blocks</span><br><span class="line">    <span class="built_in">export</span>-blocks    Export blocks</span><br><span class="line">    <span class="built_in">export</span>-state     Export the state of a given block into a chain spec</span><br><span class="line">    <span class="built_in">help</span>             Prints this message or the <span class="built_in">help</span> of the given subcommand(s)</span><br><span class="line">    import-blocks    Import blocks</span><br><span class="line">    key              Key management cli utilities</span><br><span class="line">    purge-chain      Remove the whole chain</span><br><span class="line">    revert           Revert the chain to a previous state</span><br></pre></td></tr></table></figure><br><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2021/09/11/搭建substrate开发环境/-1.png&quot; width=&quot;100%&quot; height=&quot;100%&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装Substrate依赖&quot;&gt;&lt;a href=&quot;#安装Substrate依赖&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL事务隔离级别的实现原理</title>
    <link href="http://www.dashen.tech/2021/08/23/MySQL%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://www.dashen.tech/2021/08/23/MySQL事务隔离级别的实现原理/</id>
    <published>2021-08-23T14:58:07.000Z</published>
    <updated>2021-08-23T14:58:07.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sysctl.conf 系统参数详解</title>
    <link href="http://www.dashen.tech/2021/08/23/sysctl-conf-%E7%B3%BB%E7%BB%9F%E5%8F%82%E6%95%B0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.dashen.tech/2021/08/23/sysctl-conf-系统参数详解/</id>
    <published>2021-08-23T14:46:41.000Z</published>
    <updated>2021-08-23T14:52:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>vim /etc/sysctl.conf</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"># /etc/sysctl.conf - Configuration file for setting system variables</span><br><span class="line"># See /etc/sysctl.d/ for additional system variables.</span><br><span class="line"># See sysctl.conf (5) for information.</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">#kernel.domainname = example.com</span><br><span class="line"></span><br><span class="line"># Uncomment the following to stop low-level messages on console</span><br><span class="line">#kernel.printk = 3 4 1 3</span><br><span class="line"></span><br><span class="line">##############################################################3</span><br><span class="line"># Functions previously found in netbase</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line"># Uncomment the next two lines to enable Spoof protection (reverse-path filter)</span><br><span class="line"># Turn on Source Address Verification in all interfaces to</span><br><span class="line"># prevent some spoofing attacks</span><br><span class="line">#net.ipv4.conf.default.rp_filter=1</span><br><span class="line">#net.ipv4.conf.all.rp_filter=1</span><br><span class="line"></span><br><span class="line"># Uncomment the next line to enable TCP/IP SYN cookies</span><br><span class="line"># See http://lwn.net/Articles/277146/</span><br><span class="line"># Note: This may impact IPv6 TCP sessions too</span><br><span class="line">#net.ipv4.tcp_syncookies=1</span><br><span class="line"></span><br><span class="line"># Uncomment the next line to enable packet forwarding for IPv4</span><br><span class="line"># 爽哥于2019.10.31修改,为了能搭建k8s</span><br><span class="line">net.ipv4.ip_forward=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Uncomment the next line to enable packet forwarding for IPv6</span><br><span class="line">#  Enabling this option disables Stateless Address Autoconfiguration</span><br><span class="line">#  based on Router Advertisements for this host</span><br><span class="line">#net.ipv6.conf.all.forwarding=1</span><br><span class="line"></span><br><span class="line">###################################################################</span><br><span class="line"># Additional settings - these settings can improve the network</span><br><span class="line"># security of the host and prevent against some network attacks</span><br><span class="line"># including spoofing attacks and man in the middle attacks through</span><br><span class="line"># redirection. Some network environments, however, require that these</span><br><span class="line"># settings are disabled so review and enable them as needed.</span><br><span class="line">#</span><br><span class="line"># Do not accept ICMP redirects (prevent MITM attacks)</span><br><span class="line">#net.ipv4.conf.all.accept_redirects = 0</span><br><span class="line">#net.ipv6.conf.all.accept_redirects = 0</span><br><span class="line"># _or_</span><br><span class="line"># Accept ICMP redirects only for gateways listed in our default</span><br><span class="line"># gateway list (enabled by default)</span><br><span class="line"># net.ipv4.conf.all.secure_redirects = 1</span><br><span class="line">#</span><br><span class="line"># Do not send ICMP redirects (we are not a router)</span><br><span class="line">#net.ipv4.conf.all.send_redirects = 0</span><br><span class="line">#</span><br><span class="line"># Do not accept IP source route packets (we are not a router)</span><br><span class="line">#net.ipv4.conf.all.accept_source_route = 0</span><br><span class="line">#net.ipv6.conf.all.accept_source_route = 0</span><br><span class="line">#</span><br><span class="line"># Log Martian Packets</span><br><span class="line">#net.ipv4.conf.all.log_martians = 1</span><br><span class="line">#</span><br><span class="line">kernel.sysrq = <span class="number">1</span></span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = <span class="number">1</span></span><br><span class="line">net.ipv6.conf.<span class="keyword">default</span>.disable_ipv6 = <span class="number">1</span></span><br><span class="line">kernel.printk = <span class="number">5</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_40901788/article/details/83586965" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40901788/article/details/83586965</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vim /etc/sysctl.conf&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WebHook及其在github中的使用</title>
    <link href="http://www.dashen.tech/2021/08/16/WebHook%E5%8F%8A%E5%85%B6%E5%9C%A8github%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.dashen.tech/2021/08/16/WebHook及其在github中的使用/</id>
    <published>2021-08-16T02:52:09.000Z</published>
    <updated>2021-08-16T06:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.baidu.com/s?tn=50000021_hao_pg&amp;ie=utf-8&amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzrj6vPjnzrj6zPzuW5y99U1Dznzu9m1YYrjT4n161nHb&amp;ssl_sample=normal&amp;srcqid=5551225567663151461&amp;H123Tmp=nunew7&amp;word=git+webhook" target="_blank" rel="noopener">https://www.baidu.com/s?tn=50000021_hao_pg&amp;ie=utf-8&amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzrj6vPjnzrj6zPzuW5y99U1Dznzu9m1YYrjT4n161nHb&amp;ssl_sample=normal&amp;srcqid=5551225567663151461&amp;H123Tmp=nunew7&amp;word=git+webhook</a></p><p><a href="https://www.jianshu.com/p/00bc0323e83f" target="_blank" rel="noopener">https://www.jianshu.com/p/00bc0323e83f</a></p><p><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;srcqid=5551225567663151461&amp;tn=50000021_hao_pg&amp;wd=Webhook&amp;oq=Webhook&amp;rsv_pq=ffa28aa1000070fa&amp;rsv_t=e753U4%2BdnHqoNMoWILZeUy5h5NoGUXyz5wi%2FqT9K1Q51tpZXugC5CsosbjhGiCiJ3TkA6oNP&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=0&amp;rsv_btype=t&amp;rsv_jmp=slow" target="_blank" rel="noopener">https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;srcqid=5551225567663151461&amp;tn=50000021_hao_pg&amp;wd=Webhook&amp;oq=Webhook&amp;rsv_pq=ffa28aa1000070fa&amp;rsv_t=e753U4%2BdnHqoNMoWILZeUy5h5NoGUXyz5wi%2FqT9K1Q51tpZXugC5CsosbjhGiCiJ3TkA6oNP&amp;rqlang=cn&amp;rsv_dl=tb&amp;rsv_enter=0&amp;rsv_btype=t&amp;rsv_jmp=slow</a></p><p><a href="https://www.jianshu.com/p/9829986b4363" target="_blank" rel="noopener">https://www.jianshu.com/p/9829986b4363</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.baidu.com/s?tn=50000021_hao_pg&amp;amp;ie=utf-8&amp;amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzrj6vPjnzrj6zPzuW5y99U1Dznzu9m1YYrjT4n161n
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.dashen.tech/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Go安全扫描工具</title>
    <link href="http://www.dashen.tech/2021/08/13/Go%E5%AE%89%E5%85%A8%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
    <id>http://www.dashen.tech/2021/08/13/Go安全扫描工具/</id>
    <published>2021-08-13T13:38:19.000Z</published>
    <updated>2021-08-16T06:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/securego/gosec" target="_blank" rel="noopener">Gosec</a>是一个通过扫描Go AST来检查源代码是否存在安全问题的开源项目</p><p><br></p><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><p><br></p><p><a href="https://github.com/securego/gosec/releases" target="_blank" rel="noopener">在此下载</a>最新的release，如<em>gosec_2.8.1_darwin_amd64.tar.gz</em>，解压后，将二进制文件移动到<strong>GOBIN</strong>目录下</p><p><br></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><br></p><p>进入想要扫描的代码目录下， 执行 <code>gosec -fmt=json ./...</code>   </p><p>该命令的意思是：检测当前目录下的所有的代码，并以Json的格式输出到终端。</p><p>出去json，支持的格式还有<code>text, yaml, csv, sonarqube, JUnit XML, html</code></p><p><br></p><p>可使用<code>gosec -fmt=json -out=自定义文件名.json ./...</code>，将扫描结果输出到指定文件</p><p><br></p><p>可使用 <code>gosec -include=G101,G203,G401 ./...</code>指定使用某几个规则</p><p>可使用 <code>gosec -exclude=G303 ./...</code>排除了某几个规则</p><p><br></p><p>具体规则如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">◈ G101：查找硬编码凭证</span><br><span class="line"></span><br><span class="line">◈ G102：绑定到所有接口</span><br><span class="line"></span><br><span class="line">◈ G103：审计 unsafe 块的使用</span><br><span class="line"></span><br><span class="line">◈ G104：审计未检查的错误</span><br><span class="line"></span><br><span class="line">◈ G106：审计 ssh.InsecureIgnoreHostKey 的使用</span><br><span class="line"></span><br><span class="line">◈ G107: 提供给 HTTP 请求的 url 作为污点输入</span><br><span class="line"></span><br><span class="line">◈ G108: /debug/pprof 上自动暴露的剖析端点</span><br><span class="line"></span><br><span class="line">◈ G109: strconv.Atoi 转换到 <span class="keyword">int16</span> 或 <span class="keyword">int32</span> 时潜在的整数溢出</span><br><span class="line"></span><br><span class="line">◈ G110: 潜在的通过解压炸弹实现的 DoS</span><br><span class="line"></span><br><span class="line">◈ G201：SQL 查询构造使用格式字符串</span><br><span class="line"></span><br><span class="line">◈ G202：SQL 查询构造使用字符串连接</span><br><span class="line"></span><br><span class="line">◈ G203：在 HTML 模板中使用未转义的数据</span><br><span class="line"></span><br><span class="line">◈ G204：审计命令执行情况</span><br><span class="line"></span><br><span class="line">◈ G301：创建目录时文件权限分配不合理</span><br><span class="line"></span><br><span class="line">◈ G302：使用 chmod 时文件权限分配不合理</span><br><span class="line"></span><br><span class="line">◈ G303：使用可预测的路径创建临时文件</span><br><span class="line"></span><br><span class="line">◈ G304：通过污点输入提供的文件路径</span><br><span class="line"></span><br><span class="line">◈ G305：提取 zip/tar 文档时遍历文件</span><br><span class="line"></span><br><span class="line">◈ G306: 写到新文件时文件权限分配不合理</span><br><span class="line"></span><br><span class="line">◈ G307: 把返回错误的函数放到 <span class="keyword">defer</span> 内</span><br><span class="line"></span><br><span class="line">◈ G401：检测 DES、RC4、MD5 或 SHA1 的使用</span><br><span class="line"></span><br><span class="line">◈ G402：查找错误的 TLS 连接设置</span><br><span class="line"></span><br><span class="line">◈ G403：确保最小 RSA 密钥长度为 <span class="number">2048</span> 位</span><br><span class="line"></span><br><span class="line">◈ G404：不安全的随机数源（rand）</span><br><span class="line"></span><br><span class="line">◈ G501：导入黑名单列表：crypto/md5</span><br><span class="line"></span><br><span class="line">◈ G502：导入黑名单列表：crypto/des</span><br><span class="line"></span><br><span class="line">◈ G503：导入黑名单列表：crypto/rc4</span><br><span class="line"></span><br><span class="line">◈ G504：导入黑名单列表：net/http/cgi</span><br><span class="line"></span><br><span class="line">◈ G505：导入黑名单列表：crypto/sha1</span><br><span class="line"></span><br><span class="line">◈ G601: 在 <span class="keyword">range</span> 语句中使用隐式的元素别名</span><br></pre></td></tr></table></figure><p><br></p><hr><p><br></p><p>参考：</p><p><a href="https://www.likecs.com/show-125579.html" target="_blank" rel="noopener">免费开源的代码审计工具 Gosec 入门使用</a></p><p><a href="https://blog.csdn.net/F8qG7f9YD02Pe/article/details/108924267" target="_blank" rel="noopener">使用 gosec 检查 Go 代码中的安全问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/securego/gosec&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gosec&lt;/a&gt;是一个通过扫描Go AST来检查源代码是否存在安全问题的开源项目&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
    
      <category term="Tools" scheme="http://www.dashen.tech/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>开源人物志</title>
    <link href="http://www.dashen.tech/2021/08/01/%E5%BC%80%E6%BA%90%E4%BA%BA%E7%89%A9%E5%BF%97/"/>
    <id>http://www.dashen.tech/2021/08/01/开源人物志/</id>
    <published>2021-08-01T02:59:26.000Z</published>
    <updated>2021-08-01T03:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Richard-Matthew-Stallman"><a href="#Richard-Matthew-Stallman" class="headerlink" title="Richard Matthew Stallman"></a>Richard Matthew Stallman</h2><p><br></p><font color="#FF00FF"><p>贡献领域: </p></font> Emacs, <a href>GCC</a>, <a href="https://dashen.tech/2019/10/30/%E7%A5%9E%E5%99%A8gdb/" target="_blank" rel="noopener">GDB</a><p></p><p><br></p><p>中文一般译作”理查德·斯托曼”,Geek圈内一般简称”RMS”</p><p>1953年生于美国,自由软件运动的精神领袖、GNU计划以及自由软件基金会（Free Software Foundation）的创立者、著名黑客</p><p><img src="/2021/08/01/开源人物志/rms1.jpeg" width="80%" height="100%"></p><p>所写作的 <em>GNU通用公共许可证（GPL）</em> 是世上最广为采用的自由软件许可证</p><p><img src="/2021/08/01/开源人物志/rms.png" width="80%" height="100%"></p><p>别出心裁,创造了<a href="https://baike.baidu.com/item/%E8%91%97%E4%BD%90%E6%9D%83/3339812?fromtitle=Copyleft" target="_blank" rel="noopener"><em>著佐权(Copyleft)</em></a> 这一概念, 即可以拷贝,可以修改,可以出售, 只是有一条:源代码所有的改进和修改必须向每个用户公开,所有用户都可以获得改动后的源码. Copyleft保证了自由软件传播的延续性</p><p><img src="/2021/08/01/开源人物志/rms2.png" width="80%" height="100%"></p><p>有和RMS用同款键盘   ( =•ω•= )</p><p><img src="/2021/08/01/开源人物志/rms3.png" width="80%" height="100%"></p><p><br></p><p><a href="http://www.ruanyifeng.com/blog/2012/01/richard_stallman_was_right_all_along.html" target="_blank" rel="noopener">理查德·斯托曼一直是对的</a></p><p><br></p><hr><p><br></p><h2 id="Fabrice-Bellard"><a href="#Fabrice-Bellard" class="headerlink" title="Fabrice Bellard"></a>Fabrice Bellard</h2><p><br></p><font color="#FF00FF"><p>贡献领域: </p></font>贝拉公式(最快圆周率算法),TCCBOOT,TCC（微型C编译器）<br>,FFMPEG<p></p><p><br></p><p>中文一般译作”法布里斯·贝拉”</p><p>1972年生于法国</p><p><a href="https://www.zhihu.com/question/28388113" target="_blank" rel="noopener">Fabrice Bellard 是个什么水平的程序员？</a></p><hr><p><br></p><h2 id="Chris-Lattner"><a href="#Chris-Lattner" class="headerlink" title="Chris Lattner"></a>Chris Lattner</h2><p><br></p><font color="#FF00FF"><p>贡献领域: </p></font>LLVM项目主要作者之一,Clang编译器作者,Swift之父<p></p><p><br></p><p>中文一般译作”克里斯·拉特纳”</p><p>1978年生于美国</p><p><a href="http://www.nondot.org/sabre/" target="_blank" rel="noopener">Chris Lattner’s Homepage</a></p><p><a href="https://github.com/lattner" target="_blank" rel="noopener">github.com/lattner</a></p><hr><p><br></p><p><a href="https://www.facesofopensource.com/" target="_blank" rel="noopener">开源人物</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Richard-Matthew-Stallman&quot;&gt;&lt;a href=&quot;#Richard-Matthew-Stallman&quot; class=&quot;headerlink&quot; title=&quot;Richard Matthew Stallman&quot;&gt;&lt;/a&gt;Richard Matthe
      
    
    </summary>
    
    
      <category term="书摘/影评" scheme="http://www.dashen.tech/tags/%E4%B9%A6%E6%91%98-%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(13)</title>
    <link href="http://www.dashen.tech/2021/07/28/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-13/"/>
    <id>http://www.dashen.tech/2021/07/28/Rust-vs-Go-常用语法对比-13/</id>
    <published>2021-07-27T16:43:58.000Z</published>
    <updated>2021-07-18T07:16:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="241-Yield-priority-to-other-threads"><a href="#241-Yield-priority-to-other-threads" class="headerlink" title="241. Yield priority to other threads"></a>241. <font color="0c0a3e">Yield priority to other threads</font></h3><blockquote><p>Explicitly decrease the priority of the current process, so that other execution threads have a better chance to execute now. Then resume normal execution and call function <strong>busywork</strong>.</p></blockquote><p><em>将优先权让给其他线程</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"runtime"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"aaa"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"bbb"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"ccc"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"ddd"</span>)</span><br><span class="line"><span class="keyword">go</span> fmt.Println(<span class="string">"eee"</span>)</span><br><span class="line"></span><br><span class="line">runtime.Gosched()</span><br><span class="line">busywork()</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">100</span> * time.Millisecond)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">busywork</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>After Gosched, the execution of the current goroutine resumes automatically.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">aaa</span><br><span class="line">eee</span><br><span class="line">ccc</span><br><span class="line">bbb</span><br><span class="line">ddd</span><br><span class="line">main</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::std::thread::yield_now();</span><br><span class="line">busywork();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="242-Iterate-over-a-set"><a href="#242-Iterate-over-a-set" class="headerlink" title="242. Iterate over a set"></a>242. <font color="0c0a3e">Iterate over a set</font></h3><blockquote><p>Call a function f on each element e of a set x.</p></blockquote><p><em>迭代一个集合</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// declare a Set (implemented as a map)</span></span><br><span class="line">x := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add some elements</span></span><br><span class="line">x[<span class="string">"A"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"B"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"C"</span>] = <span class="literal">true</span></span><br><span class="line">x[<span class="string">"D"</span>] = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// remove an element</span></span><br><span class="line"><span class="built_in">delete</span>(x, <span class="string">"C"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e := <span class="keyword">range</span> x &#123;</span><br><span class="line">f(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(e T)</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"contains element %v \n"</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">contains element A </span><br><span class="line">contains element B </span><br><span class="line">contains element D</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = HashSet::new();</span><br><span class="line">    x.insert(<span class="string">"a"</span>);</span><br><span class="line">    x.insert(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> &amp;x &#123;</span><br><span class="line">        f(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(s: &amp;&amp;<span class="built_in">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Element &#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>x is a HashSet</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Element a</span><br><span class="line">Element b</span><br></pre></td></tr></table></figure><p><br></p><h3 id="243-Print-list"><a href="#243-Print-list" class="headerlink" title="243. Print list"></a>243. <font color="0c0a3e">Print list</font></h3><blockquote><p>Print the contents of list a on the standard output.</p></blockquote><p><em>打印 list</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"aa"</span>, <span class="string">"bb"</span>&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">First <span class="keyword">string</span></span><br><span class="line">Last  <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line">x := Person&#123;</span><br><span class="line">First: <span class="string">"Jane"</span>,</span><br><span class="line">Last:  <span class="string">"Doe"</span>,</span><br><span class="line">&#125;</span><br><span class="line">y := Person&#123;</span><br><span class="line">First: <span class="string">"John"</span>,</span><br><span class="line">Last:  <span class="string">"Doe"</span>,</span><br><span class="line">&#125;</span><br><span class="line">a := []Person&#123;x, y&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">x, y := <span class="number">11</span>, <span class="number">22</span></span><br><span class="line">a := []*<span class="keyword">int</span>&#123;&amp;x, &amp;y&#125;</span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">11</span> <span class="number">22</span> <span class="number">33</span>]</span><br><span class="line">[aa bb]</span><br><span class="line">[&#123;Jane Doe&#125; &#123;John Doe&#125;]</span><br><span class="line">[<span class="number">0xc000018080</span> <span class="number">0xc000018088</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22, 33]</code></p><p><br></p><h3 id="244-Print-map"><a href="#244-Print-map" class="headerlink" title="244. Print map"></a>244. <font color="0c0a3e">Print map</font></h3><blockquote><p>Print the contents of map m to the standard output: keys and values.</p></blockquote><p><em>打印 map</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"eleven"</span>:     <span class="number">11</span>,</span><br><span class="line"><span class="string">"twenty-two"</span>: <span class="number">22</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">x, y := <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]*<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="string">"seven"</span>: &amp;x,</span><br><span class="line"><span class="string">"eight"</span>: &amp;y,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">map</span>[eleven:<span class="number">11</span> twenty-two:<span class="number">22</span>]</span><br><span class="line"><span class="keyword">map</span>[eight:<span class="number">0xc000100040</span> seven:<span class="number">0xc000100028</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m = HashMap::new();</span><br><span class="line">    m.insert(<span class="string">"Áron"</span>.to_string(), <span class="number">23</span>);</span><br><span class="line">    m.insert(<span class="string">"Béla"</span>.to_string(), <span class="number">35</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{&quot;Béla&quot;: 35, &quot;Áron&quot;: 23}</code></p><p><br></p><h3 id="245-Print-value-of-custom-type"><a href="#245-Print-value-of-custom-type" class="headerlink" title="245. Print value of custom type"></a>245. <font color="0c0a3e">Print value of custom type</font></h3><blockquote><p>Print the value of object x having custom type T, for log or debug.</p></blockquote><p><em>打印自定义类型的值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// T represents a tank. It doesn't implement fmt.Stringer.</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">struct</span> &#123;</span><br><span class="line">name      <span class="keyword">string</span></span><br><span class="line">weight    <span class="keyword">int</span></span><br><span class="line">firePower <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person implement fmt.Stringer.</span></span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">FirstName   <span class="keyword">string</span></span><br><span class="line">LastName    <span class="keyword">string</span></span><br><span class="line">YearOfBirth <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Person)</span> <span class="title">String</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"%s %s, born %d"</span>, p.FirstName, p.LastName, p.YearOfBirth)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">x := T&#123;</span><br><span class="line">name:      <span class="string">"myTank"</span>,</span><br><span class="line">weight:    <span class="number">100</span>,</span><br><span class="line">firePower: <span class="number">90</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">x := Person&#123;</span><br><span class="line">FirstName:   <span class="string">"John"</span>,</span><br><span class="line">LastName:    <span class="string">"Doe"</span>,</span><br><span class="line">YearOfBirth: <span class="number">1958</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Will be more relevant if T implements fmt.Stringer</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;myTank <span class="number">100</span> <span class="number">90</span>&#125;</span><br><span class="line">John Doe, born <span class="number">1958</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// T represents a tank</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span>&lt;<span class="symbol">'a</span>&gt; &#123;</span><br><span class="line">    name: &amp;<span class="symbol">'a</span> <span class="built_in">str</span>,</span><br><span class="line">    weight: &amp;<span class="symbol">'a</span> <span class="built_in">i32</span>,</span><br><span class="line">    fire_power: &amp;<span class="symbol">'a</span> <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = T &#123;</span><br><span class="line">        name: <span class="string">"mytank"</span>,</span><br><span class="line">        weight: &amp;<span class="number">100</span>,</span><br><span class="line">        fire_power: &amp;<span class="number">90</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Implement fmt::Debug or fmt::Display for T</em></p><p><code>T { name: &quot;mytank&quot;, weight: 100, fire_power: 90 }</code></p><p><br></p><h3 id="246-Count-distinct-elements"><a href="#246-Count-distinct-elements" class="headerlink" title="246. Count distinct elements"></a>246. <font color="0c0a3e">Count distinct elements</font></h3><blockquote><p>Set c to the number of distinct elements in list items.</p></blockquote><p><em>计算不同的元素的数量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">items := []T&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"b"</span>, <span class="string">"aaa"</span>, <span class="string">"c"</span>, <span class="string">"a"</span>, <span class="string">"d"</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">"items has"</span>, <span class="built_in">len</span>(items), <span class="string">"elements"</span>)</span><br><span class="line"></span><br><span class="line">distinct := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items &#123;</span><br><span class="line">distinct[v] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">c := <span class="built_in">len</span>(distinct)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"items has"</span>, c, <span class="string">"distinct elements"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items has <span class="number">7</span> elements</span><br><span class="line">items has <span class="number">5</span> distinct elements</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> itertools::Itertools;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="string">"víz"</span>, <span class="string">"árvíz"</span>, <span class="string">"víz"</span>, <span class="string">"víz"</span>, <span class="string">"ár"</span>, <span class="string">"árvíz"</span>];</span><br><span class="line">    <span class="keyword">let</span> c = items.iter().unique().count();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3</code></p><p><br></p><h3 id="247-Filter-list-in-place"><a href="#247-Filter-list-in-place" class="headerlink" title="247. Filter list in-place"></a>247. <font color="0c0a3e">Filter list in-place</font></h3><blockquote></blockquote><p>Remove all the elements from list x that don’t satisfy the predicate p, without allocating a new list.<br>Keep all the elements that do satisfy p.<br>For languages that don’t have mutable lists, refer to idiom #57 instead.</p><p><em>就地筛选列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">x[j] = x[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2 4 6 8 10]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x []*T</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> []T&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125; &#123;</span><br><span class="line">t := <span class="built_in">new</span>(T)</span><br><span class="line">*t = v</span><br><span class="line">x = <span class="built_in">append</span>(x, t)</span><br><span class="line">&#125;</span><br><span class="line">p := <span class="function"><span class="keyword">func</span><span class="params">(t *T)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> *t%<span class="number">2</span> == <span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> p(v) &#123;</span><br><span class="line">x[j] = x[i]</span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k := j; k &lt; <span class="built_in">len</span>(x); k++ &#123;</span><br><span class="line">x[k] = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">x = x[:j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, pt := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Print(*pt, <span class="string">" "</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2 4 6 8 10</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">p</span></span>(t: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    t % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..x.len() &#123;</span><br><span class="line">        <span class="keyword">if</span> p(x[i]) &#123;</span><br><span class="line">            x[j] = x[i];</span><br><span class="line">            j += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    x.truncate(j);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2, 4, 6, 8, 10]</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">p</span></span>(t: &amp;<span class="built_in">i64</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    t % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    x.retain(p);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2, 4, 6, 8, 10]</code></p><p><br></p><h3 id="249-Declare-and-assign-multiple-variables"><a href="#249-Declare-and-assign-multiple-variables" class="headerlink" title="249. Declare and assign multiple variables"></a>249. <font color="0c0a3e">Declare and assign multiple variables</font></h3><blockquote><p>Define variables a, b and c in a concise way.<br>Explain if they need to have the same type.</p></blockquote><p><em>声明并分配多个变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// a, b and c don't need to have the same type.</span></span><br><span class="line"></span><br><span class="line">a, b, c := <span class="number">42</span>, <span class="string">"hello"</span>, <span class="number">5.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(a, b, c)</span><br><span class="line">fmt.Printf(<span class="string">"%T %T %T \n"</span>, a, b, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">42</span> hello <span class="number">5</span></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">string</span> <span class="keyword">float64</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="comment">// a, b and c don't need to have the same type.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (a, b, c) = (<span class="number">42</span>, <span class="string">"hello"</span>, <span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; &#123;&#125; &#123;&#125;"</span>, a, b, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42 hello 5</code></p><p><br></p><h3 id="251-Parse-binary-digits"><a href="#251-Parse-binary-digits" class="headerlink" title="251. Parse binary digits"></a>251. <font color="0c0a3e">Parse binary digits</font></h3><blockquote><p>Extract integer value i from its binary string representation s (in radix 2)<br>E.g. “1101” -&gt; 13</p></blockquote><p><em>解析二进制数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"reflect"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"1101"</span></span><br><span class="line">fmt.Println(<span class="string">"s is"</span>, reflect.TypeOf(s), s)</span><br><span class="line"></span><br><span class="line">i, err := strconv.ParseInt(s, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"i is"</span>, reflect.TypeOf(i), i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s is <span class="keyword">string</span> <span class="number">1101</span></span><br><span class="line">i is <span class="keyword">int64</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"1101"</span>; <span class="comment">// binary digits</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="built_in">i32</span>::from_str_radix(s, <span class="number">2</span>).expect(<span class="string">"Not a binary number!"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>13</code></p><p><br></p><h3 id="252-Conditional-assignment"><a href="#252-Conditional-assignment" class="headerlink" title="252. Conditional assignment"></a>252. <font color="0c0a3e">Conditional assignment</font></h3><blockquote><p>Assign to variable x the value “a” if calling the function condition returns true, or the value “b” otherwise.</p></blockquote><p><em>条件赋值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> x <span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> condition() &#123;</span><br><span class="line">x = <span class="string">"a"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">x = <span class="string">"b"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">condition</span><span class="params">()</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Scorates"</span> == <span class="string">"dog"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>b</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="keyword">if</span> condition() &#123; <span class="string">"a"</span> &#125; <span class="keyword">else</span> &#123; <span class="string">"b"</span> &#125;;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="258-Convert-list-of-strings-to-list-of-integers"><a href="#258-Convert-list-of-strings-to-list-of-integers" class="headerlink" title="258. Convert list of strings to list of integers"></a>258. <font color="0c0a3e">Convert list of strings to list of integers</font></h3><blockquote><p>Convert the string values from list a into a list of integers b.</p></blockquote><p><em>将字符串列表转换为整数列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"11"</span>, <span class="string">"22"</span>, <span class="string">"33"</span>&#125;</span><br><span class="line"></span><br><span class="line">b := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">for</span> i, s := <span class="keyword">range</span> a &#123;</span><br><span class="line">b[i], err = strconv.Atoi(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11 22 33]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt; = <span class="built_in">vec!</span>[<span class="string">"11"</span>, <span class="string">"-22"</span>, <span class="string">"33"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">Vec</span>&lt;<span class="built_in">i64</span>&gt; = a.iter().map(|x| x.parse::&lt;<span class="built_in">i64</span>&gt;().unwrap()).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, -22, 33]</code></p><p><br></p><h3 id="259-Split-on-several-separators"><a href="#259-Split-on-several-separators" class="headerlink" title="259. Split on several separators"></a>259. <font color="0c0a3e">Split on several separators</font></h3><blockquote><p>Build list parts consisting of substrings of input string s, separated by any of the characters ‘,’ (comma), ‘-‘ (dash), ‘_’ (underscore).</p></blockquote><p><em>在几个分隔符上拆分</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"2021-03-11,linux_amd64"</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[,\\-_]"</span>)</span><br><span class="line">parts := re.Split(s, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, parts)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;2021&quot; &quot;03&quot; &quot;11&quot; &quot;linux&quot; &quot;amd64&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"2021-03-11,linux_amd64"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> parts: <span class="built_in">Vec</span>&lt;_&gt; = s.split(&amp;[<span class="string">','</span>, <span class="string">'-'</span>, <span class="string">'_'</span>][..]).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, parts);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;2021&quot;, &quot;03&quot;, &quot;11&quot;, &quot;linux&quot;, &quot;amd64&quot;]</code></p><p><br></p><h3 id="266-Repeating-string"><a href="#266-Repeating-string" class="headerlink" title="266. Repeating string"></a>266. <font color="0c0a3e">Repeating string</font></h3><blockquote><p>Assign to string s the value of string v, repeated n times and write it out.<br>E.g. v=”abc”, n=5 ⇒ s=”abcabcabcabcabc”</p></blockquote><p><em>重复字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">v := <span class="string">"abc"</span></span><br><span class="line">n := <span class="number">5</span></span><br><span class="line"></span><br><span class="line">s := strings.Repeat(v, n)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>abcabcabcabcabc</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> v = <span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = v.repeat(n);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>abcabcabcabcabc</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;241-Yield-priority-to-other-threads&quot;&gt;&lt;a href=&quot;#241-Yield-priority-to-other-threads&quot; class=&quot;headerlink&quot; title=&quot;241. Yield
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>函数式编程</title>
    <link href="http://www.dashen.tech/2021/07/26/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.dashen.tech/2021/07/26/函数式编程/</id>
    <published>2021-07-26T11:32:33.000Z</published>
    <updated>2021-09-11T13:24:22.007Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
      <category term="PHP" scheme="http://www.dashen.tech/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>MVCC--多版本并发控制</title>
    <link href="http://www.dashen.tech/2021/07/26/MVCC-%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <id>http://www.dashen.tech/2021/07/26/MVCC-多版本并发控制/</id>
    <published>2021-07-26T06:57:51.000Z</published>
    <updated>2021-07-26T07:04:51.000Z</updated>
    
    <content type="html"><![CDATA[<p> MVCC,全称Multi-Version Concurrency Control,即多版本并发控制。MVCC是一种并发控制的方法,一般在数据库管理系统中,实现对数据库的并发访问,在编程语言中实现事务内存。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; MVCC,全称Multi-Version Concurrency Control,即多版本并发控制。MVCC是一种并发控制的方法,一般在数据库管理系统中,实现对数据库的并发访问,在编程语言中实现事务内存。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="数据库" scheme="http://www.dashen.tech/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="Interview" scheme="http://www.dashen.tech/tags/Interview/"/>
    
  </entry>
  
  <entry>
    <title>为何MongoDB使用B树作索引</title>
    <link href="http://www.dashen.tech/2021/07/26/%E4%B8%BA%E4%BD%95MongoDB%E4%BD%BF%E7%94%A8B%E6%A0%91%E4%BD%9C%E7%B4%A2%E5%BC%95/"/>
    <id>http://www.dashen.tech/2021/07/26/为何MongoDB使用B树作索引/</id>
    <published>2021-07-26T06:14:26.000Z</published>
    <updated>2021-07-26T06:55:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h3><p><a href="https://www.cnblogs.com/xueqiuqiu/articles/8779029.html" target="_blank" rel="noopener">https://www.cnblogs.com/xueqiuqiu/articles/8779029.html</a></p><p>非叶子节点不存储数据，非叶子节点之间双向链表两两相连</p><p>B树的结构是data和关键字都存储在一个节点上，所以检索到目标对象，直接返回即可，而B+树只存key，这样检索命中以后还会继续往下走，直到取到目标所对应的叶子结点上所存储的data才会返回</p><p><br></p><hr><p><br></p><p><a href="https://www.cnblogs.com/rjzheng/p/12316685.html" target="_blank" rel="noopener">https://www.cnblogs.com/rjzheng/p/12316685.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;B树和B-树的区别&quot;&gt;&lt;a href=&quot;#B树和B-树的区别&quot; class=&quot;headerlink&quot; title=&quot;B树和B+树的区别&quot;&gt;&lt;/a&gt;B树和B+树的区别&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/xueqiuqiu
      
    
    </summary>
    
    
      <category term="数据库" scheme="http://www.dashen.tech/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="数据结构" scheme="http://www.dashen.tech/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(12)</title>
    <link href="http://www.dashen.tech/2021/07/25/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-12/"/>
    <id>http://www.dashen.tech/2021/07/25/Rust-vs-Go-常用语法对比-12/</id>
    <published>2021-07-25T14:43:58.000Z</published>
    <updated>2021-07-17T17:12:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="221-Remove-all-non-digits-characters"><a href="#221-Remove-all-non-digits-characters" class="headerlink" title="221. Remove all non-digits characters"></a>221. <font color="0c0a3e">Remove all non-digits characters</font></h3><blockquote><p>Create string t from string s, keeping only digit characters 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.</p></blockquote><p><em>删除所有非数字字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`height="168px"`</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[^\\d]"</span>)</span><br><span class="line">t := re.ReplaceAllLiteralString(s, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>168</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t: <span class="built_in">String</span> = <span class="string">"Today is the 14th of July"</span></span><br><span class="line">        .chars()</span><br><span class="line">        .filter(|c| c.is_digit(<span class="number">10</span>))</span><br><span class="line">        .collect();</span><br><span class="line"></span><br><span class="line">    dbg!(t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[src/main.rs:7] t = &quot;14&quot;</code></p><p><br></p><h3 id="222-Find-first-index-of-an-element-in-list"><a href="#222-Find-first-index-of-an-element-in-list" class="headerlink" title="222. Find first index of an element in list"></a>222. <font color="0c0a3e">Find first index of an element in list</font></h3><blockquote><p>Set i to the first index in list items at which the element x can be found, or -1 if items does not contain x.</p></blockquote><p><em>在列表中查找元素的第一个索引</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"huey"</span>, <span class="string">"dewey"</span>, <span class="string">"louie"</span>&#125;</span><br><span class="line">x := <span class="string">"dewey"</span></span><br><span class="line"></span><br><span class="line">i := <span class="number">-1</span></span><br><span class="line"><span class="keyword">for</span> j, e := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> e == x &#123;</span><br><span class="line">i = j</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"Found %q at position %d in %q"</span>, x, i, items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Found &quot;dewey&quot; at position 1 in [&quot;huey&quot; &quot;dewey&quot; &quot;louie&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="string">'A'</span>, '🎂', <span class="string">'㍗'</span>];</span><br><span class="line">    <span class="keyword">let</span> x = '💩';</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> items.iter().position(|y| *y == x) &#123;</span><br><span class="line">        <span class="literal">Some</span>(i) =&gt; <span class="built_in">println!</span>(<span class="string">"Found &#123;&#125; at position &#123;&#125;."</span>, x, i),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"There is no &#123;&#125; in the list."</span>, x),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>There is no 💩 in the list.</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="number">42</span>, -<span class="number">3</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = items.iter().position(|y| *y == x).map_or(-<span class="number">1</span>, |n| n <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; =&gt; &#123;&#125;"</span>, x, i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> x = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> i = items.iter().position(|y| *y == x).map_or(-<span class="number">1</span>, |n| n <span class="keyword">as</span> <span class="built_in">i32</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125; =&gt; &#123;&#125;"</span>, x, i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span> =&gt; <span class="number">2</span></span><br><span class="line"><span class="number">13</span> =&gt; -<span class="number">1</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="223-for-else-loop"><a href="#223-for-else-loop" class="headerlink" title="223. for else loop"></a>223. <font color="0c0a3e">for else loop</font></h3><blockquote><p>Loop through list items checking a condition. Do something else if no matches are found.<br>A typical use case is looping through a series of containers looking for one that matches a condition. If found, an item is inserted; otherwise, a new container is created.<br>These are mostly used as an inner nested loop, and in a location where refactoring inner logic into a separate function reduces clarity.</p></blockquote><p><em>for else循环</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> items &#123;</span><br><span class="line"><span class="keyword">if</span> item == <span class="string">"baz"</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"found it"</span>)</span><br><span class="line"><span class="keyword">goto</span> forelse</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">fmt.Println(<span class="string">"never found it"</span>)</span><br><span class="line">&#125;</span><br><span class="line">        forelse:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>found it</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> found = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> items &#123;</span><br><span class="line">        <span class="keyword">if</span> item == &amp;<span class="string">"baz"</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"found it"</span>);</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !found &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"never found it"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>found it</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">     <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">None</span> = items.iter().find(|&amp;&amp;item| item == <span class="string">"rockstar programmer"</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"NotFound"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NotFound</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items: &amp;[&amp;<span class="built_in">str</span>] = &amp;[<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>, <span class="string">"qux"</span>];</span><br><span class="line"></span><br><span class="line">    items</span><br><span class="line">        .iter()</span><br><span class="line">        .find(|&amp;&amp;item| item == <span class="string">"rockstar programmer"</span>)</span><br><span class="line">        .or_else(|| &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"NotFound"</span>);</span><br><span class="line">            <span class="literal">Some</span>(&amp;<span class="string">"rockstar programmer"</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>NotFound</code></p><p><br></p><h3 id="224-Add-element-to-the-beginning-of-the-list"><a href="#224-Add-element-to-the-beginning-of-the-list" class="headerlink" title="224. Add element to the beginning of the list"></a>224. <font color="0c0a3e">Add element to the beginning of the list</font></h3><blockquote><p>Insert element x at the beginning of list items.</p></blockquote><p><em>将元素添加到列表的开头</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="number">42</span>, <span class="number">1337</span>&#125;</span><br><span class="line"><span class="keyword">var</span> x T = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">append</span>([]T&#123;x&#125;, items...)</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[7 42 1337]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []T&#123;<span class="number">42</span>, <span class="number">1337</span>&#125;</span><br><span class="line"><span class="keyword">var</span> x T = <span class="number">7</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">append</span>(items, x)</span><br><span class="line"><span class="built_in">copy</span>(items[<span class="number">1</span>:], items)</span><br><span class="line">items[<span class="number">0</span>] = x</span><br><span class="line"></span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[7 42 1337]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::VecDeque;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = VecDeque::new();</span><br><span class="line">    items.push_back(<span class="number">22</span>);</span><br><span class="line">    items.push_back(<span class="number">33</span>);</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line">    items.push_front(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22, 33]</code></p><p><br></p><h3 id="225-Declare-and-use-an-optional-argument"><a href="#225-Declare-and-use-an-optional-argument" class="headerlink" title="225. Declare and use an optional argument"></a>225. <font color="0c0a3e">Declare and use an optional argument</font></h3><blockquote><p>Declare an optional integer argument x to procedure f, printing out “Present” and its value if it is present, “Not present” otherwise</p></blockquote><p><em>声明并使用可选参数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(x ...<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(x) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Present"</span>, x[<span class="number">0</span>])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">println</span>(<span class="string">"Not present"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">f(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Go does not have optional arguments, but to some extend, they can be mimicked with a variadic parameter.<br>x is a variadic parameter, which must be the last parameter for the function f.<br>Strictly speaking, x is a list of integers, which might have more than one element. These additional elements are ignored.</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Not present</span><br><span class="line">Present <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>(x: <span class="built_in">Option</span>&lt;()&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="literal">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">"Present &#123;&#125;"</span>, x),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">"Not present"</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="226-Delete-last-element-from-list"><a href="#226-Delete-last-element-from-list" class="headerlink" title="226. Delete last element from list"></a>226. <font color="0c0a3e">Delete last element from list</font></h3><blockquote><p>Remove the last element from list items.</p></blockquote><p><em>从列表中删除最后一个元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123;<span class="string">"banana"</span>, <span class="string">"apple"</span>, <span class="string">"kiwi"</span>&#125;</span><br><span class="line">fmt.Println(items)</span><br><span class="line"></span><br><span class="line">items = items[:<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br><span class="line">fmt.Println(items)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[banana apple kiwi]</span><br><span class="line">[banana apple]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> items = <span class="built_in">vec!</span>[<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>];</span><br><span class="line"></span><br><span class="line">    items.pop();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, items);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[11, 22]</code></p><p><br></p><h3 id="227-Copy-list"><a href="#227-Copy-list" class="headerlink" title="227. Copy list"></a>227. <font color="0c0a3e">Copy list</font></h3><blockquote><p>Create new list y containing the same elements as list x.<br>Subsequent modifications of y must not affect x (except for the contents referenced by the elements themselves if they contain pointers).</p></blockquote><p><em>复制列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line">x := []T&#123;<span class="string">"Never"</span>, <span class="string">"gonna"</span>, <span class="string">"shower"</span>&#125;</span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(x))</span><br><span class="line"><span class="built_in">copy</span>(y, x)</span><br><span class="line"></span><br><span class="line">y[<span class="number">2</span>] = <span class="string">"give"</span></span><br><span class="line">y = <span class="built_in">append</span>(y, <span class="string">"you"</span>, <span class="string">"up"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Never gonna shower]</span><br><span class="line">[Never gonna give you up]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="built_in">vec!</span>[<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> y = x.clone();</span><br><span class="line"></span><br><span class="line">    x[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"x is &#123;:?&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"y is &#123;:?&#125;"</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x is [<span class="number">99</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">y is [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="228-Copy-a-file"><a href="#228-Copy-a-file" class="headerlink" title="228. Copy a file"></a>228. <font color="0c0a3e">Copy a file</font></h3><blockquote><p>Copy the file at path src to dst.</p></blockquote><p><em>复制文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">stat, err := os.Stat(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ioutil.WriteFile(dst, data, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rw-r--r--</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">data, err := ioutil.ReadFile(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">stat, err := os.Stat(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">err = ioutil.WriteFile(dst, data, stat.Mode())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os.Chmod(dst, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chmod(<span class="string">"/tmp/file1"</span>, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rwxrwxrwx</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">src, dst := <span class="string">"/tmp/file1"</span>, <span class="string">"/tmp/file2"</span></span><br><span class="line"></span><br><span class="line">err := <span class="built_in">copy</span>(dst, src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stat, err := os.Stat(dst)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(dst, <span class="string">"exists, it has size"</span>, stat.Size(), <span class="string">"and mode"</span>, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">copy</span><span class="params">(dst, src <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">f, err := os.Open(src)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> f.Close()</span><br><span class="line">stat, err := f.Stat()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">g, err := os.OpenFile(dst, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, stat.Mode())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> g.Close()</span><br><span class="line">_, err = io.Copy(g, f)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> os.Chmod(dst, stat.Mode())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">err = os.Chmod(<span class="string">"/tmp/file1"</span>, <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/tmp/file2 exists, it has size 5 and mode -rwxrwxrwx</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> src = <span class="string">"/etc/fstabZ"</span>;</span><br><span class="line">    <span class="keyword">let</span> dst = <span class="string">"fstab.bck"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r = fs::copy(src, dst);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Ok</span>(v) =&gt; <span class="built_in">println!</span>(<span class="string">"Copied &#123;:?&#125; bytes"</span>, v),</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error copying &#123;:?&#125; to &#123;:?&#125;: &#123;:?&#125;"</span>, src, dst, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>error copying &quot;/etc/fstabZ&quot; to &quot;fstab.bck&quot;: Os { code: 2, kind: NotFound, message: &quot;No such file or directory&quot; }</code></p><p><br></p><h3 id="231-Test-if-bytes-are-a-valid-UTF-8-string"><a href="#231-Test-if-bytes-are-a-valid-UTF-8-string" class="headerlink" title="231. Test if bytes are a valid UTF-8 string"></a>231. <font color="0c0a3e">Test if bytes are a valid UTF-8 string</font></h3><blockquote><pre><code>Set b to true if the byte sequence s consists entirely of valid UTF-8 character code points, false otherwise.</code></pre></blockquote><p><em>测试字节是否是有效的UTF-8字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">&#123;</span><br><span class="line">s := []<span class="keyword">byte</span>(<span class="string">"Hello, 世界"</span>)</span><br><span class="line">b := utf8.Valid(s)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">s := []<span class="keyword">byte</span>&#123;<span class="number">0xff</span>, <span class="number">0xfe</span>, <span class="number">0xfd</span>&#125;</span><br><span class="line">b := utf8.Valid(s)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> bytes = [<span class="number">0xc3</span>, <span class="number">0x81</span>, <span class="number">0x72</span>, <span class="number">0x76</span>, <span class="number">0xc3</span>, <span class="number">0xad</span>, <span class="number">0x7a</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> b = std::<span class="built_in">str</span>::from_utf8(&amp;bytes).is_ok();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> bytes = [<span class="number">0xc3</span>, <span class="number">0x81</span>, <span class="number">0x81</span>, <span class="number">0x76</span>, <span class="number">0xc3</span>, <span class="number">0xad</span>, <span class="number">0x7a</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> b = std::<span class="built_in">str</span>::from_utf8(&amp;bytes).is_ok();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="234-Encode-bytes-to-base64"><a href="#234-Encode-bytes-to-base64" class="headerlink" title="234. Encode bytes to base64"></a>234. <font color="0c0a3e">Encode bytes to base64</font></h3><blockquote><p>Assign to string s the standard base64 encoding of the byte array data, as specified by RFC 4648.</p></blockquote><p><em>将字节编码为base64</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/base64"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">"Hello world"</span>)</span><br><span class="line">s := base64.StdEncoding.EncodeToString(data)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SGVsbG8gd29ybGQ=</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use base64;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"Hello, World!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b64txt = base64::encode(d);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, b64txt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SGVsbG8sIFdvcmxkIQ==</code></p><p><br></p><h3 id="235-Decode-base64"><a href="#235-Decode-base64" class="headerlink" title="235. Decode base64"></a>235. <font color="0c0a3e">Decode base64</font></h3><blockquote><p>Assign to byte array data the bytes represented by the base64 string s, as specified by RFC 4648.</p></blockquote><p><em>解码base64</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/base64"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"SGVsbG8gd29ybGQ="</span></span><br><span class="line"></span><br><span class="line">data, err := base64.StdEncoding.DecodeString(str)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"error:"</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q\n"</span>, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>&quot;Hello world&quot;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//use base64;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"SGVsbG8sIFdvcmxkIQ=="</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> bytes = base64::decode(d).unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Hex: &#123;:x?&#125;"</span>, bytes);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Txt: &#123;&#125;"</span>, std::<span class="built_in">str</span>::from_utf8(&amp;bytes).unwrap());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hex: [<span class="number">48</span>, <span class="number">65</span>, <span class="number">6</span>c, <span class="number">6</span>c, <span class="number">6</span>f, <span class="number">2</span>c, <span class="number">20</span>, <span class="number">57</span>, <span class="number">6</span>f, <span class="number">72</span>, <span class="number">6</span>c, <span class="number">64</span>, <span class="number">21</span>]</span><br><span class="line">Txt: Hello, World!</span><br></pre></td></tr></table></figure><p><br></p><h3 id="237-Xor-integers"><a href="#237-Xor-integers" class="headerlink" title="237. Xor integers"></a>237. <font color="0c0a3e">Xor integers</font></h3><blockquote><p>Assign to c the result of (a xor b)</p></blockquote><p><strong>异或运算</strong></p><p><em>异或整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := <span class="number">230</span>, <span class="number">42</span></span><br><span class="line">c := a ^ b</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %12b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %12b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %12b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is     <span class="number">11100110</span></span><br><span class="line">b is       <span class="number">101010</span></span><br><span class="line">c is     <span class="number">11001100</span></span><br><span class="line">c == <span class="number">204</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := big.NewInt(<span class="number">230</span>), big.NewInt(<span class="number">42</span>)</span><br><span class="line">c := <span class="built_in">new</span>(big.Int)</span><br><span class="line">c.Xor(a, b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %12b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %12b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %12b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a is     <span class="number">11100110</span></span><br><span class="line">b is       <span class="number">101010</span></span><br><span class="line">c is     <span class="number">11001100</span></span><br><span class="line">c == <span class="number">204</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">230</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">let</span> c = a ^ b;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>204</code></p><p><br></p><h3 id="238-Xor-byte-arrays"><a href="#238-Xor-byte-arrays" class="headerlink" title="238. Xor byte arrays"></a>238. <font color="0c0a3e">Xor byte arrays</font></h3><blockquote><p>Write in a new byte array c the xor result of byte arrays a and b.<br>a and b have the same size.</p></blockquote><p><em>异或字节数组</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>), []<span class="keyword">byte</span>(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line">c := <span class="built_in">make</span>([]<span class="keyword">byte</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">c[i] = a[i] ^ b[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %08b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %08b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %08b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"c as string would be %q\n"</span>, <span class="keyword">string</span>(c))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a is [<span class="number">01001000</span> <span class="number">01100101</span> <span class="number">01101100</span> <span class="number">01101100</span> <span class="number">01101111</span>]</span><br><span class="line">b is [<span class="number">01110111</span> <span class="number">01101111</span> <span class="number">01110010</span> <span class="number">01101100</span> <span class="number">01100100</span>]</span><br><span class="line">c is [<span class="number">00111111</span> <span class="number">00001010</span> <span class="number">00011110</span> <span class="number">00000000</span> <span class="number">00001011</span>]</span><br><span class="line">c == [<span class="number">63</span> <span class="number">10</span> <span class="number">30</span> <span class="number">0</span> <span class="number">11</span>]</span><br><span class="line">c as <span class="keyword">string</span> would be <span class="string">"?\n\x1e\x00\v"</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T [<span class="number">5</span>]<span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b T</span><br><span class="line"><span class="built_in">copy</span>(a[:], <span class="string">"Hello"</span>)</span><br><span class="line"><span class="built_in">copy</span>(b[:], <span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c T</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> a &#123;</span><br><span class="line">c[i] = a[i] ^ b[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"a is %08b\n"</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">"b is %08b\n"</span>, b)</span><br><span class="line">fmt.Printf(<span class="string">"c is %08b\n"</span>, c)</span><br><span class="line">fmt.Println(<span class="string">"c =="</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"c as string would be %q\n"</span>, <span class="keyword">string</span>(c[:]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a is [<span class="number">01001000</span> <span class="number">01100101</span> <span class="number">01101100</span> <span class="number">01101100</span> <span class="number">01101111</span>]</span><br><span class="line">b is [<span class="number">01110111</span> <span class="number">01101111</span> <span class="number">01110010</span> <span class="number">01101100</span> <span class="number">01100100</span>]</span><br><span class="line">c is [<span class="number">00111111</span> <span class="number">00001010</span> <span class="number">00011110</span> <span class="number">00000000</span> <span class="number">00001011</span>]</span><br><span class="line">c == [<span class="number">63</span> <span class="number">10</span> <span class="number">30</span> <span class="number">0</span> <span class="number">11</span>]</span><br><span class="line">c as <span class="keyword">string</span> would be <span class="string">"?\n\x1e\x00\v"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a: &amp;[<span class="built_in">u8</span>] = <span class="string">"Hello"</span>.as_bytes();</span><br><span class="line">    <span class="keyword">let</span> b: &amp;[<span class="built_in">u8</span>] = <span class="string">"world"</span>.as_bytes();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> c: <span class="built_in">Vec</span>&lt;_&gt; = a.iter().zip(b).map(|(x, y)| x ^ y).collect();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[63, 10, 30, 0, 11]</code></p><p><br></p><h3 id="239-Find-first-regular-expression-match"><a href="#239-Find-first-regular-expression-match" class="headerlink" title="239. Find first regular expression match"></a>239. <font color="0c0a3e">Find first regular expression match</font></h3><blockquote><p>Assign to string x the first word of string s consisting of exactly 3 digits, or the empty string if no such match exists.<br>A word containing more digits, or 3 digits as a substring fragment, must not match.</p></blockquote><p><em>查找第一个正则表达式匹配项</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">re := regexp.MustCompile(<span class="string">`\b\d\d\d\b`</span>)</span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"12"</span>,</span><br><span class="line"><span class="string">"123"</span>,</span><br><span class="line"><span class="string">"1234"</span>,</span><br><span class="line"><span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span>,</span><br><span class="line"><span class="string">"See p.456, for word boundaries"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">x := re.FindString(s)</span><br><span class="line">fmt.Printf(<span class="string">"%q -&gt; %q\n"</span>, s, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">""</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"12"</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"123"</span> -&gt; <span class="string">"123"</span></span><br><span class="line"><span class="string">"1234"</span> -&gt; <span class="string">""</span></span><br><span class="line"><span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span> -&gt; <span class="string">"224"</span></span><br><span class="line"><span class="string">"See p.456, for word boundaries"</span> -&gt; <span class="string">"456"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sentences = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"12"</span>,</span><br><span class="line">        <span class="string">"123"</span>,</span><br><span class="line">        <span class="string">"1234"</span>,</span><br><span class="line">        <span class="string">"I have 12 goats, 3988 otters, 224 shrimps and 456 giraffes"</span>,</span><br><span class="line">        <span class="string">"See p.456, for word boundaries"</span>,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> sentences &#123;</span><br><span class="line">        <span class="keyword">let</span> re = Regex::new(<span class="string">r"\b\d\d\d\b"</span>).expect(<span class="string">"failed to compile regex"</span>);</span><br><span class="line">        <span class="keyword">let</span> x = re.find(s).map(|x| x.as_str()).unwrap_or(<span class="string">""</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"[&#123;&#125;] -&gt; [&#123;&#125;]"</span>, &amp;s, &amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[] -&gt; []</span><br><span class="line">[<span class="number">12</span>] -&gt; []</span><br><span class="line">[<span class="number">123</span>] -&gt; [<span class="number">123</span>]</span><br><span class="line">[<span class="number">1234</span>] -&gt; []</span><br><span class="line">[I have <span class="number">12</span> goats, <span class="number">3988</span> otters, <span class="number">224</span> shrimps and <span class="number">456</span> giraffes] -&gt; [<span class="number">224</span>]</span><br><span class="line">[See p.<span class="number">456</span>, <span class="keyword">for</span> word boundaries] -&gt; [<span class="number">456</span>]</span><br></pre></td></tr></table></figure><p><br></p><h3 id="240-Sort-2-lists-together"><a href="#240-Sort-2-lists-together" class="headerlink" title="240. Sort 2 lists together"></a>240. <font color="0c0a3e">Sort 2 lists together</font></h3><blockquote><p>Lists a and b have the same length. Apply the same permutation to a and b to have them sorted based on the values of a.</p></blockquote><p><em>将两个列表排序在一起.列表a和b的长度相同。对a和b应用相同的排列，根据a的值对它们进行排序。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sort"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> K <span class="keyword">int</span></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> sorter <span class="keyword">struct</span> &#123;</span><br><span class="line">k []K</span><br><span class="line">t []T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(s.k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// Swap affects 2 slices at once.</span></span><br><span class="line">s.k[i], s.k[j] = s.k[j], s.k[i]</span><br><span class="line">s.t[i], s.t[j] = s.t[j], s.t[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sorter)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> s.k[i] &lt; s.k[j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []K&#123;<span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">8</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"nine"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"eight"</span>&#125;</span><br><span class="line"></span><br><span class="line">sort.Sort(&amp;sorter&#123;</span><br><span class="line">k: a,</span><br><span class="line">t: b,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span> <span class="number">4</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line">[three four eight nine]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">30</span>, <span class="number">20</span>, <span class="number">40</span>, <span class="number">10</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> tmp: <span class="built_in">Vec</span>&lt;_&gt; = a.iter().zip(b).collect();</span><br><span class="line">    tmp.as_mut_slice().sort_by_key(|(&amp;x, _y)| x);</span><br><span class="line">    <span class="keyword">let</span> (aa, bb): (<span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;, <span class="built_in">Vec</span>&lt;<span class="built_in">i32</span>&gt;) = tmp.into_iter().unzip();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;, &#123;:?&#125;"</span>, aa, bb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[10, 20, 30, 40], [104, 102, 101, 103]</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;221-Remove-all-non-digits-characters&quot;&gt;&lt;a href=&quot;#221-Remove-all-non-digits-characters&quot; class=&quot;headerlink&quot; title=&quot;221. Rem
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(11)</title>
    <link href="http://www.dashen.tech/2021/07/24/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-11/"/>
    <id>http://www.dashen.tech/2021/07/24/Rust-vs-Go-常用语法对比-11/</id>
    <published>2021-07-24T14:43:58.000Z</published>
    <updated>2021-07-17T15:21:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="202-Sum-of-squares"><a href="#202-Sum-of-squares" class="headerlink" title="202. Sum of squares"></a>202. <font color="0c0a3e">Sum of squares</font></h3><blockquote><p>Calculate the sum of squares s of data, an array of floating point values.</p></blockquote><p><em>计算平方和</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">float64</span>&#123;<span class="number">0.06</span>, <span class="number">0.82</span>, <span class="number">-0.01</span>, <span class="number">-0.34</span>, <span class="number">-0.55</span>&#125;</span><br><span class="line"><span class="keyword">var</span> s <span class="keyword">float64</span></span><br><span class="line"><span class="keyword">for</span> _, d := <span class="keyword">range</span> data &#123;</span><br><span class="line">s += math.Pow(d, <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println</span>(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>+1.094200e+000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> data: <span class="built_in">Vec</span>&lt;<span class="built_in">f32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">2.0</span>, <span class="number">3.5</span>, <span class="number">4.0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = data.iter().map(|x| x.powi(<span class="number">2</span>)).sum::&lt;<span class="built_in">f32</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>32.25</code></p><p><br></p><h3 id="205-Get-an-environment-variable"><a href="#205-Get-an-environment-variable" class="headerlink" title="205. Get an environment variable"></a>205. <font color="0c0a3e">Get an environment variable</font></h3><blockquote><p>Read an environment variable with the name “FOO” and assign it to the string variable foo. If it does not exist or if the system does not support environment variables, assign a value of “none”.</p></blockquote><p><em>获取环境变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo, ok := os.LookupEnv(<span class="string">"FOO"</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">foo = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>none</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">foo := os.Getenv(<span class="string">"FOO"</span>)</span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">""</span> &#123;</span><br><span class="line">foo = <span class="string">"none"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(foo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>none</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo;</span><br><span class="line">    <span class="keyword">match</span> env::var(<span class="string">"FOO"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; foo = val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; foo = <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> user;</span><br><span class="line">    <span class="keyword">match</span> env::var(<span class="string">"USER"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; user = val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; user = <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = env::var(<span class="string">"FOO"</span>).unwrap_or(<span class="string">"none"</span>.to_string());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> user = env::var(<span class="string">"USER"</span>).unwrap_or(<span class="string">"none"</span>.to_string());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="keyword">match</span> env::var(<span class="string">"FOO"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, foo);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">match</span> env::var(<span class="string">"USER"</span>) &#123;</span><br><span class="line">        <span class="literal">Ok</span>(val) =&gt; val,</span><br><span class="line">        <span class="literal">Err</span>(_e) =&gt; <span class="string">"none"</span>.to_string(),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">none</span><br><span class="line">playground</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::env;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Ok</span>(tnt_root) = env::var(<span class="string">"TNT_ROOT"</span>) &#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="206-Switch-statement-with-strings"><a href="#206-Switch-statement-with-strings" class="headerlink" title="206. Switch statement with strings"></a>206. <font color="0c0a3e">Switch statement with strings</font></h3><blockquote><p>Execute different procedures foo, bar, baz and barfl if the string str contains the name of the respective procedure. Do it in a way natural to the language.</p></blockquote><p><em>switch语句</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">str := <span class="string">"baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> str &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"foo"</span>:</span><br><span class="line">foo()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"bar"</span>:</span><br><span class="line">bar()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"baz"</span>:</span><br><span class="line">baz()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"barfl"</span>:</span><br><span class="line">barfl()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called foo"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called bar"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">baz</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called baz"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">barfl</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Called barfl"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Called baz</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">bar</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">baz</span></span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">barfl</span></span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">let</span> str_ = <span class="string">"x"</span>;</span><br><span class="line">    <span class="keyword">match</span> str_ &#123;</span><br><span class="line">        <span class="string">"foo"</span> =&gt; foo(),</span><br><span class="line">        <span class="string">"bar"</span> =&gt; bar(),</span><br><span class="line">        <span class="string">"baz"</span> =&gt; baz(),</span><br><span class="line">        <span class="string">"barfl"</span> =&gt; barfl(),</span><br><span class="line">        _ =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="207-Allocate-a-list-that-is-automatically-deallocated"><a href="#207-Allocate-a-list-that-is-automatically-deallocated" class="headerlink" title="207. Allocate a list that is automatically deallocated"></a>207. <font color="0c0a3e">Allocate a list that is automatically deallocated</font></h3><blockquote><p>Allocate a list a containing n elements (n assumed to be too large for a stack) that is automatically deallocated when the program exits the scope it is declared in.</p></blockquote><p><em>分配一个自动解除分配的列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">byte</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="number">10</span>_000_000</span><br><span class="line">a := <span class="built_in">make</span>([]T, n)</span><br><span class="line">fmt.Println(<span class="built_in">len</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Elements have type T.<br>a is garbage-collected after the program exits its scope, unless we let it “escape” by taking its reference.<br>The runtime decides if a lives in the stack on in the heap.</em></p><p><code>10000000</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">0</span>; n];</span><br></pre></td></tr></table></figure><p><code>Heap allocations are deallocated when the variable goes out of scope.</code></p><p><br></p><h3 id="208-Formula-with-arrays"><a href="#208-Formula-with-arrays" class="headerlink" title="208. Formula with arrays"></a>208. <font color="0c0a3e">Formula with arrays</font></h3><blockquote><p>Given the arrays a,b,c,d of equal length and the scalar e, calculate a = e<em>(a+b</em>c+cos(d)).<br>Store the results in a.</p></blockquote><p><em>对数组元素进行运算</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">applyFormula</span><span class="params">(a, b, c, d []<span class="keyword">float64</span>, e <span class="keyword">float64</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> a &#123;</span><br><span class="line">a[i] = e * (v + b[i] + c[i] + math.Cos(d[i]))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">float64</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">b := []<span class="keyword">float64</span>&#123;<span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span>&#125;</span><br><span class="line">c := []<span class="keyword">float64</span>&#123;<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>&#125;</span><br><span class="line">d := []<span class="keyword">float64</span>&#123;<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>&#125;</span><br><span class="line">e := <span class="number">42.0</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"a is    "</span>, a)</span><br><span class="line">applyFormula(a, b, c, d, e)</span><br><span class="line">fmt.Println(<span class="string">"a is now"</span>, a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a is     [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line">a is now [<span class="number">689.1127648209083</span> <span class="number">786.9429631647291</span> <span class="number">879.4931076599294</span> <span class="number">1001.3783018264178</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> a: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">5</span>., <span class="number">2</span>., <span class="number">8</span>., <span class="number">9</span>., <span class="number">0.5</span>]; <span class="comment">// we want it to be mutable</span></span><br><span class="line">    <span class="keyword">let</span> b: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">7</span>., <span class="number">9</span>., <span class="number">8</span>., <span class="number">0.965</span>, <span class="number">0.98</span>]; </span><br><span class="line">    <span class="keyword">let</span> c: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">0</span>., <span class="number">0.8</span>, <span class="number">789456</span>., <span class="number">123456</span>., <span class="number">0.0003</span>]; </span><br><span class="line">    <span class="keyword">let</span> d: [<span class="built_in">f32</span>; <span class="number">5</span>] = [<span class="number">332</span>., <span class="number">0.1</span>, <span class="number">8</span>., <span class="number">9874</span>., <span class="number">0.3</span>]; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> e: <span class="built_in">f32</span> = <span class="number">85</span>.;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..a.len() &#123;</span><br><span class="line">        a[i] = e * (a[i] + b[i] * c[i] + d[i].cos());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, a); <span class="comment">//Don't have any idea about the output</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[470.29297, 866.57544, 536830750.0, 10127158.0, 123.7286]</code></p><p><br></p><h3 id="209-Type-with-automatic-deep-deallocation"><a href="#209-Type-with-automatic-deep-deallocation" class="headerlink" title="209. Type with automatic deep deallocation"></a>209. <font color="0c0a3e">Type with automatic deep deallocation</font></h3><blockquote><p>Declare a type t which contains a string s and an integer array n with variable size, and allocate a variable v of type t. Allocate v.s and v.n and set them to the values “Hello, world!” for s and [1,4,9,16,25], respectively. Deallocate v, automatically deallocating v.s and v.n (no memory leaks).</p></blockquote><p><em>自动深度解除分配的类型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">f()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> t <span class="keyword">struct</span> &#123;</span><br><span class="line">s <span class="keyword">string</span></span><br><span class="line">n []<span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">v := t&#123;</span><br><span class="line">s: <span class="string">"Hello, world!"</span>,</span><br><span class="line">n: []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pretend to use v (otherwise this is a compile error)</span></span><br><span class="line">_ = v</span><br><span class="line"></span><br><span class="line"><span class="comment">// When f exits, v and all its fields are garbage-collected, recursively</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>After v goes out of scope, v and all its fields will be garbage-collected, recursively</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span></span> &#123;</span><br><span class="line">s: <span class="built_in">String</span>,</span><br><span class="line">n: <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line"><span class="keyword">let</span> v = T &#123;</span><br><span class="line">s: <span class="string">"Hello, world!"</span>.into(),</span><br><span class="line">n: <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>]</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>When a variable goes out of scope, all member variables are deallocated recursively.</em> </p><p><br></p><h3 id="211-Create-folder"><a href="#211-Create-folder" class="headerlink" title="211. Create folder"></a>211. <font color="0c0a3e">Create folder</font></h3><blockquote><p>Create the folder at path on the filesystem</p></blockquote><p><em>创建文件夹</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo"</span></span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 := os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, info.IsDir())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">foo exists: <span class="literal">false</span></span><br><span class="line">foo exists: <span class="literal">true</span></span><br><span class="line">foo is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo/bar"</span></span><br><span class="line">_, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Could not create"</span>, path, <span class="string">"with os.Mkdir"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 := os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.MkdirAll(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Could not create"</span>, path, <span class="string">"with os.MkdirAll"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err2 = os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err2)</span><br><span class="line">fmt.Println(path, <span class="string">"exists:"</span>, b)</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, info.IsDir())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo/bar exists: <span class="literal">false</span></span><br><span class="line">Could not create foo/bar with os.Mkdir</span><br><span class="line">foo/bar exists: <span class="literal">false</span></span><br><span class="line">foo/bar exists: <span class="literal">true</span></span><br><span class="line">foo/bar is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/tmp/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e);</span><br><span class="line">            std::process::exit(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/tmp/goofy exists: <span class="literal">false</span></span><br><span class="line">created /tmp/goofy: OK</span><br><span class="line">/tmp/goofy exists: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/tmp/friends/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fs::create_dir can't create parent folders</span></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e),</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fs::create_dir_all does create parent folders</span></span><br><span class="line">    <span class="keyword">let</span> r = fs::create_dir_all(path);</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="literal">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">"error creating &#123;&#125;: &#123;&#125;"</span>, path, e),</span><br><span class="line">        <span class="literal">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">"created &#123;&#125;: OK"</span>, path),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/tmp/friends/goofy exists: <span class="literal">false</span></span><br><span class="line">error creating /tmp/friends/goofy: No such file or directory (os error <span class="number">2</span>)</span><br><span class="line">/tmp/friends/goofy exists: <span class="literal">false</span></span><br><span class="line">created /tmp/friends/goofy: OK</span><br><span class="line">/tmp/friends/goofy exists: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="212-Check-if-folder-exists"><a href="#212-Check-if-folder-exists" class="headerlink" title="212. Check if folder exists"></a>212. <font color="0c0a3e">Check if folder exists</font></h3><blockquote><p>Set boolean b to true if path exists on the filesystem and is a directory; false otherwise.</p></blockquote><p><em>检查文件夹是否存在</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">path := <span class="string">"foo"</span></span><br><span class="line">info, err := os.Stat(path)</span><br><span class="line">b := !os.IsNotExist(err) &amp;&amp; info.IsDir()</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, b)</span><br><span class="line"></span><br><span class="line">err = os.Mkdir(path, os.ModeDir)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">info, err = os.Stat(path)</span><br><span class="line">b = !os.IsNotExist(err) &amp;&amp; info.IsDir()</span><br><span class="line">fmt.Println(path, <span class="string">"is a directory:"</span>, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo is a directory: <span class="literal">false</span></span><br><span class="line">foo is a directory: <span class="literal">true</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::path::Path;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/etc"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, path, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/goofy"</span>;</span><br><span class="line">    <span class="keyword">let</span> b: <span class="built_in">bool</span> = Path::new(path).is_dir();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, path, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc: <span class="literal">true</span></span><br><span class="line">/goofy: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="215-Pad-string-on-the-left"><a href="#215-Pad-string-on-the-left" class="headerlink" title="215. Pad string on the left"></a>215. <font color="0c0a3e">Pad string on the left</font></h3><blockquote><p>Prepend extra character c at the beginning of string s to make sure its length is at least m.<br>The length is the number of characters, not the number of bytes.</p></blockquote><p><em>左侧补齐字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="number">3</span></span><br><span class="line">c := <span class="string">"-"</span></span><br><span class="line"><span class="keyword">for</span> _, s := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">""</span>,</span><br><span class="line"><span class="string">"a"</span>,</span><br><span class="line"><span class="string">"ab"</span>,</span><br><span class="line"><span class="string">"abc"</span>,</span><br><span class="line"><span class="string">"abcd"</span>,</span><br><span class="line"><span class="string">"é"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> n := utf8.RuneCountInString(s); n &lt; m &#123;</span><br><span class="line">s = strings.Repeat(c, m-n) + s</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">--a</span><br><span class="line">-ab</span><br><span class="line">abc</span><br><span class="line">abcd</span><br><span class="line">--é</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> unicode_width::&#123;UnicodeWidthChar, UnicodeWidthStr&#125;;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(columns_short) = m.checked_sub(s.width()) &#123;</span><br><span class="line">    <span class="keyword">let</span> padding_width = c</span><br><span class="line">        .width()</span><br><span class="line">        .filter(|n| *n &gt; <span class="number">0</span>)</span><br><span class="line">        .expect(<span class="string">"padding character should be visible"</span>);</span><br><span class="line">    <span class="comment">// Saturate the columns_short</span></span><br><span class="line">    <span class="keyword">let</span> padding_needed = columns_short + padding_width - <span class="number">1</span> / padding_width;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = <span class="built_in">String</span>::with_capacity(s.len() + padding_needed);</span><br><span class="line">    t.extend((<span class="number">0</span>..padding_needed).map(|_| c)</span><br><span class="line">    t.push_str(&amp;s);</span><br><span class="line">    s = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*This uses the Unicode display width to determine the padding needed. This will be appropriate for most uses of monospaced text.</p><p>It assumes that m won’t combine with other characters to form a grapheme.*</p><p><br></p><h3 id="217-Create-a-Zip-archive"><a href="#217-Create-a-Zip-archive" class="headerlink" title="217. Create a Zip archive"></a>217. <font color="0c0a3e">Create a Zip archive</font></h3><blockquote><p>Create a zip-file with filename name and add the files listed in list to that zip-file.</p></blockquote><p><em>创建压缩文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"archive/zip"</span></span><br><span class="line"><span class="string">"bytes"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"readme.txt"</span>,</span><br><span class="line"><span class="string">"gopher.txt"</span>,</span><br><span class="line"><span class="string">"todo.txt"</span>,</span><br><span class="line">&#125;</span><br><span class="line">name := <span class="string">"archive.zip"</span></span><br><span class="line"></span><br><span class="line">err := makeZip(list, name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeZip</span><span class="params">(list []<span class="keyword">string</span>, name <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// Create a buffer to write our archive to.</span></span><br><span class="line">buf := <span class="built_in">new</span>(bytes.Buffer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new zip archive.</span></span><br><span class="line">w := zip.NewWriter(buf)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add some files to the archive.</span></span><br><span class="line"><span class="keyword">for</span> _, filename := <span class="keyword">range</span> list &#123;</span><br><span class="line"><span class="comment">// Open file for reading</span></span><br><span class="line">input, err := os.Open(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create ZIP entry for writing</span></span><br><span class="line">output, err := w.Create(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = io.Copy(output, input)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make sure to check the error on Close.</span></span><br><span class="line">err := w.Close()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">N := buf.Len()</span><br><span class="line">err = ioutil.WriteFile(name, buf.Bytes(), <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">log.Println(<span class="string">"Written a ZIP file of"</span>, N, <span class="string">"bytes"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Create some files in the filesystem.</span></span><br><span class="line"><span class="keyword">var</span> files = []<span class="keyword">struct</span> &#123;</span><br><span class="line">Name, Body <span class="keyword">string</span></span><br><span class="line">&#125;&#123;</span><br><span class="line">&#123;<span class="string">"readme.txt"</span>, <span class="string">"This archive contains some text files."</span>&#125;,</span><br><span class="line">&#123;<span class="string">"gopher.txt"</span>, <span class="string">"Gopher names:\nGeorge\nGeoffrey\nGonzo"</span>&#125;,</span><br><span class="line">&#123;<span class="string">"todo.txt"</span>, <span class="string">"Get animal handling licence.\nWrite more examples."</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">err := ioutil.WriteFile(file.Name, []<span class="keyword">byte</span>(file.Body), <span class="number">0777</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>list contains filenames of files existing in the filesystem.<br>In this example, the zip data is buffered in memory before writing to the filesystem.</em></p><p><code>2009/11/10 23:00:00 Written a ZIP file of 492 bytes</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> zip::write::FileOptions;</span><br><span class="line"><span class="keyword">let</span> path = std::path::Path::new(_name);</span><br><span class="line"><span class="keyword">let</span> file = std::fs::File::create(&amp;path).unwrap();</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> zip = zip::ZipWriter::new(file); zip.start_file(<span class="string">"readme.txt"</span>, FileOptions::default())?;                                                          </span><br><span class="line">zip.write_all(<span class="string">b"Hello, World!\n"</span>)?;</span><br><span class="line">zip.finish()?;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> zip::write::FileOptions;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">zip</span></span>(_name: &amp;<span class="built_in">str</span>, _list: <span class="built_in">Vec</span>&lt;&amp;<span class="built_in">str</span>&gt;) -&gt; zip::result::ZipResult&lt;()&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> path = std::path::Path::new(_name);</span><br><span class="line">    <span class="keyword">let</span> file = std::fs::File::create(&amp;path).unwrap();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> zip = zip::ZipWriter::new(file);</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> _list.iter() &#123;</span><br><span class="line">        zip.start_file(i <span class="keyword">as</span> &amp;<span class="built_in">str</span>, FileOptions::default())?;</span><br><span class="line">    &#125;</span><br><span class="line">    zip.finish()?;</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="218-List-intersection"><a href="#218-List-intersection" class="headerlink" title="218. List intersection"></a>218. <font color="0c0a3e">List intersection</font></h3><blockquote><p>Create list c containing all unique elements that are contained in both lists a and b.<br>c should not contain any duplicates, even if a and b do.<br>The order of c doesn’t matter.</p></blockquote><p><em>列表的交集</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []T&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line">b := []T&#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">7</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Convert to sets</span></span><br><span class="line">seta := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> _, x := <span class="keyword">range</span> a &#123;</span><br><span class="line">seta[x] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">setb := <span class="built_in">make</span>(<span class="keyword">map</span>[T]<span class="keyword">bool</span>, <span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> _, y := <span class="keyword">range</span> b &#123;</span><br><span class="line">setb[y] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate in one pass</span></span><br><span class="line"><span class="keyword">var</span> c []T</span><br><span class="line"><span class="keyword">for</span> x := <span class="keyword">range</span> seta &#123;</span><br><span class="line"><span class="keyword">if</span> setb[x] &#123;</span><br><span class="line">c = <span class="built_in">append</span>(c, x)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[5 7 9]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> unique_a = a.iter().collect::&lt;HashSet&lt;_&gt;&gt;();</span><br><span class="line">    <span class="keyword">let</span> unique_b = b.iter().collect::&lt;HashSet&lt;_&gt;&gt;();</span><br><span class="line">    <span class="keyword">let</span> c = unique_a.intersection(&amp;unique_b).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c: &#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c: [2, 4]</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> set_a: HashSet&lt;_&gt; = a.into_iter().collect();</span><br><span class="line">    <span class="keyword">let</span> set_b: HashSet&lt;_&gt; = b.into_iter().collect();</span><br><span class="line">    <span class="keyword">let</span> c = set_a.intersection(&amp;set_b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"c: &#123;:?&#125;"</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c: [2, 4]</code></p><p><br></p><h3 id="219-Replace-multiple-spaces-with-single-space"><a href="#219-Replace-multiple-spaces-with-single-space" class="headerlink" title="219. Replace multiple spaces with single space"></a>219. <font color="0c0a3e">Replace multiple spaces with single space</font></h3><blockquote><p>Create string t from the value of string s with each sequence of spaces replaced by a single space.<br>Explain if only the space characters will be replaced, or the other whitespaces as well: tabs, newlines.</p></blockquote><p><em>用单个空格替换多个空格</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// regexp created only once, and then reused</span></span><br><span class="line"><span class="keyword">var</span> whitespaces = regexp.MustCompile(<span class="string">`\s+`</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">`</span></span><br><span class="line"><span class="string">one   two</span></span><br><span class="line"><span class="string">   three</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line">t := whitespaces.ReplaceAllString(s, <span class="string">" "</span>)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"t=%q"</span>, t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>t=&quot; one two three &quot;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> regex::Regex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"</span></span><br><span class="line"><span class="string">one   two</span></span><br><span class="line"><span class="string">   three</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line">    <span class="keyword">let</span> re = Regex::new(<span class="string">r"\s+"</span>).unwrap();</span><br><span class="line">    <span class="keyword">let</span> t = re.replace_all(s, <span class="string">" "</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>one two three</code></p><p><br></p><h3 id="220-Create-a-tuple-value"><a href="#220-Create-a-tuple-value" class="headerlink" title="220. Create a tuple value"></a>220. <font color="0c0a3e">Create a tuple value</font></h3><blockquote><p>Create t consisting of 3 values having different types.<br>Explain if the elements of t are strongly typed or not.</p></blockquote><p><em>创建元组值a</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t := []<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="number">2.5</span>,</span><br><span class="line"><span class="string">"hello"</span>,</span><br><span class="line"><span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A slice of empty interface may hold any values (not strongly typed).</strong></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> t = (<span class="number">2.5</span>, <span class="string">"hello"</span>, -<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    t.<span class="number">2</span> -= <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(2.5, &quot;hello&quot;, -5)</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;202-Sum-of-squares&quot;&gt;&lt;a href=&quot;#202-Sum-of-squares&quot; class=&quot;headerlink&quot; title=&quot;202. Sum of squares&quot;&gt;&lt;/a&gt;202. &lt;font color=&quot;0
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(10)</title>
    <link href="http://www.dashen.tech/2021/07/23/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-10/"/>
    <id>http://www.dashen.tech/2021/07/23/Rust-vs-Go-常用语法对比-10/</id>
    <published>2021-07-23T14:43:58.000Z</published>
    <updated>2021-07-17T11:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="182-Quine-program"><a href="#182-Quine-program" class="headerlink" title="182. Quine program"></a>182. <font color="0c0a3e">Quine program</font></h3><blockquote><pre><code>Output the source of the program.</code></pre></blockquote><p><em>输出程序的源代码</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s%c%s%c\n"</span>, s, <span class="number">0x60</span>, s, <span class="number">0x60</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">`package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">fmt.Printf("%s%c%s%c\n", s, 0x60, s, 0x60)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var s = `</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%s%c%s%c\n"</span>, s, <span class="number">0x60</span>, s, <span class="number">0x60</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">`package main</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">import "fmt"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">func main() &#123;</span></span><br><span class="line"><span class="string">fmt.Printf("%s%c%s%c\n", s, 0x60, s, 0x60)</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">var s = `</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"fn main() &#123;\n    let x = "</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"print!(\"&#123;&#125;&#123;:?&#125;;\n    let y = &#123;:?&#125;;\n    &#123;&#125;\", x, x, y, y)\n&#125;\n"</span>;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;&#123;:?&#125;;</span></span><br><span class="line"><span class="string">    let y = &#123;:?&#125;;</span></span><br><span class="line"><span class="string">    &#123;&#125;"</span>, x, x, y, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">"fn main() &#123;\n    let x = "</span>;</span><br><span class="line">    <span class="keyword">let</span> y = <span class="string">"print!(\"&#123;&#125;&#123;:?&#125;;\n    let y = &#123;:?&#125;;\n    &#123;&#125;\", x, x, y, y)\n&#125;\n"</span>;</span><br><span class="line">    <span class="built_in">print!</span>(<span class="string">"&#123;&#125;&#123;:?&#125;;</span></span><br><span class="line"><span class="string">    let y = &#123;:?&#125;;</span></span><br><span class="line"><span class="string">    &#123;&#125;"</span>, x, x, y, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;<span class="built_in">print!</span>(<span class="string">"&#123;&#125;,&#123;0:?&#125;)&#125;&#125;"</span>,<span class="string">"fn main()&#123;print!(\"&#123;&#125;,&#123;0:?&#125;)&#125;&#125;\""</span>)&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><p><code>fn main(){print!(&quot;{},{0:?})}}&quot;,&quot;fn main(){print!(\&quot;{},{0:?})}}\&quot;&quot;)}</code></p><p><br></p><h3 id="184-Tomorrow"><a href="#184-Tomorrow" class="headerlink" title="184. Tomorrow"></a>184. <font color="0c0a3e">Tomorrow</font></h3><blockquote><p>Assign to variable t a string representing the day, month and year of the day after the current date.</p></blockquote><p><em>明天的日期</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line">t := time.Now().Add(<span class="number">24</span> * time.Hour).Format(<span class="string">"2006-01-02"</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> t = chrono::Utc::now().date().succ().to_string();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2021-07-18UTC</code></p><p><br></p><h3 id="185-Execute-function-in-30-seconds"><a href="#185-Execute-function-in-30-seconds" class="headerlink" title="185. Execute function in 30 seconds"></a>185. <font color="0c0a3e">Execute function in 30 seconds</font></h3><blockquote><p>Schedule the execution of f(42) in 30 seconds.</p></blockquote><p><em>30秒内执行功能</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"time"</span></span><br><span class="line">timer := time.AfterFunc(</span><br><span class="line"><span class="number">30</span>*time.Second,</span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">f(<span class="number">42</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Scheduling f(42)"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">time.Sleep(<span class="number">3</span> * time.Second)</span><br><span class="line">f(<span class="number">42</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Poor man's waiting of completion of f.</span></span><br><span class="line"><span class="comment">// Don't do this in prod, use proper synchronization instead.</span></span><br><span class="line">time.Sleep(<span class="number">4</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Received"</span>, i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Scheduling f(42)</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> std::thread::sleep;</span><br><span class="line">sleep(Duration::new(<span class="number">30</span>, <span class="number">0</span>));</span><br><span class="line">f(<span class="number">42</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="186-Exit-program-cleanly"><a href="#186-Exit-program-cleanly" class="headerlink" title="186. Exit program cleanly"></a>186. <font color="0c0a3e">Exit program cleanly</font></h3><blockquote><p>Exit a program cleanly indicating no error to OS</p></blockquote><p><em>干净地退出程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"A"</span>)</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>A</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">process1()</span><br><span class="line">process2()</span><br><span class="line">process3()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process1</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process2</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 2"</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"A"</span>)</span><br><span class="line"><span class="keyword">defer</span> os.Exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">"B"</span>)</span><br><span class="line">fmt.Println(<span class="string">"C"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">process3</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"process 3"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">process <span class="number">1</span></span><br><span class="line">process <span class="number">2</span></span><br><span class="line">C</span><br><span class="line">B</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::exit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"A"</span>);</span><br><span class="line">    exit(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>A</code></p><p><br></p><h3 id="189-Filter-and-transform-list"><a href="#189-Filter-and-transform-list" class="headerlink" title="189. Filter and transform list"></a>189. <font color="0c0a3e">Filter and transform list</font></h3><blockquote><p>Produce a new list y containing the result of function T applied to all elements e of list x that match the predicate P.</p></blockquote><p><em>过滤和转换列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">P</span><span class="params">(e <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// Predicate "is even"</span></span><br><span class="line"><span class="keyword">return</span> e%<span class="number">2</span> == <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Result = <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">T</span><span class="params">(e <span class="keyword">int</span>)</span> <span class="title">Result</span></span> &#123;</span><br><span class="line"><span class="comment">// Transformation "square"</span></span><br><span class="line"><span class="keyword">return</span> e * e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := []<span class="keyword">int</span>&#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> y []Result</span><br><span class="line"><span class="keyword">for</span> _, e := <span class="keyword">range</span> x &#123;</span><br><span class="line"><span class="keyword">if</span> P(e) &#123;</span><br><span class="line">y = <span class="built_in">append</span>(y, T(e))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[16 36 64 100]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> y = x.iter()</span><br><span class="line">.filter(P)</span><br><span class="line">        .map(T)</span><br><span class="line">.collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="190-Call-an-external-C-function"><a href="#190-Call-an-external-C-function" class="headerlink" title="190. Call an external C function"></a>190. <font color="0c0a3e">Call an external C function</font></h3><blockquote><p>Declare an external C function with the prototype<br>void foo(double *a, int n);<br>and call it, passing an array (or a list) of size 10 to a and 10 to n.<br>Use only standard features of your language.</p></blockquote><p><em>调用外部C函数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void foo(double *a, int n);</span></span><br><span class="line"><span class="comment">// double a[] = &#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"C"</span></span><br><span class="line"></span><br><span class="line">C.foo(C.a, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line">    <span class="comment">/// # Safety</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// `a` must point to an array of at least size 10</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">foo</span></span>(a: *<span class="keyword">mut</span> libc::c_double, n: libc::c_int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> a = [<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>, <span class="number">4.0</span>, <span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>, <span class="number">8.0</span>, <span class="number">9.0</span>];</span><br><span class="line"><span class="keyword">let</span> n = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">unsafe</span> &#123;</span><br><span class="line">    foo(a.as_mut_ptr(), n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="191-Check-if-any-value-in-a-list-is-larger-than-a-limit"><a href="#191-Check-if-any-value-in-a-list-is-larger-than-a-limit" class="headerlink" title="191. Check if any value in a list is larger than a limit"></a>191. <font color="0c0a3e">Check if any value in a list is larger than a limit</font></h3><blockquote><pre><code>Given a one-dimensional array a, check if any value is larger than x, and execute the procedure f if that is the case</code></pre></blockquote><p><em>检查列表中是否有任何值大于限制</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Larger found"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">x := <span class="number">4</span></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> a &#123;</span><br><span class="line"><span class="keyword">if</span> v &gt; x &#123;</span><br><span class="line">f()</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Larger found</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">35</span>;</span><br><span class="line">    <span class="keyword">if</span> a.iter().any(|&amp;elem| elem &gt; x) &#123;</span><br><span class="line">        f()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">if</span> a.iter().any(|&amp;elem| elem &gt; x) &#123;</span><br><span class="line">        g()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"F"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">g</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"G"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>F</code></p><p><br></p><h3 id="192-Declare-a-real-variable-with-at-least-20-digits"><a href="#192-Declare-a-real-variable-with-at-least-20-digits" class="headerlink" title="192. Declare a real variable with at least 20 digits"></a>192. <font color="0c0a3e">Declare a real variable with at least 20 digits</font></h3><blockquote><p>Declare a real variable a with at least 20 digits; if the type does not exist, issue an error at compile time.</p></blockquote><p><em>声明一个至少有20位数字的实变量</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, _, err := big.ParseFloat(<span class="string">"123456789.123456789123465789"</span>, <span class="number">10</span>, <span class="number">200</span>, big.ToZero)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.234567891234567891234657889999999999999999999999999999999999e+08</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rust_decimal::Decimal;</span><br><span class="line"><span class="keyword">use</span> std::<span class="built_in">str</span>::FromStr;</span><br><span class="line"><span class="keyword">let</span> a = Decimal::from_str(<span class="string">"1234567890.123456789012345"</span>).unwrap();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="197-Get-a-list-of-lines-from-a-file"><a href="#197-Get-a-list-of-lines-from-a-file" class="headerlink" title="197.  Get a list of lines from a file"></a>197. <font color="0c0a3e"> Get a list of lines from a file</font></h3><blockquote><p>Retrieve the contents of file at path into a list of strings lines, in which each element is a line of the file.</p></blockquote><p><em>从文件中获取行列表.将文件路径中的内容检索到字符串行列表中，其中每个元素都是文件的一行。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readLines</span><span class="params">(path <span class="keyword">string</span>)</span> <span class="params">([]<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">b, err := ioutil.ReadFile(path)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line">lines := strings.Split(<span class="keyword">string</span>(b), <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">return</span> lines, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lines, err := readLines(<span class="string">"/tmp/file1"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, line := <span class="keyword">range</span> lines &#123;</span><br><span class="line">fmt.Printf(<span class="string">"line %d: %s\n"</span>, i, line)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">data := []<span class="keyword">byte</span>(<span class="string">`foo</span></span><br><span class="line"><span class="string">bar</span></span><br><span class="line"><span class="string">baz`</span>)</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/file1"</span>, data, <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">line <span class="number">0</span>: foo</span><br><span class="line">line <span class="number">1</span>: bar</span><br><span class="line">line <span class="number">2</span>: baz</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::io::BufReader;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> path = <span class="string">"/etc/hosts"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> lines = BufReader::new(File::open(path).unwrap())</span><br><span class="line">        .lines()</span><br><span class="line">        .collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, lines);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[Ok(&quot;127.0.0.1\tlocalhost&quot;), Ok(&quot;::1\tlocalhost ip6-localhost ip6-loopback&quot;), Ok(&quot;fe00::0\tip6-localnet&quot;), Ok(&quot;ff00::0\tip6-mcastprefix&quot;), Ok(&quot;ff02::1\tip6-allnodes&quot;), Ok(&quot;ff02::2\tip6-allrouters&quot;)]</code></p><p><br></p><h3 id="198-Abort-program-execution-with-error-condition"><a href="#198-Abort-program-execution-with-error-condition" class="headerlink" title="198. Abort program execution with error condition"></a>198. <font color="0c0a3e">Abort program execution with error condition</font></h3><blockquote><p>Abort program execution with error condition x (where x is an integer value)</p></blockquote><p><em>出现错误情况时中止程序执行</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">1</span></span><br><span class="line">os.Exit(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Program exited: status 1.</em></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process;</span><br><span class="line">process::exit(x);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="200-Return-hypotenuse"><a href="#200-Return-hypotenuse" class="headerlink" title="200. Return hypotenuse"></a>200. <font color="0c0a3e">Return hypotenuse</font></h3><blockquote><p>Returns the hypotenuse h of the triangle where the sides adjacent to the square angle have lengths x and y.</p></blockquote><p><em>返回三角形的斜边h，其中与直角相邻的边的长度为x和y。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="number">1.0</span></span><br><span class="line">y := <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">h := math.Hypot(x, y)</span><br><span class="line">fmt.Println(h)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.4142135623730951</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (x, y) = (<span class="number">1.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="keyword">let</span> h = hypot(x, y);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, h);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">hypot</span></span>(x: <span class="built_in">f64</span>, y: <span class="built_in">f64</span>) -&gt; <span class="built_in">f64</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> num = x.powi(<span class="number">2</span>) + y.powi(<span class="number">2</span>);</span><br><span class="line">    num.powf(<span class="number">0.5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1.4142135623730951</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;182-Quine-program&quot;&gt;&lt;a href=&quot;#182-Quine-program&quot; class=&quot;headerlink&quot; title=&quot;182. Quine program&quot;&gt;&lt;/a&gt;182. &lt;font color=&quot;0c0a
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包手机</title>
    <link href="http://www.dashen.tech/2021/07/23/Wireshark%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA/"/>
    <id>http://www.dashen.tech/2021/07/23/Wireshark抓包手机/</id>
    <published>2021-07-23T02:03:08.000Z</published>
    <updated>2021-07-24T08:30:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.baidu.com/s?tn=50000021_hao_pg&amp;ie=utf-8&amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzPW6Ln1fsn1n3rauW5y99U1Dznzu9m1Ydn1fzP1c4P1T&amp;ssl_sample=normal&amp;srcqid=5482817894475453453&amp;H123Tmp=nunew7&amp;word=wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA" target="_blank" rel="noopener">https://www.baidu.com/s?tn=50000021_hao_pg&amp;ie=utf-8&amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzPW6Ln1fsn1n3rauW5y99U1Dznzu9m1Ydn1fzP1c4P1T&amp;ssl_sample=normal&amp;srcqid=5482817894475453453&amp;H123Tmp=nunew7&amp;word=wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA</a></p><p><a href="https://www.google.com/search?q=mac+wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA&amp;oq=mac+wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA&amp;aqs=chrome..69i57.192j0j1&amp;sourceid=chrome&amp;ie=UTF-8" target="_blank" rel="noopener">https://www.google.com/search?q=mac+wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA&amp;oq=mac+wireshark%E6%80%8E%E4%B9%88%E6%8A%93%E5%8C%85%E6%89%8B%E6%9C%BA&amp;aqs=chrome..69i57.192j0j1&amp;sourceid=chrome&amp;ie=UTF-8</a></p><p><a href="https://www.jianshu.com/p/82bcdb1decf7" target="_blank" rel="noopener">https://www.jianshu.com/p/82bcdb1decf7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.baidu.com/s?tn=50000021_hao_pg&amp;amp;ie=utf-8&amp;amp;sc=UWd1pgw-pA7EnHc1FMfqnHmzPW6Ln1fsn1n3rauW5y99U1Dznzu9m1Ydn1fzP1c4P
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(9)</title>
    <link href="http://www.dashen.tech/2021/07/22/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-9/"/>
    <id>http://www.dashen.tech/2021/07/22/Rust-vs-Go-常用语法对比-9/</id>
    <published>2021-07-22T13:43:58.000Z</published>
    <updated>2021-07-17T11:25:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="161-Multiply-all-the-elements-of-a-list"><a href="#161-Multiply-all-the-elements-of-a-list" class="headerlink" title="161. Multiply all the elements of a list"></a>161. <font color="0c0a3e">Multiply all the elements of a list</font></h3><blockquote><p>Multiply all the elements of the list elements by a constant c</p></blockquote><p><em>将list中的每个元素都乘以一个数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> c = <span class="number">5.5</span></span><br><span class="line">elements := []<span class="keyword">float64</span>&#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">30</span>&#125;</span><br><span class="line">fmt.Println(elements)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> elements &#123;</span><br><span class="line">elements[i] *= c</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(elements)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span> <span class="number">4</span> <span class="number">9</span> <span class="number">30</span>]</span><br><span class="line">[<span class="number">11</span> <span class="number">22</span> <span class="number">49.5</span> <span class="number">165</span>]</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> elements: <span class="built_in">Vec</span>&lt;<span class="built_in">f32</span>&gt; = <span class="built_in">vec!</span>[<span class="number">2.0</span>, <span class="number">3.5</span>, <span class="number">4.0</span>];</span><br><span class="line">    <span class="keyword">let</span> c = <span class="number">2.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> elements = elements.into_iter().map(|x| c * x).collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, elements);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[4.0, 7.0, 8.0]</code></p><p><br></p><h3 id="162-Execute-procedures-depending-on-options"><a href="#162-Execute-procedures-depending-on-options" class="headerlink" title="162. Execute procedures depending on options"></a>162. <font color="0c0a3e">Execute procedures depending on options</font></h3><blockquote><p>execute bat if b is a program option and fox if f is a program option.</p></blockquote><p><em>根据选项执行程序</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"flag"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Just for testing in the Playground, let's simulate</span></span><br><span class="line"><span class="comment">// the user called this program with command line</span></span><br><span class="line"><span class="comment">// flags -f and -b</span></span><br><span class="line">os.Args = []<span class="keyword">string</span>&#123;<span class="string">"program"</span>, <span class="string">"-f"</span>, <span class="string">"-b"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = flag.Bool(<span class="string">"b"</span>, <span class="literal">false</span>, <span class="string">"Do bat"</span>)</span><br><span class="line"><span class="keyword">var</span> f = flag.Bool(<span class="string">"f"</span>, <span class="literal">false</span>, <span class="string">"Do fox"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="keyword">if</span> *b &#123;</span><br><span class="line">bar()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> *f &#123;</span><br><span class="line">fox()</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">"The end."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"BAR"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fox</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"FOX"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BAR</span><br><span class="line">FOX</span><br><span class="line">The end.</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(arg) = ::std::env::args().nth(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> &amp;arg == <span class="string">"f"</span> &#123;</span><br><span class="line">        fox();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> &amp;arg = <span class="string">"b"</span> &#123;</span><br><span class="line">        bat();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">eprintln!(<span class="string">"invalid argument: &#123;&#125;"</span>, arg),</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eprintln!(<span class="string">"missing argument"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(arg) = ::std::env::args().nth(<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">match</span> arg.as_str() &#123;</span><br><span class="line">        <span class="string">"f"</span> =&gt; fox(),</span><br><span class="line">        <span class="string">"b"</span> =&gt; <span class="keyword">box</span>(),</span><br><span class="line">        _ =&gt; eprintln!(<span class="string">"invalid argument: &#123;&#125;"</span>, arg),</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    eprintln!(<span class="string">"missing argument"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="163-Print-list-elements-by-group-of-2"><a href="#163-Print-list-elements-by-group-of-2" class="headerlink" title="163. Print list elements by group of 2"></a>163. <font color="0c0a3e">Print list elements by group of 2</font></h3><blockquote><p>Print all the list elements, two by two, assuming list length is even.</p></blockquote><p><em>两个一组打印数组元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">list := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i+<span class="number">1</span> &lt; <span class="built_in">len</span>(list); i += <span class="number">2</span> &#123;</span><br><span class="line">fmt.Println(list[i], list[i+<span class="number">1</span>])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a b</span><br><span class="line">c d</span><br><span class="line">e f</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> list.chunks(<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"(&#123;&#125;, &#123;&#125;)"</span>, pair[<span class="number">0</span>], pair[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="164-Open-URL-in-default-browser"><a href="#164-Open-URL-in-default-browser" class="headerlink" title="164. Open URL in default browser"></a>164. <font color="0c0a3e">Open URL in default browser</font></h3><blockquote><p>Open the URL s in the default browser.<br>Set boolean b to indicate whether the operation was successful.</p></blockquote><p><em>在默认浏览器中打开链接</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"github.com/skratchdot/open-golang/open"</span></span><br><span class="line">b := open.Start(s) == <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">openbrowser</span><span class="params">(url <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> runtime.GOOS &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"linux"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"xdg-open"</span>, url).Start()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"windows"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"rundll32"</span>, <span class="string">"url.dll,FileProtocolHandler"</span>, url).Start()</span><br><span class="line"><span class="keyword">case</span> <span class="string">"darwin"</span>:</span><br><span class="line">err = exec.Command(<span class="string">"open"</span>, url).Start()</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">err = fmt.Errorf(<span class="string">"unsupported platform"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> webbrowser;</span><br><span class="line">webbrowser::open(s).expect(<span class="string">"failed to open URL"</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="165-Last-element-of-list"><a href="#165-Last-element-of-list" class="headerlink" title="165. Last element of list"></a>165. <font color="0c0a3e">Last element of list</font></h3><blockquote><p>Assign to variable x the last element of list items.</p></blockquote><p><em>列表中的最后一个元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items := []<span class="keyword">string</span>&#123; <span class="string">"what"</span>, <span class="string">"a"</span>, <span class="string">"mess"</span> &#125;</span><br><span class="line"></span><br><span class="line">x := items[<span class="built_in">len</span>(items)<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">fmt.Println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mess</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = <span class="built_in">vec!</span>[<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line">    <span class="keyword">let</span> x = items[items.len()-<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, -<span class="number">20</span>, <span class="number">9</span>, <span class="number">42</span>];</span><br><span class="line">    <span class="keyword">let</span> x = items.last().unwrap();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>42</code></p><p><br></p><h3 id="166-Concatenate-two-lists"><a href="#166-Concatenate-two-lists" class="headerlink" title="166. Concatenate two lists"></a>166. <font color="0c0a3e">Concatenate two lists</font></h3><blockquote><p>Create list ab containing all the elements of list a, followed by all elements of list b.</p></blockquote><p><em>连接两个列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">string</span>&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []<span class="keyword">string</span>&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line">ab := <span class="built_in">append</span>(a, b...)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">a := []T&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ab []T</span><br><span class="line">ab = <span class="built_in">append</span>(<span class="built_in">append</span>(ab, a...), b...)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">a := []T&#123;<span class="string">"The "</span>, <span class="string">"quick "</span>&#125;</span><br><span class="line">b := []T&#123;<span class="string">"brown "</span>, <span class="string">"fox "</span>&#125;</span><br><span class="line"></span><br><span class="line">ab := <span class="built_in">make</span>([]T, <span class="built_in">len</span>(a)+<span class="built_in">len</span>(b))</span><br><span class="line"><span class="built_in">copy</span>(ab, a)</span><br><span class="line"><span class="built_in">copy</span>(ab[<span class="built_in">len</span>(a):], b)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, ab)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;The &quot; &quot;quick &quot; &quot;brown &quot; &quot;fox &quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">vec!</span>[<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> ab = [a, b].concat();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, ab);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 4]</code></p><p><br></p><h3 id="167-Trim-prefix"><a href="#167-Trim-prefix" class="headerlink" title="167. Trim prefix"></a>167. <font color="0c0a3e">Trim prefix</font></h3><blockquote><p>Create string t consisting of string s with its prefix p removed (if s starts with p).</p></blockquote><p><em>移除前缀</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"café-society"</span></span><br><span class="line">p := <span class="string">"café"</span></span><br><span class="line"></span><br><span class="line">t := strings.TrimPrefix(s, p)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>-society</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.trim_start_matches(p);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// Warning: trim_start_matches removes several leading occurrences of p, if present.</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.trim_start_matches(p);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> t = <span class="keyword">if</span> s.starts_with(p) &#123; &amp;s[p.len()..] &#125; <span class="keyword">else</span> &#123; s &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>pre_thing</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.strip_prefix(p).unwrap_or_else(|| s);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// If prefix p is repeated in s, it is removed only once by strip_prefix</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="string">"pre_pre_thing"</span>;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"pre_"</span>;</span><br><span class="line">        <span class="keyword">let</span> t = s.strip_prefix(p).unwrap_or_else(|| s);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">pre_thing</span><br></pre></td></tr></table></figure><p><br></p><h3 id="168-Trim-suffix"><a href="#168-Trim-suffix" class="headerlink" title="168. Trim suffix"></a>168. <font color="0c0a3e">Trim suffix</font></h3><blockquote><p>Create string t consisting of string s with its suffix w removed (if s ends with w).</p></blockquote><p><em>移除后缀</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"café-society"</span></span><br><span class="line">w := <span class="string">"society"</span></span><br><span class="line"></span><br><span class="line">t := strings.TrimSuffix(s, w)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>café-</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w); <span class="comment">// s does not end with w, it is left intact</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.trim_end_matches(w); <span class="comment">// removes several occurrences of w</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br><span class="line">thing</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s); <span class="comment">// s does not end with w, it is left intact</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"thing_suf_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> w = <span class="string">"_suf"</span>;</span><br><span class="line">    <span class="keyword">let</span> t = s.strip_suffix(w).unwrap_or(s); <span class="comment">// only 1 occurrence of w is removed</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thing</span><br><span class="line">thing</span><br><span class="line">thing_suf</span><br></pre></td></tr></table></figure><p><br></p><h3 id="169-String-length"><a href="#169-String-length" class="headerlink" title="169. String length"></a>169. <font color="0c0a3e">String length</font></h3><blockquote><pre><code>Assign to integer n the number of characters of string s.</code></pre><p>Make sure that multibyte characters are properly handled.<br>n can be different from the number of bytes of s.</p></blockquote><p><em>字符串长度</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"unicode/utf8"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Hello, 世界"</span></span><br><span class="line">n := utf8.RuneCountInString(s)</span><br><span class="line"></span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>9</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"世界"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = s.chars().count();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; characters"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>2 characters</code></p><p><br></p><h3 id="170-Get-map-size"><a href="#170-Get-map-size" class="headerlink" title="170. Get map size"></a>170. <font color="0c0a3e">Get map size</font></h3><blockquote><p>Set n to the number of elements stored in mymap.<br>This is not always equal to the map capacity.</p></blockquote><p><em>获取map的大小</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">mymap := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>, <span class="string">"c"</span>: <span class="number">3</span>&#125;</span><br><span class="line">n := <span class="built_in">len</span>(mymap)</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> mymap: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [(<span class="string">"one"</span>, <span class="number">1</span>), (<span class="string">"two"</span>, <span class="number">2</span>)].iter().cloned().collect();</span><br><span class="line">    mymap.insert(<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> n = mymap.len();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"mymap has &#123;:?&#125; entries"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mymap has 3 entries</code></p><p><br></p><h3 id="171-Add-an-element-at-the-end-of-a-list"><a href="#171-Add-an-element-at-the-end-of-a-list" class="headerlink" title="171. Add an element at the end of a list"></a>171. <font color="0c0a3e">Add an element at the end of a list</font></h3><blockquote><p>Append element x to the list s.</p></blockquote><p><em>在list尾部添加元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>&#125;</span><br><span class="line">x := <span class="number">21</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">append</span>(s, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1 1 2 3 5 8 13 21]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line">    s.push(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[1, 2, 3, 99]</code></p><p><br></p><h3 id="172-Insert-entry-in-map"><a href="#172-Insert-entry-in-map" class="headerlink" title="172. Insert entry in map"></a>172. <font color="0c0a3e">Insert entry in map</font></h3><blockquote><p>Insert value v for key k in map m.</p></blockquote><p><em>向map中写入元素</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"one"</span>: <span class="number">1</span>, <span class="string">"two"</span>: <span class="number">2</span>&#125;</span><br><span class="line">k := <span class="string">"three"</span></span><br><span class="line">v := <span class="number">3</span></span><br><span class="line"></span><br><span class="line">m[k] = v</span><br><span class="line"></span><br><span class="line">fmt.Println(m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>map[one:1 three:3 two:2]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> m: HashMap&lt;&amp;<span class="built_in">str</span>, <span class="built_in">i32</span>&gt; = [(<span class="string">"one"</span>, <span class="number">1</span>), (<span class="string">"two"</span>, <span class="number">2</span>)].iter().cloned().collect();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> (k, v) = (<span class="string">"three"</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    m.insert(k, v);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>{&quot;three&quot;: 3, &quot;one&quot;: 1, &quot;two&quot;: 2}</code></p><p><br></p><h3 id="173-Format-a-number-with-grouped-thousands"><a href="#173-Format-a-number-with-grouped-thousands" class="headerlink" title="173. Format a number with grouped thousands"></a>173. <font color="0c0a3e">Format a number with grouped thousands</font></h3><blockquote><p>Number will be formatted with a comma separator between every group of thousands.</p></blockquote><p><em>按千位格式化数字</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"golang.org/x/text/language"</span></span><br><span class="line"><span class="string">"golang.org/x/text/message"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Playground doesn't work with import of external packages.</span></span><br><span class="line"><span class="comment">// However, you may copy this source and test it on your workstation.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := message.NewPrinter(language.English)</span><br><span class="line">s := p.Sprintf(<span class="string">"%d\n"</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 1,000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1,000</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/floscodes/golang-thousands"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The Playground takes more time when importing external packages.</span></span><br><span class="line"><span class="comment">// However, you may want to copy this source and test it on your workstation.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := strconv.Itoa(<span class="number">23489</span>)</span><br><span class="line">s := thousands.Separate(n, <span class="string">"en"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line"><span class="comment">// Output:</span></span><br><span class="line"><span class="comment">// 23,489</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>23,489</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> separator::Separatable;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="number">1000</span>.separated_string());</span><br></pre></td></tr></table></figure><p><br></p><h3 id="174-Make-HTTP-POST-request"><a href="#174-Make-HTTP-POST-request" class="headerlink" title="174. Make HTTP POST request"></a>174. <font color="0c0a3e">Make HTTP POST request</font></h3><blockquote><p>Make a HTTP request with method POST to URL u</p></blockquote><p><em>发起http POST请求</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">contentType := <span class="string">"text/plain"</span></span><br><span class="line"><span class="keyword">var</span> body io.Reader</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello"</span></span><br><span class="line"></span><br><span class="line">response, err := http.Post(u, contentType, body)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err := ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"POST response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line"></span><br><span class="line">response, err = http.Get(u)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err = ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"GET  response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Refusing request verb %q"</span>, r.Method)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello POST :)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST response: 200 Hello Alice (POST)</span><br><span class="line">GET  response: 400 Refusing request verb &quot;GET&quot;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"net"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line"><span class="string">"net/url"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">formValues := url.Values&#123;</span><br><span class="line"><span class="string">"who"</span>: []<span class="keyword">string</span>&#123;<span class="string">"Alice"</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">u := <span class="string">"http://"</span> + localhost + <span class="string">"/hello"</span></span><br><span class="line"></span><br><span class="line">response, err := http.PostForm(u, formValues)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err := ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"POST response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line"></span><br><span class="line">response, err = http.Get(u)</span><br><span class="line">check(err)</span><br><span class="line">buffer, err = ioutil.ReadAll(response.Body)</span><br><span class="line">check(err)</span><br><span class="line">fmt.Println(<span class="string">"GET  response:"</span>, response.StatusCode, <span class="keyword">string</span>(buffer))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localhost = <span class="string">"127.0.0.1:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">http.HandleFunc(<span class="string">"/hello"</span>, myHandler)</span><br><span class="line">startServer()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myHandler</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r.Method != <span class="string">"POST"</span> &#123;</span><br><span class="line">w.WriteHeader(http.StatusBadRequest)</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Refusing request verb %q"</span>, r.Method)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Fprintf(w, <span class="string">"Hello %s (POST)"</span>, r.FormValue(<span class="string">"who"</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">listener, err := net.Listen(<span class="string">"tcp"</span>, localhost)</span><br><span class="line">check(err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> http.Serve(listener, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">check</span><span class="params">(err error)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">error-chain = <span class="string">"0.12.4"</span></span><br><span class="line">reqwest = &#123; version = <span class="string">"0.11.2"</span>, features = [<span class="string">"blocking"</span>] &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> error_chain::error_chain;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">let</span> client = reqwest::blocking::Client::new();</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> response = client.post(u).body(<span class="string">"abc"</span>).send()?;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="175-Bytes-to-hex-string"><a href="#175-Bytes-to-hex-string" class="headerlink" title="175. Bytes to hex string"></a>175. <font color="0c0a3e">Bytes to hex string</font></h3><blockquote><p>From array a of n bytes, build the equivalent hex string s of 2n digits.<br>Each byte (256 possible values) is encoded as two hexadecimal characters (16 possible values per digit).</p></blockquote><p><em>字节转十六进制字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := []<span class="keyword">byte</span>(<span class="string">"Hello"</span>)</span><br><span class="line"></span><br><span class="line">s := hex.EncodeToString(a)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>48656c6c6f</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> core::fmt::Write;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; core::fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">vec!</span>[<span class="number">22</span>, <span class="number">4</span>, <span class="number">127</span>, <span class="number">193</span>];</span><br><span class="line">    <span class="keyword">let</span> n = a.len();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::with_capacity(<span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">for</span> byte <span class="keyword">in</span> a &#123;</span><br><span class="line">        <span class="built_in">write!</span>(s, <span class="string">"&#123;:02X&#125;"</span>, byte)?;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dbg!(s);</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[src/main.rs:12] s = &quot;16047FC1&quot;</code></p><p><br></p><h3 id="176-Hex-string-to-byte-array"><a href="#176-Hex-string-to-byte-array" class="headerlink" title="176. Hex string to byte array"></a>176. <font color="0c0a3e">Hex string to byte array</font></h3><blockquote><p>From hex string s of 2n digits, build the equivalent array a of n bytes.<br>Each pair of hexadecimal characters (16 possible values per digit) is decoded into one byte (256 possible values).</p></blockquote><p><em>十六进制字符串转字节数组</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"encoding/hex"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"48656c6c6f"</span></span><br><span class="line"></span><br><span class="line">a, err := hex.DecodeString(s)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(a)</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(a))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">72</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span>]</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> hex::FromHex</span><br><span class="line"><span class="keyword">let</span> a: <span class="built_in">Vec</span>&lt;<span class="built_in">u8</span>&gt; = <span class="built_in">Vec</span>::from_hex(s).expect(<span class="string">"Invalid Hex String"</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="178-Check-if-point-is-inside-rectangle"><a href="#178-Check-if-point-is-inside-rectangle" class="headerlink" title="178. Check if point is inside rectangle"></a>178. <font color="0c0a3e">Check if point is inside rectangle</font></h3><blockquote><pre><code>Set boolean b to true if if the point with coordinates (x,y) is inside the rectangle with coordinates (x1,y1,x2,y2) , or to false otherwise.</code></pre><p>Describe if the edges are considered to be inside the rectangle.</p></blockquote><p><em>检查点是否在矩形内</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"image"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x1, y1, x2, y2 := <span class="number">1</span>, <span class="number">1</span>, <span class="number">50</span>, <span class="number">100</span></span><br><span class="line">r := image.Rect(x1, y1, x2, y2)</span><br><span class="line"></span><br><span class="line">x, y := <span class="number">10</span>, <span class="number">10</span></span><br><span class="line">p := image.Pt(x, y)</span><br><span class="line">b := p.In(r)</span><br><span class="line">fmt.Println(b)</span><br><span class="line"></span><br><span class="line">x, y = <span class="number">100</span>, <span class="number">100</span></span><br><span class="line">p = image.Pt(x, y)</span><br><span class="line">b = p.In(r)</span><br><span class="line">fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rect</span></span> &#123;</span><br><span class="line">    x1: <span class="built_in">i32</span>,</span><br><span class="line">    x2: <span class="built_in">i32</span>,</span><br><span class="line">    y1: <span class="built_in">i32</span>,</span><br><span class="line">    y2: <span class="built_in">i32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rect &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">contains</span></span>(&amp;<span class="keyword">self</span>, x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.x1 &lt; x &amp;&amp; x &lt; <span class="keyword">self</span>.x2 &amp;&amp; <span class="keyword">self</span>.y1 &lt; y &amp;&amp; y &lt; <span class="keyword">self</span>.y2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="179-Get-center-of-a-rectangle"><a href="#179-Get-center-of-a-rectangle" class="headerlink" title="179. Get center of a rectangle"></a>179. <font color="0c0a3e">Get center of a rectangle</font></h3><blockquote><p>Return the center c of the rectangle with coördinates(x1,y1,x2,y2)</p></blockquote><p><em>获取矩形的中心</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">"image"</span></span><br><span class="line">c := image.Pt((x1+x2)/<span class="number">2</span>, (y1+y2)/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;</span><br><span class="line">    x1: <span class="built_in">f64</span>,</span><br><span class="line">    y1: <span class="built_in">f64</span>,</span><br><span class="line">    x2: <span class="built_in">f64</span>,</span><br><span class="line">    y2: <span class="built_in">f64</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="function"><span class="keyword">fn</span> <span class="title">center</span></span>(&amp;<span class="keyword">self</span>) -&gt; (<span class="built_in">f64</span>, <span class="built_in">f64</span>) &#123;</span><br><span class="line">    ((<span class="keyword">self</span>.x1 + <span class="keyword">self</span>.x2) / <span class="number">2.0</span>, (<span class="keyword">self</span>.y1 + <span class="keyword">self</span>.y2) / <span class="number">2.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> r = Rectangle &#123;</span><br><span class="line">        x1: <span class="number">5</span>.,</span><br><span class="line">        y1: <span class="number">5</span>.,</span><br><span class="line">        x2: <span class="number">10</span>.,</span><br><span class="line">        y2: <span class="number">10</span>.,</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, r.center());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>(7.5, 7.5)</code></p><p><br></p><h3 id="180-List-files-in-directory"><a href="#180-List-files-in-directory" class="headerlink" title="180. List files in directory"></a>180. <font color="0c0a3e">List files in directory</font></h3><blockquote><p>Create list x containing the contents of directory d.<br>x may contain files and subfolders.<br>No recursive subfolder listing.</p></blockquote><p><em>列出目录中的文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">d := <span class="string">"/"</span></span><br><span class="line"></span><br><span class="line">x, err := ioutil.ReadDir(d)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> x &#123;</span><br><span class="line">fmt.Println(f.Name())</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.dockerenv</span><br><span class="line">bin</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">lib</span><br><span class="line">lib64</span><br><span class="line">proc</span><br><span class="line">root</span><br><span class="line">sys</span><br><span class="line">tmp</span><br><span class="line">tmpfs</span><br><span class="line">usr</span><br><span class="line"><span class="keyword">var</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"/etc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = fs::read_dir(d).unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> x &#123;</span><br><span class="line">        <span class="keyword">let</span> entry = entry.unwrap();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, entry.path());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="string">"/etc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> x = std::fs::read_dir(d)</span><br><span class="line">        .unwrap()</span><br><span class="line">        .collect::&lt;<span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;_&gt;, _&gt;&gt;()</span><br><span class="line">        .unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> entry <span class="keyword">in</span> x &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, entry.path());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"/etc/issue.net"</span></span><br><span class="line"><span class="string">"/etc/bindresvport.blacklist"</span></span><br><span class="line"><span class="string">"/etc/rc1.d"</span></span><br><span class="line"><span class="string">"/etc/hostname"</span></span><br><span class="line"><span class="string">"/etc/xattr.conf"</span></span><br><span class="line"><span class="string">"/etc/resolv.conf"</span></span><br><span class="line"><span class="string">"/etc/pam.conf"</span></span><br><span class="line"><span class="string">"/etc/mke2fs.conf"</span></span><br><span class="line"><span class="string">"/etc/e2scrub.conf"</span></span><br><span class="line"><span class="string">"/etc/update-motd.d"</span></span><br><span class="line"><span class="string">"/etc/terminfo"</span></span><br><span class="line"><span class="string">"/etc/alternatives"</span></span><br><span class="line"><span class="string">"/etc/ld.so.cache"</span></span><br><span class="line"><span class="string">"/etc/networks"</span></span><br><span class="line"><span class="string">"/etc/profile"</span></span><br><span class="line"><span class="string">"/etc/debconf.conf"</span></span><br><span class="line"><span class="string">"/etc/security"</span></span><br><span class="line"><span class="string">"/etc/.pwd.lock"</span></span><br><span class="line"><span class="string">"/etc/gai.conf"</span></span><br><span class="line"><span class="string">"/etc/dpkg"</span></span><br><span class="line"><span class="string">"/etc/rc3.d"</span></span><br><span class="line"><span class="string">"/etc/fstab"</span></span><br><span class="line"><span class="string">"/etc/gshadow"</span></span><br><span class="line"><span class="string">"/etc/sysctl.conf"</span></span><br><span class="line"><span class="string">"/etc/rc2.d"</span></span><br><span class="line"><span class="string">"/etc/selinux"</span></span><br><span class="line"><span class="string">"/etc/ld.so.conf.d"</span></span><br><span class="line"><span class="string">"/etc/os-release"</span></span><br><span class="line"><span class="string">"/etc/libaudit.conf"</span></span><br><span class="line"><span class="string">"/etc/login.defs"</span></span><br><span class="line"><span class="string">"/etc/skel"</span></span><br><span class="line"><span class="string">"/etc/shells"</span></span><br><span class="line"><span class="string">"/etc/rc4.d"</span></span><br><span class="line"><span class="string">"/etc/cron.d"</span></span><br><span class="line"><span class="string">"/etc/default"</span></span><br><span class="line"><span class="string">"/etc/lsb-release"</span></span><br><span class="line"><span class="string">"/etc/apt"</span></span><br><span class="line"><span class="string">"/etc/debian_version"</span></span><br><span class="line"><span class="string">"/etc/machine-id"</span></span><br><span class="line"><span class="string">"/etc/deluser.conf"</span></span><br><span class="line"><span class="string">"/etc/group"</span></span><br><span class="line"><span class="string">"/etc/legal"</span></span><br><span class="line"><span class="string">"/etc/rc6.d"</span></span><br><span class="line"><span class="string">"/etc/init.d"</span></span><br><span class="line"><span class="string">"/etc/sysctl.d"</span></span><br><span class="line"><span class="string">"/etc/pam.d"</span></span><br><span class="line"><span class="string">"/etc/passwd"</span></span><br><span class="line"><span class="string">"/etc/rc5.d"</span></span><br><span class="line"><span class="string">"/etc/bash.bashrc"</span></span><br><span class="line"><span class="string">"/etc/hosts"</span></span><br><span class="line"><span class="string">"/etc/rc0.d"</span></span><br><span class="line"><span class="string">"/etc/environment"</span></span><br><span class="line"><span class="string">"/etc/cron.daily"</span></span><br><span class="line"><span class="string">"/etc/shadow"</span></span><br><span class="line"><span class="string">"/etc/ld.so.conf"</span></span><br><span class="line"><span class="string">"/etc/subgid"</span></span><br><span class="line"><span class="string">"/etc/opt"</span></span><br><span class="line"><span class="string">"/etc/logrotate.d"</span></span><br><span class="line"><span class="string">"/etc/subuid"</span></span><br><span class="line"><span class="string">"/etc/profile.d"</span></span><br><span class="line"><span class="string">"/etc/adduser.conf"</span></span><br><span class="line"><span class="string">"/etc/issue"</span></span><br><span class="line"><span class="string">"/etc/rmt"</span></span><br><span class="line"><span class="string">"/etc/host.conf"</span></span><br><span class="line"><span class="string">"/etc/rcS.d"</span></span><br><span class="line"><span class="string">"/etc/nsswitch.conf"</span></span><br><span class="line"><span class="string">"/etc/systemd"</span></span><br><span class="line"><span class="string">"/etc/kernel"</span></span><br><span class="line"><span class="string">"/etc/mtab"</span></span><br><span class="line"><span class="string">"/etc/shadow-"</span></span><br><span class="line"><span class="string">"/etc/passwd-"</span></span><br><span class="line"><span class="string">"/etc/subuid-"</span></span><br><span class="line"><span class="string">"/etc/gshadow-"</span></span><br><span class="line"><span class="string">"/etc/subgid-"</span></span><br><span class="line"><span class="string">"/etc/group-"</span></span><br><span class="line"><span class="string">"/etc/ethertypes"</span></span><br><span class="line"><span class="string">"/etc/logcheck"</span></span><br><span class="line"><span class="string">"/etc/gss"</span></span><br><span class="line"><span class="string">"/etc/bash_completion.d"</span></span><br><span class="line"><span class="string">"/etc/X11"</span></span><br><span class="line"><span class="string">"/etc/perl"</span></span><br><span class="line"><span class="string">"/etc/ca-certificates"</span></span><br><span class="line"><span class="string">"/etc/protocols"</span></span><br><span class="line"><span class="string">"/etc/ca-certificates.conf"</span></span><br><span class="line"><span class="string">"/etc/python2.7"</span></span><br><span class="line"><span class="string">"/etc/localtime"</span></span><br><span class="line"><span class="string">"/etc/xdg"</span></span><br><span class="line"><span class="string">"/etc/timezone"</span></span><br><span class="line"><span class="string">"/etc/mailcap.order"</span></span><br><span class="line"><span class="string">"/etc/emacs"</span></span><br><span class="line"><span class="string">"/etc/ssh"</span></span><br><span class="line"><span class="string">"/etc/magic.mime"</span></span><br><span class="line"><span class="string">"/etc/services"</span></span><br><span class="line"><span class="string">"/etc/ssl"</span></span><br><span class="line"><span class="string">"/etc/ldap"</span></span><br><span class="line"><span class="string">"/etc/rpc"</span></span><br><span class="line"><span class="string">"/etc/mime.types"</span></span><br><span class="line"><span class="string">"/etc/magic"</span></span><br><span class="line"><span class="string">"/etc/mailcap"</span></span><br><span class="line"><span class="string">"/etc/inputrc"</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;161-Multiply-all-the-elements-of-a-list&quot;&gt;&lt;a href=&quot;#161-Multiply-all-the-elements-of-a-list&quot; class=&quot;headerlink&quot; title=&quot;16
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>仿射类型(Affine Type)</title>
    <link href="http://www.dashen.tech/2021/07/21/%E4%BB%BF%E5%B0%84%E7%B1%BB%E5%9E%8B-Affine-Type/"/>
    <id>http://www.dashen.tech/2021/07/21/仿射类型-Affine-Type/</id>
    <published>2021-07-21T15:14:48.000Z</published>
    <updated>2021-07-21T15:15:12.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/28702292" target="_blank" rel="noopener">https://www.zhihu.com/question/28702292</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/28702292&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/28702292&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust vs Go:常用语法对比(8)</title>
    <link href="http://www.dashen.tech/2021/07/21/Rust-vs-Go-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%AF%B9%E6%AF%94-8/"/>
    <id>http://www.dashen.tech/2021/07/21/Rust-vs-Go-常用语法对比-8/</id>
    <published>2021-07-21T11:43:58.000Z</published>
    <updated>2021-07-17T08:29:15.000Z</updated>
    
    <content type="html"><![CDATA[<p><br></p><h3 id="141-Iterate-in-sequence-over-two-lists"><a href="#141-Iterate-in-sequence-over-two-lists" class="headerlink" title="141. Iterate in sequence over two lists"></a>141. <font color="0c0a3e">Iterate in sequence over two lists</font></h3><blockquote><p>Iterate in sequence over the elements of the list items1 then items2. For each iteration print the element.</p></blockquote><p><em>依次迭代两个列表<br>依次迭代列表项1和项2的元素。每次迭代打印元素。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items1 := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line">items2 := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items1 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> items2 &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> item1 = <span class="built_in">vec!</span>[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line">    <span class="keyword">let</span> item2 = <span class="built_in">vec!</span>[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> item1.iter().chain(item2.iter()) &#123;</span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">"&#123;&#125; "</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>1 2 3 a b c</code></p><p><br></p><h3 id="142-Hexadecimal-digits-of-an-integer"><a href="#142-Hexadecimal-digits-of-an-integer" class="headerlink" title="142. Hexadecimal digits of an integer"></a>142. <font color="0c0a3e">Hexadecimal digits of an integer</font></h3><blockquote><p>Assign to string s the hexadecimal representation (base 16) of integer x.<br>E.g. 999 -&gt; “3e7”</p></blockquote><p><em>将整数x的十六进制表示(16进制)赋给字符串s。</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := <span class="keyword">int64</span>(<span class="number">999</span>)</span><br><span class="line">s := strconv.FormatInt(x, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3e7</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/big"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">x := big.NewInt(<span class="number">999</span>)</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%x"</span>, x)</span><br><span class="line"></span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3e7</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">999</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:X&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:x&#125;"</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>{:X} produces uppercase hex.<br>{:x} produces lowercase hex.</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3E7</span></span><br><span class="line"><span class="number">3e7</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="143-Iterate-alternatively-over-two-lists"><a href="#143-Iterate-alternatively-over-two-lists" class="headerlink" title="143. Iterate alternatively over two lists"></a>143. <font color="0c0a3e">Iterate alternatively over two lists</font></h3><blockquote><p>Iterate alternatively over the elements of the list items1 and items2. For each iteration, print the element.<br>Explain what happens if items1 and items2 have different size.</p></blockquote><p><em>交替迭代两个列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">items1 := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>&#125;</span><br><span class="line">items2 := []<span class="keyword">string</span>&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(items1) || i &lt; <span class="built_in">len</span>(items2); i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(items1) &#123;</span><br><span class="line">fmt.Println(items1[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> i &lt; <span class="built_in">len</span>(items2) &#123;</span><br><span class="line">fmt.Println(items2[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">A</span><br><span class="line">b</span><br><span class="line">B</span><br><span class="line">C</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> itertools;</span><br><span class="line"><span class="keyword">use</span> itertools::izip;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> items1 = [<span class="number">5</span>, <span class="number">15</span>, <span class="number">25</span>];</span><br><span class="line">    <span class="keyword">let</span> items2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pair <span class="keyword">in</span> izip!(&amp;items1, &amp;items2) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, pair.<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, pair.<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="number">30</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="144-Check-if-file-exists"><a href="#144-Check-if-file-exists" class="headerlink" title="144. Check if file exists"></a>144. <font color="0c0a3e">Check if file exists</font></h3><blockquote></blockquote><p>Set boolean b to true if file at path fp exists on filesystem; false otherwise.<br>Beware that you should never do this and then in the next instruction assume the result is still valid, this is a race condition on any multitasking OS.</p><p><em>检查文件是否存在</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fp := <span class="string">"foo.txt"</span></span><br><span class="line">_, err := os.Stat(fp)</span><br><span class="line">b := !os.IsNotExist(err)</span><br><span class="line">fmt.Println(fp, <span class="string">"exists:"</span>, b)</span><br><span class="line"></span><br><span class="line">fp = <span class="string">"bar.txt"</span></span><br><span class="line">_, err = os.Stat(fp)</span><br><span class="line">b = !os.IsNotExist(err)</span><br><span class="line">fmt.Println(fp, <span class="string">"exists:"</span>, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">ioutil.WriteFile(<span class="string">"foo.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`abc`</span>), <span class="number">0644</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>There’s no specific existence check func in standard library, so we have to inspect an error return value.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo.txt exists: <span class="literal">true</span></span><br><span class="line">bar.txt exists: <span class="literal">false</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> fp = <span class="string">"/etc/hosts"</span>;</span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(fp).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, fp, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fp = <span class="string">"/etc/kittens"</span>;</span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(fp).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;: &#123;&#125;"</span>, fp, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/hosts: <span class="literal">true</span></span><br><span class="line">/etc/kittens: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="145-Print-log-line-with-datetime"><a href="#145-Print-log-line-with-datetime" class="headerlink" title="145. Print log line with datetime"></a>145. <font color="0c0a3e">Print log line with datetime</font></h3><blockquote><p>Print message msg, prepended by current date and time.<br>Explain what behavior is idiomatic: to stdout or stderr, and what the date format is.</p></blockquote><p><em>打印带时间的日志</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"log"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">msg := <span class="string">"Hello, playground"</span></span><br><span class="line">log.Println(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The date is fixed in the past in the Playground, never mind.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// See http://www.programming-idioms.org/idiom/145/print-log-line-with-date/1815/go</span></span><br></pre></td></tr></table></figure><p><code>2009/11/10 23:00:00 Hello, playground</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> msg = <span class="string">"Hello"</span>;</span><br><span class="line">    eprintln!(<span class="string">"[&#123;&#125;] &#123;&#125;"</span>, humantime::format_rfc3339_seconds(std::time::SystemTime::now()), msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[2021-07-17T07:14:03Z] Hello</code></p><p><br></p><h3 id="146-Convert-string-to-floating-point-number"><a href="#146-Convert-string-to-floating-point-number" class="headerlink" title="146. Convert string to floating point number"></a>146. <font color="0c0a3e">Convert string to floating point number</font></h3><blockquote><p>Extract floating point value f from its string representation s</p></blockquote><p><em>字符串转换为浮点型</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"3.1415926535"</span></span><br><span class="line"></span><br><span class="line">f, err := strconv.ParseFloat(s, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">"%T, %v, err=%v\n"</span>, f, f, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// http://www.programming-idioms.org/idiom/146/convert-string-to-floating-point-number/1819/go</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><p><code>float64, 3.1415926535, err=&lt;nil&gt;</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"3.14159265359"</span>;</span><br><span class="line">    <span class="keyword">let</span> f = s.parse::&lt;<span class="built_in">f32</span>&gt;().unwrap();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;² = &#123;&#125;"</span> , f, f * f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3.1415927² = 9.869605</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"3.14159265359"</span>;</span><br><span class="line">    <span class="keyword">let</span> f: <span class="built_in">f32</span> = s.parse().unwrap();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;² = &#123;&#125;"</span>, f, f * f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3.1415927² = 9.869605</code></p><p><br></p><h3 id="147-Remove-all-non-ASCII-characters"><a href="#147-Remove-all-non-ASCII-characters" class="headerlink" title="147. Remove all non-ASCII characters"></a>147. <font color="0c0a3e">Remove all non-ASCII characters</font></h3><blockquote><pre><code>Create string t from string s, keeping only ASCII characters</code></pre></blockquote><p><em>移除所有的非ASCII字符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"regexp"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"dæmi : пример : příklad : thí dụ"</span></span><br><span class="line"></span><br><span class="line">re := regexp.MustCompile(<span class="string">"[[:^ascii:]]"</span>)</span><br><span class="line">t := re.ReplaceAllLiteralString(s, <span class="string">""</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dmi :  : pklad : th d</code></p><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line"><span class="string">"unicode"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"5#∑∂ƒ∞645eyfu"</span></span><br><span class="line">t := strings.Map(<span class="function"><span class="keyword">func</span><span class="params">(r <span class="keyword">rune</span>)</span> <span class="title">rune</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> r &gt; unicode.MaxASCII &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;, s)</span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>5#645eyfu</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"do👍ot"</span>.replace(|c: <span class="built_in">char</span>| !c.is_ascii(), <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doot</code></p><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, <span class="string">"do👍ot"</span>.replace(|c: <span class="built_in">char</span>| !c.is_ascii(), <span class="string">""</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>doot</code></p><p><br></p><h3 id="148-Read-list-of-integers-from-stdin"><a href="#148-Read-list-of-integers-from-stdin" class="headerlink" title="148. Read list of integers from stdin"></a>148. <font color="0c0a3e">Read list of integers from stdin</font></h3><blockquote><p>Read a list of integer numbers from the standard input, until EOF.</p></blockquote><p><em>从stdin(标准输入)中读取整数列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"bufio"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> ints []<span class="keyword">int</span></span><br><span class="line">s := bufio.NewScanner(osStdin)</span><br><span class="line">s.Split(bufio.ScanWords)</span><br><span class="line"><span class="keyword">for</span> s.Scan() &#123;</span><br><span class="line">i, err := strconv.Atoi(s.Text())</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">ints = <span class="built_in">append</span>(ints, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := s.Err(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(ints)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// osStdin simulates os.Stdin</span></span><br><span class="line"><span class="keyword">var</span> osStdin = strings.NewReader(<span class="string">`</span></span><br><span class="line"><span class="string">11</span></span><br><span class="line"><span class="string">22</span></span><br><span class="line"><span class="string">33  `</span>)</span><br></pre></td></tr></table></figure><p><code>[11 22 33]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::&#123;</span><br><span class="line">    io::&#123;<span class="keyword">self</span>, Read&#125;,</span><br><span class="line">    <span class="built_in">str</span>::FromStr,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// dummy io::stdin</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">io_stdin</span></span>() -&gt; <span class="keyword">impl</span> Read &#123;</span><br><span class="line">    <span class="string">"123</span></span><br><span class="line"><span class="string">456</span></span><br><span class="line"><span class="string">789"</span></span><br><span class="line">    .as_bytes()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() -&gt; io::<span class="built_in">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> string = <span class="built_in">String</span>::new();</span><br><span class="line">    io_stdin().read_to_string(&amp;<span class="keyword">mut</span> string)?;</span><br><span class="line">    <span class="keyword">let</span> result = string</span><br><span class="line">        .lines()</span><br><span class="line">        .map(<span class="built_in">i32</span>::from_str)</span><br><span class="line">        .collect::&lt;<span class="built_in">Result</span>&lt;<span class="built_in">Vec</span>&lt;_&gt;, _&gt;&gt;();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:#?&#125;"</span>, result);</span><br><span class="line">    <span class="literal">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Ok</span>(</span><br><span class="line">    [</span><br><span class="line">        <span class="number">123</span>,</span><br><span class="line">        <span class="number">456</span>,</span><br><span class="line">        <span class="number">789</span>,</span><br><span class="line">    ],</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><br></p><h3 id="150-Remove-trailing-slash"><a href="#150-Remove-trailing-slash" class="headerlink" title="150. Remove trailing slash"></a>150. <font color="0c0a3e">Remove trailing slash</font></h3><blockquote><p>Remove last character from string p, if this character is a slash /.</p></blockquote><p><em>去除末尾的 /</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := <span class="string">"/usr/bin/"</span></span><br><span class="line"></span><br><span class="line">p = strings.TrimSuffix(p, <span class="string">"/"</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/usr/bin</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="built_in">String</span>::from(<span class="string">"Dddd/"</span>);</span><br><span class="line">    <span class="keyword">if</span> p.ends_with(<span class="string">'/'</span>) &#123;</span><br><span class="line">        p.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dddd</code></p><p><br></p><h3 id="151-Remove-string-trailing-path-separator"><a href="#151-Remove-string-trailing-path-separator" class="headerlink" title="151. Remove string trailing path separator"></a>151. <font color="0c0a3e">Remove string trailing path separator</font></h3><blockquote><p>Remove last character from string p, if this character is the file path separator of current platform.<br>Note that this also transforms unix root path “/“ into the empty string!</p></blockquote><p><em>删除字符串尾部路径分隔符</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := somePath()</span><br><span class="line">fmt.Println(p)</span><br><span class="line"></span><br><span class="line">sep := fmt.Sprintf(<span class="string">"%c"</span>, os.PathSeparator)</span><br><span class="line">p = strings.TrimSuffix(p, sep)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">somePath</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">dir, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">p := fmt.Sprintf(<span class="string">"%s%c%s%c"</span>, dir, os.PathSeparator, <span class="string">"foobar"</span>, os.PathSeparator)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="number">067319278</span>/foobar/</span><br><span class="line">/tmp/<span class="number">067319278</span>/foobar</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">p := somePath()</span><br><span class="line">fmt.Println(p)</span><br><span class="line"></span><br><span class="line">sep := fmt.Sprintf(<span class="string">"%c"</span>, filepath.Separator)</span><br><span class="line">p = strings.TrimSuffix(p, sep)</span><br><span class="line"></span><br><span class="line">fmt.Println(p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">somePath</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">dir, err := ioutil.TempDir(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">p := fmt.Sprintf(<span class="string">"%s%c%s%c"</span>, dir, os.PathSeparator, <span class="string">"foobar"</span>, os.PathSeparator)</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp/<span class="number">065654753</span>/foobar/</span><br><span class="line">/tmp/<span class="number">065654753</span>/foobar</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"/tmp/"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">if</span> ::std::path::is_separator(p.chars().last().unwrap()) &#123;</span><br><span class="line">            &amp;p[<span class="number">0</span>..p.len() - <span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> p = <span class="keyword">if</span> ::std::path::is_separator(p.chars().last().unwrap()) &#123;</span><br><span class="line">            &amp;p[<span class="number">0</span>..p.len() - <span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp</span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="string">"/tmp/"</span>;</span><br><span class="line"></span><br><span class="line">        p = p.strip_suffix(std::path::is_separator).unwrap_or(p);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="string">"/tmp"</span>;</span><br><span class="line"></span><br><span class="line">        p = p.strip_suffix(std::path::is_separator).unwrap_or(p);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/tmp</span><br><span class="line">/tmp</span><br></pre></td></tr></table></figure><p><br></p><h3 id="152-Turn-a-character-into-a-string"><a href="#152-Turn-a-character-into-a-string" class="headerlink" title="152. Turn a character into a string"></a>152. <font color="0c0a3e">Turn a character into a string</font></h3><blockquote><p>Create string s containing only the character c.</p></blockquote><p><em>将字符转换成字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">rune</span> = os.PathSeparator</span><br><span class="line">fmt.Printf(<span class="string">"%c \n"</span>, c)</span><br><span class="line"></span><br><span class="line">s := fmt.Sprintf(<span class="string">"%c"</span>, c)</span><br><span class="line">fmt.Printf(<span class="string">"%#v \n"</span>, s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/ </span><br><span class="line"><span class="string">"/"</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="string">'a'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s = c.to_string();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>a</code></p><p><br></p><h3 id="153-Concatenate-string-with-integer"><a href="#153-Concatenate-string-with-integer" class="headerlink" title="153. Concatenate string with integer"></a>153. <font color="0c0a3e">Concatenate string with integer</font></h3><blockquote><p>Create string t as the concatenation of string s and integer i.</p></blockquote><p><em>连接字符串和整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">s := <span class="string">"Hello"</span></span><br><span class="line">i := <span class="number">123</span></span><br><span class="line"></span><br><span class="line">t := fmt.Sprintf(<span class="string">"%s%d"</span>, s, i)</span><br><span class="line"></span><br><span class="line">fmt.Println(t)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Hello123</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">"Foo"</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="built_in">format!</span>(<span class="string">"&#123;&#125;&#123;&#125;"</span>, s, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span> , t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Foo1</code></p><p><br></p><h3 id="154-Halfway-between-two-hex-color-codes"><a href="#154-Halfway-between-two-hex-color-codes" class="headerlink" title="154. Halfway between two hex color codes"></a>154. <font color="0c0a3e">Halfway between two hex color codes</font></h3><blockquote><p>Find color c, the average between colors c1, c2.<br>c, c1, c2 are strings of hex color codes: 7 chars, beginning with a number sign # .<br>Assume linear computations, ignore gamma corrections.</p></blockquote><p><em>求两个十六进制颜色代码的中间值</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For concision, halfway assume valid inputs.</span></span><br><span class="line"><span class="comment">// Caller must have explicitly checked that c1, c2 are well-formed color codes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">halfway</span><span class="params">(c1, c2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line">r1, _ := strconv.ParseInt(c1[<span class="number">1</span>:<span class="number">3</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">r2, _ := strconv.ParseInt(c2[<span class="number">1</span>:<span class="number">3</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">r := (r1 + r2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">g1, _ := strconv.ParseInt(c1[<span class="number">3</span>:<span class="number">5</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">g2, _ := strconv.ParseInt(c2[<span class="number">3</span>:<span class="number">5</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">g := (g1 + g2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">b1, _ := strconv.ParseInt(c1[<span class="number">5</span>:<span class="number">7</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">b2, _ := strconv.ParseInt(c2[<span class="number">5</span>:<span class="number">7</span>], <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">b := (b1 + b2) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">c := fmt.Sprintf(<span class="string">"#%02X%02X%02X"</span>, r, g, b)</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := <span class="string">"#15293E"</span></span><br><span class="line">c2 := <span class="string">"#012549"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c1); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c1, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c2); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c2, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := halfway(c1, c2)</span><br><span class="line">fmt.Println(<span class="string">"The average of"</span>, c1, <span class="string">"and"</span>, c2, <span class="string">"is"</span>, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFormat</span><span class="params">(color <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(color) != <span class="number">7</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors have exactly 7 chars"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> color[<span class="number">0</span>] != <span class="string">'#'</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors start with #"</span>)</span><br><span class="line">&#125;</span><br><span class="line">isNotDigit := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c &lt; <span class="string">'a'</span> || c &gt; <span class="string">'f'</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> strings.IndexFunc(strings.ToLower(color[<span class="number">1</span>:]), isNotDigit) != <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Forbidden char"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>The average of #15293E and #012549 is #0B2743</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"><span class="string">"strings"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// For concision, halfway assume valid inputs.</span></span><br><span class="line"><span class="comment">// Caller must have explicitly checked that c1, c2 are well-formed color codes.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">halfway</span><span class="params">(c1, c2 <span class="keyword">string</span>)</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> buf [<span class="number">7</span>]<span class="keyword">byte</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="string">'#'</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">sub1 := c1[<span class="number">1</span>+<span class="number">2</span>*i : <span class="number">3</span>+<span class="number">2</span>*i]</span><br><span class="line">sub2 := c2[<span class="number">1</span>+<span class="number">2</span>*i : <span class="number">3</span>+<span class="number">2</span>*i]</span><br><span class="line">v1, _ := strconv.ParseInt(sub1, <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">v2, _ := strconv.ParseInt(sub2, <span class="number">16</span>, <span class="number">0</span>)</span><br><span class="line">v := (v1 + v2) / <span class="number">2</span></span><br><span class="line">sub := fmt.Sprintf(<span class="string">"%02X"</span>, v)</span><br><span class="line"><span class="built_in">copy</span>(buf[<span class="number">1</span>+<span class="number">2</span>*i:<span class="number">3</span>+<span class="number">2</span>*i], sub)</span><br><span class="line">&#125;</span><br><span class="line">c := <span class="keyword">string</span>(buf[:])</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c1 := <span class="string">"#15293E"</span></span><br><span class="line">c2 := <span class="string">"#012549"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c1); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c1, err))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := checkFormat(c2); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">"Wrong input %q: %v"</span>, c2, err))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c := halfway(c1, c2)</span><br><span class="line">fmt.Println(<span class="string">"The average of"</span>, c1, <span class="string">"and"</span>, c2, <span class="string">"is"</span>, c)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkFormat</span><span class="params">(color <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(color) != <span class="number">7</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors have exactly 7 chars"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> color[<span class="number">0</span>] != <span class="string">'#'</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Hex colors start with #"</span>)</span><br><span class="line">&#125;</span><br><span class="line">isNotDigit := <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">rune</span>)</span> <span class="title">bool</span></span> &#123; <span class="keyword">return</span> (c &lt; <span class="string">'0'</span> || c &gt; <span class="string">'9'</span>) &amp;&amp; (c &lt; <span class="string">'a'</span> || c &gt; <span class="string">'f'</span>) &#125;</span><br><span class="line"><span class="keyword">if</span> strings.IndexFunc(strings.ToLower(color[<span class="number">1</span>:]), isNotDigit) != <span class="number">-1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Forbidden char"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>The average of #15293E and #012549 is #0B2743</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::<span class="built_in">str</span>::FromStr;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Colour</span></span> &#123;</span><br><span class="line">    r: <span class="built_in">u8</span>,</span><br><span class="line">    g: <span class="built_in">u8</span>,</span><br><span class="line">    b: <span class="built_in">u8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ColourError</span></span> &#123;</span><br><span class="line">    MissingHash,</span><br><span class="line">    InvalidRed,</span><br><span class="line">    InvalidGreen,</span><br><span class="line">    InvalidBlue</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> fmt::Display <span class="keyword">for</span> Colour &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">fmt</span></span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) -&gt; fmt::<span class="built_in">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">"#&#123;:02x&#125;&#123;:02x&#125;&#123;:02x&#125;"</span>, <span class="keyword">self</span>.r, <span class="keyword">self</span>.g, <span class="keyword">self</span>.b)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> FromStr <span class="keyword">for</span> Colour &#123;</span><br><span class="line">    <span class="class"><span class="keyword">type</span> <span class="title">Err</span></span> = ColourError;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">from_str</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="keyword">Self</span>, Self::<span class="literal">Err</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> !s.starts_with(<span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="literal">Err</span>(ColourError::MissingHash)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">Ok</span>(Colour &#123;</span><br><span class="line">                r: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">1</span>..<span class="number">3</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidRed)?,</span><br><span class="line">                g: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">3</span>..<span class="number">5</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidGreen)?,</span><br><span class="line">                b: <span class="built_in">u8</span>::from_str_radix(&amp;s[<span class="number">5</span>..<span class="number">7</span>], <span class="number">16</span>).map_err(|_| ColourError::InvalidBlue)?</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">mid_colour</span></span>(c1: &amp;<span class="built_in">str</span>, c2: &amp;<span class="built_in">str</span>) -&gt; <span class="built_in">Result</span>&lt;<span class="built_in">String</span>, ColourError&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> c1 = c1.parse::&lt;Colour&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> c2 = c2.parse::&lt;Colour&gt;()?;</span><br><span class="line">    <span class="keyword">let</span> c = Colour &#123;</span><br><span class="line">        r: (((c1.r <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.r <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span>,</span><br><span class="line">        g: (((c1.g <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.g <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span>,</span><br><span class="line">        b: (((c1.b <span class="keyword">as</span> <span class="built_in">u16</span>) + (c2.b <span class="keyword">as</span> <span class="built_in">u16</span>))/<span class="number">2</span>) <span class="keyword">as</span> <span class="built_in">u8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="literal">Ok</span>(<span class="built_in">format!</span>(<span class="string">"&#123;&#125;"</span>, c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, mid_colour(<span class="string">"#15293E"</span>, <span class="string">"#012549"</span>).unwrap())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>#0b2743</code></p><p><br></p><h3 id="155-Delete-file"><a href="#155-Delete-file" class="headerlink" title="155. Delete file"></a>155. <font color="0c0a3e">Delete file</font></h3><blockquote><p>Delete from filesystem the file having path filepath.</p></blockquote><p><em>删除文件</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"io/ioutil"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, filepath := <span class="keyword">range</span> []<span class="keyword">string</span>&#123;</span><br><span class="line"><span class="string">"/tmp/foo.txt"</span>,</span><br><span class="line"><span class="string">"/tmp/bar.txt"</span>,</span><br><span class="line"><span class="string">"/tmp/foo.txt"</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">err := os.Remove(filepath)</span><br><span class="line"><span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"Removed"</span>, filepath)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Fprintln(os.Stderr, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := ioutil.WriteFile(<span class="string">"/tmp/foo.txt"</span>, []<span class="keyword">byte</span>(<span class="string">`abc`</span>), <span class="number">0644</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Removed /tmp/foo.txt</span><br><span class="line">remove /tmp/bar.txt: no such file or directory</span><br><span class="line">remove /tmp/foo.txt: no such file or directory</span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> filepath = <span class="string">"/tmp/abc"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Creating &#123;&#125;"</span>, filepath);</span><br><span class="line">    <span class="keyword">let</span> _file = fs::File::create(filepath);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(filepath).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, filepath, b);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"Deleting &#123;&#125;"</span>, filepath);</span><br><span class="line">    <span class="keyword">let</span> r = fs::remove_file(filepath);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;:?&#125;"</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> b = std::path::Path::new(filepath).exists();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125; exists: &#123;&#125;"</span>, filepath, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Creating /tmp/abc</span><br><span class="line">/tmp/abc exists: <span class="literal">true</span></span><br><span class="line">Deleting /tmp/abc</span><br><span class="line"><span class="literal">Ok</span>(())</span><br><span class="line">/tmp/abc exists: <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="156-Format-integer-with-zero-padding"><a href="#156-Format-integer-with-zero-padding" class="headerlink" title="156. Format integer with zero-padding"></a>156. <font color="0c0a3e">Format integer with zero-padding</font></h3><blockquote><p>Assign to string s the value of integer i in 3 decimal digits. Pad with zeros if i &lt; 100. Keep all digits if i ≥ 1000.</p></blockquote><p><em>用零填充格式化整数</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> []<span class="keyword">int</span>&#123;</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">8</span>,</span><br><span class="line"><span class="number">64</span>,</span><br><span class="line"><span class="number">256</span>,</span><br><span class="line"><span class="number">2048</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">s := fmt.Sprintf(<span class="string">"%03d"</span>, i)</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">000</span></span><br><span class="line"><span class="number">008</span></span><br><span class="line"><span class="number">064</span></span><br><span class="line"><span class="number">256</span></span><br><span class="line"><span class="number">2048</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:03&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">format!</span>(<span class="string">"&#123;:03&#125;"</span>, i);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">1000</span></span><br></pre></td></tr></table></figure><p><br></p><h3 id="157-Declare-constant-string"><a href="#157-Declare-constant-string" class="headerlink" title="157. Declare constant string"></a>157. <font color="0c0a3e">Declare constant string</font></h3><blockquote><p>Initialize a constant planet with string value “Earth”.</p></blockquote><p><em>声明常量字符串</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> planet = <span class="string">"Earth"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"We live on planet"</span>, planet)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>We live on planet Earth</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> PLANET: &amp;<span class="built_in">str</span> = <span class="string">"Earth"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, PLANET);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Earth</code></p><p><br></p><h3 id="158-Random-sublist"><a href="#158-Random-sublist" class="headerlink" title="158. Random sublist"></a>158. <font color="0c0a3e">Random sublist</font></h3><blockquote><p>Create a new list y from randomly picking exactly k elements from list x.<br></p></blockquote><p><strong>It is assumed that x has at least k elements.<br>Each element must have same probability to be picked.<br>Each element from x must be picked at most once.<br>Explain if the original ordering is preserved or not.</strong></p><p><em>随机子列表</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"math/rand"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> T <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">x := []T&#123;<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Carol"</span>, <span class="string">"Dan"</span>, <span class="string">"Eve"</span>, <span class="string">"Frank"</span>, <span class="string">"Grace"</span>, <span class="string">"Heidi"</span>&#125;</span><br><span class="line">k := <span class="number">4</span></span><br><span class="line"></span><br><span class="line">y := <span class="built_in">make</span>([]T, k)</span><br><span class="line">perm := rand.Perm(<span class="built_in">len</span>(x))</span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> perm[:k] &#123;</span><br><span class="line">y[i] = x[v]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">"%q"</span>, y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[&quot;Frank&quot; &quot;Eve&quot; &quot;Carol&quot; &quot;Grace&quot;]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> rand::prelude::*;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> rng = &amp;<span class="keyword">mut</span> rand::thread_rng();</span><br><span class="line"><span class="keyword">let</span> y = x.choose_multiple(&amp;<span class="keyword">mut</span> rng, k).cloned().collect::&lt;<span class="built_in">Vec</span>&lt;_&gt;&gt;();</span><br></pre></td></tr></table></figure><p><br></p><h3 id="159-Trie"><a href="#159-Trie" class="headerlink" title="159. Trie"></a>159. <font color="0c0a3e">Trie</font></h3><blockquote><p>Define a Trie data structure, where entries have an associated value.<br>(Not all nodes are entries)</p></blockquote><p><em>基数树</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"unicode/utf8"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Trie <span class="keyword">struct</span> &#123;</span><br><span class="line">c        <span class="keyword">rune</span></span><br><span class="line">children <span class="keyword">map</span>[<span class="keyword">rune</span>]*Trie</span><br><span class="line">isLeaf   <span class="keyword">bool</span></span><br><span class="line">value    V</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> V <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">t := NewTrie(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> s, v := <span class="keyword">range</span> <span class="keyword">map</span>[<span class="keyword">string</span>]V&#123;</span><br><span class="line"><span class="string">"to"</span>:  <span class="number">7</span>,</span><br><span class="line"><span class="string">"tea"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"ted"</span>: <span class="number">4</span>,</span><br><span class="line"><span class="string">"ten"</span>: <span class="number">12</span>,</span><br><span class="line"><span class="string">"A"</span>:   <span class="number">15</span>,</span><br><span class="line"><span class="string">"i"</span>:   <span class="number">11</span>,</span><br><span class="line"><span class="string">"in"</span>:  <span class="number">5</span>,</span><br><span class="line"><span class="string">"inn"</span>: <span class="number">9</span>,</span><br><span class="line">&#125; &#123;</span><br><span class="line">t.insert(s, v)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(t.startsWith(<span class="string">"te"</span>, <span class="string">""</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewTrie</span><span class="params">(c <span class="keyword">rune</span>)</span> *<span class="title">Trie</span></span> &#123;</span><br><span class="line">t := <span class="built_in">new</span>(Trie)</span><br><span class="line">t.c = c</span><br><span class="line">t.children = <span class="keyword">map</span>[<span class="keyword">rune</span>]*Trie&#123;&#125;</span><br><span class="line"><span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">insert</span><span class="params">(s <span class="keyword">string</span>, value V)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> s == <span class="string">""</span> &#123;</span><br><span class="line">t.isLeaf = <span class="literal">true</span></span><br><span class="line">t.value = value</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c, tail := cut(s)</span><br><span class="line">child, exists := t.children[c]</span><br><span class="line"><span class="keyword">if</span> !exists &#123;</span><br><span class="line">child = NewTrie(c)</span><br><span class="line">t.children[c] = child</span><br><span class="line">&#125;</span><br><span class="line">child.insert(tail, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *Trie)</span> <span class="title">startsWith</span><span class="params">(p <span class="keyword">string</span>, accu <span class="keyword">string</span>)</span> []<span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> t == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> p == <span class="string">""</span> &#123;</span><br><span class="line"><span class="keyword">var</span> result []<span class="keyword">string</span></span><br><span class="line"><span class="keyword">if</span> t.isLeaf &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, accu)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> c, child := <span class="keyword">range</span> t.children &#123;</span><br><span class="line">rec := child.startsWith(<span class="string">""</span>, accu+<span class="keyword">string</span>(c))</span><br><span class="line">result = <span class="built_in">append</span>(result, rec...)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line">c, tail := cut(p)</span><br><span class="line"><span class="keyword">return</span> t.children[c].startsWith(tail, accu+<span class="keyword">string</span>(c))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">cut</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(head <span class="keyword">rune</span>, tail <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">r, size := utf8.DecodeRuneInString(s)</span><br><span class="line"><span class="keyword">return</span> r, s[size:]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[ten tea ted]</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Trie</span></span> &#123;</span><br><span class="line">    val: <span class="built_in">String</span>,</span><br><span class="line">    nodes: <span class="built_in">Vec</span>&lt;Trie&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="160-Detect-if-32-bit-or-64-bit-architecture"><a href="#160-Detect-if-32-bit-or-64-bit-architecture" class="headerlink" title="160. Detect if 32-bit or 64-bit architecture"></a>160. <font color="0c0a3e">Detect if 32-bit or 64-bit architecture</font></h3><blockquote><p>Execute f32() if platform is 32-bit, or f64() if platform is 64-bit.<br>This can be either a compile-time condition (depending on target) or a runtime detection.</p></blockquote><p><em>检测是32位还是64位架构</em></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> strconv.IntSize == <span class="number">32</span> &#123;</span><br><span class="line">f32()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> strconv.IntSize == <span class="number">64</span> &#123;</span><br><span class="line">f64()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f32</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I am 32-bit"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f64</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"I am 64-bit"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>I am 64-bit</code></p><hr><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> std::mem::size_of::&lt;&amp;<span class="built_in">char</span>&gt;() &#123;</span><br><span class="line">        <span class="number">4</span> =&gt; <span class="built_in">f32</span>(),</span><br><span class="line">        <span class="number">8</span> =&gt; <span class="built_in">f64</span>(),</span><br><span class="line">        _ =&gt; &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f32</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I am 32-bit"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">f64</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"I am 64-bit"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>I am 64-bit</code></p><p><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&quot;141-Iterate-in-sequence-over-two-lists&quot;&gt;&lt;a href=&quot;#141-Iterate-in-sequence-over-two-lists&quot; class=&quot;headerlink&quot; title=&quot;141.
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>零宽字符</title>
    <link href="http://www.dashen.tech/2021/07/21/%E9%9B%B6%E5%AE%BD%E5%AD%97%E7%AC%A6/"/>
    <id>http://www.dashen.tech/2021/07/21/零宽字符/</id>
    <published>2021-07-21T03:30:37.000Z</published>
    <updated>2021-07-21T03:31:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://zhuanlan.zhihu.com/p/87919817" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/87919817</a></p><p><a href="https://blog.csdn.net/qq_46485934/article/details/110202094" target="_blank" rel="noopener">https://blog.csdn.net/qq_46485934/article/details/110202094</a></p><p>数据防爬<br>将零宽度字符插入关键词文本中，使得匹配关键字时不能正确匹配，但是不影响用户的正常阅读<br>信息隐藏（可做水印）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/87919817&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://zhuanlan.zhihu.com/p/87919817&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>类型系统</title>
    <link href="http://www.dashen.tech/2021/07/20/%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/"/>
    <id>http://www.dashen.tech/2021/07/20/类型系统/</id>
    <published>2021-07-20T13:28:40.000Z</published>
    <updated>2021-07-21T15:16:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/23434097" target="_blank" rel="noopener">https://www.zhihu.com/question/23434097</a></p><p><a href="https://zhuanlan.zhihu.com/p/65626985" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/65626985</a></p><p><a href="https://www.jianshu.com/p/e9f96c34b768" target="_blank" rel="noopener">https://www.jianshu.com/p/e9f96c34b768</a></p><p><a href="https://zhuanlan.zhihu.com/p/158421251" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/158421251</a></p><p><a href="https://baike.baidu.com/item/%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/4273825?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/%E7%B1%BB%E5%9E%8B%E7%B3%BB%E7%BB%9F/4273825?fr=aladdin</a></p><p>现代编程语言早已发展到了“程序即类型证明”的阶段，类型系统基本已经成为了各大编程语言的标配，尤其是近几年新出现的编程语言。类型系统提供了以下好处：</p><p>允许编译器侦测无意义甚至无效的代码，暴露程序中隐含的错误。</p><p>可以为编译器提供有意义的类型信息，帮助优化代码。</p><p>可以增强代码的可读性，更直白地阐述开发者的意图。</p><p>提供了一定程度的高级抽象，提升开发效率。</p><p>一般来说，一门语言只要保证类型安全，就可以说它是一门安全的语言。简单来说，类型安全是指类型系统可以保证程序的行为是意义明确、不出错的。像 C/C++ 语言的类型系统就不是类型安全的，因为它们并没有对无意义的行为进行约束。一个最简单的例子就是数组越界，在 C/C++ 语言中并不对其做任何检查，导致发生了语言规范规定之外的行为，也就是未定义行为（Undefined Behavior）。而这些未定义行为恰恰是漏洞的温床。所以，像 C/C++ 这种语言就是类型不安全的语言。</p><p>Rust 语言如果想保证内存安全，首先要做的就是保证类型安全。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>在诸多编程语言中， OCaml 和 Haskell 是公认的类型安全的典范，它们的类型系统不仅仅有强大的类型理论“背书”，而且在实践生产环境中也久经考验。所以，Rust 语言借鉴了它们的类型系统来保证类型安全，尤其是 Haskell，你能在 Rust 语言中看到更多 Haskell 类型系统的影子。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>那么，什么是内存安全呢？简单来说，就是不会出现内存访问错误。</p><p>只有当程序访问未定义内存的时候才会产生内存错误。一般来说，发生以下几种情况就会产生内存错误：</p><p>引用空指针。</p><p>使用未初始化内存。</p><p>释放后使用，也就是使用悬垂指针。</p><p>缓冲区溢出，比如数组越界。</p><p>非法释放已经释放过的指针或未分配的指针，也就是重复释放。</p><p>这些情况之所以会产生内存错误，是因为它们都访问了未定义内存。为了保证内存安全，Rust 语言建立了严格的安全内存管理模型：</p><p>所有权系统。每个被分配的内存都有一个独占其所有权的指针。只有当该指针被销毁时，其对应的内存才能随之被释放。</p><p>借用和生命周期。每个变量都有其生命周期，一旦超出生命周期，变量就会被自动释放。如果是借用，则可以通过标记生命周期参数供编译器检查的方式，防止出现悬垂指针，也就是释放后使用的情况。</p><p>其中所有权系统还包括了从现代 C++ 那里借鉴的 RAII 机制，这是 Rust 无 GC 但是可以安全管理内存的基石。</p><p>建立了安全内存管理模型之后，再用类型系统表达出来即可。Rust 从 Haskell 的类型系统那里借鉴了以下特性：</p><p>没有空指针</p><p>默认不可变</p><p>表达式</p><p>高阶函数</p><p>代数数据类型</p><p>模式匹配</p><p>泛型</p><p>trait 和关联类型</p><p>本地类型推导</p><p>为了实现内存安全，Rust 还具备以下独有的特性：</p><p>仿射类型（Affine Type），该类型用来表达 Rust 所有权中的 Move 语义。</p><p>借用、生命周期。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>借助类型系统的强大，Rust 编译器可以在编译期对类型进行检查，看其是否满足安全内存模型，在编译期就能发现内存不安全问题，有效地阻止未定义行为的发生。</p><p>内存安全的 Bug 和并发安全的 Bug 产生的内在原因是相同的，都是因为内存的不正当访问而造成的。同样，利用装载了所有权的强大类型系统，Rust 还解决了并发安全的问题。Rust 编译器会通过静态检查分析，在编译期就检查出多线程并发代码中所有的数据竞争问题<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p><br></p><p>1.2.2 零成本抽象<br>除了安全性，Rust 还追求高效开发和性能。</p><p>编程语言如果想做到高效开发，就必须拥有一定的抽象表达能力。关于抽象表达能力，最具代表性的语言就是 Ruby 。<br>但是 Ruby 的抽象表达能力完全是靠牺牲性能换来的。而 Rust 的抽象是零成本的，Rust 的抽象并不会存在运行时性能开销，这一切都是在编译期完成的。代码清单 1-1 中的迭代 5 次的抽象代码，在编译期会被展开成和手写汇编代码相近的底层代码，所以不存在运行时因为解释这一层抽象而产生的性能开销。对于一门系统级编程语言而言，运行时零成本是非常重要的。这一点，Rust 做到了。Rust 中零成本抽象的基石就是泛型和 trait。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>为了保证支持硬实时系统，Rust 从 C++ 那里借鉴了确定性析构、RAII 和智能指针，用于自动化地、确定性地管理内存，从而避免了 GC 的引入，因而就不会有“世界暂停”的问题了。这几项虽然借鉴自 C++，但是使用起来比 C++ 更加简洁。</p><p>Safe Rust 表示开发者将信任编译器能够在编译时保证安全，而 Unsafe Rust 表示让编译器信任开发者有能力保证安全。</p><p>虽然 Rust 官方团队做了以上诸多努力，但是目前还有一大部分开发者认为 Rust 语言学习曲线颇陡。其中最为诟病的就是 Rust 目前的借用检查系统。这其实是因为 Rust 语言的设计融合了诸多语言的特点，而当今大部分开发者只是擅长其中一门语言，对其他语言的特性不太了解。C 语言的开发者虽然对底层内存管理比较熟悉，但是未必熟悉 C++ 的 RAII 机制；即使熟悉 C++，也未必熟悉 Haskell 的类型系统；即便熟悉 Haskell 的类型系统，也未必懂得底层内存管理机制。更不用说内置 GC 的 Java、Ruby、Python 等面向对象语言的开发者了。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>语言架构<br>为了便于学习，笔者针对 Rust 语言概念的层次结构进行了梳理，将 Rust 语言中的概念分成了 4 个层次。最底层是安全内存管理层，该层主要是涉及内存管理相关的概念。倒数第二层是类型系统层，该层起到承上启下的作用。类型系统层承载了上层的所有权系统语义和混合编程范式，赋予了 Rust 语言高级的抽象表达能力和安全性。同时，还保留了对底层代码执行、数据表示和内存分配等操作的控制能力。</p><p>对于开发者而言，只需要掌握类型系统、所有权系统和混合式编程范式即可，不需要操心底层的内存是否安全，因为有编译器和类型系统帮忙处理。在这个语言架构之下，人和编译器共用同一套“心智模型”，这样可以极大地保证系统的安全和健壮性。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>1.4 Rust 代码如何执行<br>Rust 从诞生伊始，就考虑到了平台移植性问题。通常编译阶段被分为前端和后端两部分，Rust 作为编译语言，也是这样划分的。Rust 编译器是一个编译前端，它的工作是对代码进行词法分析、语法分析、类型检查、生成中间代码、进行独立于目标机器的优化等工作。使用 LLVM 作为编译器后端代码生成框架，则可以利用 LLVM 兼容多个目标机器的特性，实现跨平台编译和优化等工作。所以，用户在使用 Rust 时，大多数时候无须考虑各个目标机器平台的特有性质，基本上可以做到一次编写，到处运行。而当用户在需要处理跨平台兼容性问题的时候，Rust 也以第三方 crate 的形式提供了诸多辅助。</p><p>Rust 源码经过分词和解析，生成 AST（抽象语法树）。然后把 AST 进一步简化处理为 HIR（High-level IR），目的是让编译器更方便地做类型检查。HIR 会进一步被编译为 MIR（Middle IR），这是一种中间表示，它在 Rust1.12 版本中被引入，主要用于以下目的。</p><p>缩短编译时间。MIR 可以帮助实现增量编译，当你修改完代码重新编译的时候，编译器只计算更改过的部分，从而缩短了编译时间。</p><p>缩短执行时间。MIR 可以在 LLVM 编译之前实现更细粒度的优化，因为单纯依赖 LLVM 的优化粒度太粗，而且 Rust 无法控制，引入 MIR 就增加了更多的优化空间。</p><p>更精确的类型检查。MIR 将帮助实现更灵活的借用检查，从而可以提升 Rust 的使用体验。</p><p>最终，MIR 会被翻译为 LLVM IR，然后被 LLVM 的处理编译为能在各个平台上运行的目标机器码。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p><p>Rust 的产生看似偶然，其实是必然。未来的互联网注重安全和高性能是必然的趋势。GH 看到了这一点，Mozilla 也看到了这一点，所以两者才能一拍即合，创造出 Rust。</p><p>Rust 从 2006 年诞生之日开始，目标就很明确——追求安全、并发和高性能的现代系统级编程语言。为了达成这一目标，Rust 语言遵循着内存安全、零成本抽象和实用性三大设计哲学。借助现代化的类型系统，赋予了 Rust 语言高级的抽象表达能力，与此同时又保留了对底层的控制能力。开发者和 Rust 编译器共享着同一套“心智模型”，相互信任，相互协作，最大化地保证系统的安全和健壮性。Rust 语言有别于传统语言的另一点在于，它将开源社区视为语言的一部分。Rust 本身就是开源项目中的典范，非常值得学习。</p><p>有人把 Rust 称为”The New C“，我十分认同，Rust 是开启新时代的语言。但 Rust 可能不像其他语言那样，突然冒出一个杀手级应用来引领某个领域的一段潮流。Rust 改变世界的方式，正好可以用古人的诗词来形容，”好雨知时节，当春乃发生。随风潜入夜，润物细无声“。</p><p>Rust 语言不是银弹，它也不追求完美，它只是在由 C 和 C++ 构建的旧世界之上，寻求更好的问题解决之道。<br>————————————————<br>版权声明：本文为CSDN博主「六点的清晨」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_39445733/article/details/99307054" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39445733/article/details/99307054</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/23434097&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/23434097&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Rust" scheme="http://www.dashen.tech/tags/Rust/"/>
    
  </entry>
  
</feed>
